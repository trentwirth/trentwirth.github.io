{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Outline","text":"<p>A self-guided curriculum for mastering the mathematical foundations of dynamic systems, simulation, and robotics.</p>"},{"location":"#phase-1-mathematical-foundations-weeks-14","title":"Phase 1: Mathematical Foundations (Weeks 1\u20134)","text":""},{"location":"#module-1-calculus-refresher-motion-change","title":"Module 1: Calculus Refresher \u2014 Motion &amp; Change","text":"<ul> <li>Derivatives, integrals, position/velocity/acceleration</li> <li>Visualizing motion in 1D and 2D</li> <li>Tools: <code>sympy</code>, <code>matplotlib</code>, <code>numpy</code></li> </ul>"},{"location":"#module-2-linear-algebra-core","title":"Module 2: Linear Algebra Core","text":"<ul> <li>Vectors, matrices, systems of equations, transformations</li> <li>Solving Ax = b, eigenvalues and eigenvectors</li> <li>Tools: <code>numpy</code>, <code>matplotlib</code>, <code>sympy</code></li> </ul>"},{"location":"#phase-2-multivariable-vector-calculus-weeks-57","title":"Phase 2: Multivariable &amp; Vector Calculus (Weeks 5\u20137)","text":""},{"location":"#module-3-calculus-with-vectors","title":"Module 3: Calculus with Vectors","text":"<ul> <li>Partial derivatives, gradients, Jacobians</li> <li>Interpreting surface slopes and optimization geometry</li> <li>Tools: <code>sympy</code>, 3D <code>matplotlib</code>, <code>plotly</code></li> </ul>"},{"location":"#module-4-multiple-integration-vector-fields","title":"Module 4: Multiple Integration &amp; Vector Fields","text":"<ul> <li>Double/triple integrals, line/surface integrals</li> <li>Divergence, curl, and vector field visualization</li> <li>Tools: <code>matplotlib</code>, <code>sympy</code>, <code>plotly</code></li> </ul>"},{"location":"#phase-3-differential-equations-dynamics-weeks-810","title":"Phase 3: Differential Equations &amp; Dynamics (Weeks 8\u201310)","text":""},{"location":"#module-5-odes-dynamic-systems","title":"Module 5: ODEs &amp; Dynamic Systems","text":"<ul> <li>Solving first- and second-order ODEs</li> <li>Numerical methods (Euler, Runge-Kutta), phase portraits</li> <li>Tools: <code>scipy.integrate</code>, <code>numpy</code>, <code>matplotlib</code></li> </ul>"},{"location":"#module-6-linear-systems-state-space-models","title":"Module 6: Linear Systems &amp; State-Space Models","text":"<ul> <li>State-space models: dx/dt = Ax + Bu</li> <li>Stability, controllability, feedback</li> <li>Tools: <code>scipy.linalg</code>, <code>control</code>, <code>numpy</code></li> </ul>"},{"location":"#phase-4-from-theory-to-simulation-weeks-1114","title":"Phase 4: From Theory to Simulation (Weeks 11\u201314)","text":""},{"location":"#module-7-intro-to-pydrake-simulation","title":"Module 7: Intro to Pydrake &amp; Simulation","text":"<ul> <li>Setting up simple dynamic models in Pydrake</li> <li>Using DiagramBuilder, simulating motion</li> <li>Tools: <code>pydrake</code>, <code>matplotlib</code></li> </ul>"},{"location":"#module-8-control-estimation-and-robotics","title":"Module 8: Control, Estimation, and Robotics","text":"<ul> <li>Implementing feedback controllers (e.g., PID)</li> <li>Trajectory tracking and estimation (e.g., Kalman filter)</li> <li>Tools: <code>pydrake</code>, <code>control</code>, <code>sympy</code></li> </ul>"},{"location":"#optional-capstone-swarm-robotics-collective-behavior","title":"Optional Capstone: Swarm Robotics &amp; Collective Behavior","text":""},{"location":"#module-9-multi-agent-systems-and-local-interaction","title":"Module 9: Multi-Agent Systems and Local Interaction","text":"<ul> <li>Simulating swarms with weighted averaging vs topological models</li> <li>Comparing stability, convergence, and robustness</li> <li>Tools: <code>numpy</code>, <code>matplotlib</code>, optionally <code>pydrake</code></li> </ul>"},{"location":"#tools-platforms","title":"Tools &amp; Platforms","text":"<ul> <li>Google Colab (coding &amp; testing)</li> <li>MkDocs (personal knowledge base)</li> <li>AI-assisted learning via ChatGPT or similar</li> <li>Python packages: <code>numpy</code>, <code>sympy</code>, <code>matplotlib</code>, <code>scipy</code>, <code>control</code>, <code>pydrake</code>, <code>plotly</code></li> </ul>"},{"location":"#learning-strategy","title":"Learning Strategy","text":"<ul> <li>Use AI as a math coach and problem set generator</li> <li>Document findings and concepts in MkDocs</li> <li>Test and simulate regularly in Colab</li> <li>Build up toward hands-on robotics applications</li> </ul>"}]}