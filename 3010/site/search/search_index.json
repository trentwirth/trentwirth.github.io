{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PSYC 3010 - Programming for Behavioral Scientists","text":"<p>This webpage will be used as the virtual textbook and our guide through learning Python.</p> <p>This is publicly facing, so that anyone can access it!</p> <p>To get started learning, click on the <code>Learning Paths</code> tab above. You probably want to start with <code>Step 01</code></p>"},{"location":"about/","title":"About","text":"<p>This course is designed and created by Dr. Trenton Wirth, Psychology Professor at the University of Cincinnati.</p> <p>It is made with the intention of introducing anyone to the basics of programming, with a focus on Python. The course is designed to be accessible to anyone, regardless of their prior experience with programming.</p> <p>The code for this project follows the GNU General Public License v3.0, and the course content follows the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You can find details of these licenses in the <code>Licenses</code> tab of this website.</p> <p>Trent is not a computer scientist, and doesn't claim to be an expert on programming. However, his journey of learning programming as a behavioral scientist himself equips him with the empathy and patience to develop a course targetting non-technical students who want to learn how to engage in scientific programming.</p> <p>You can reach Trent at his University email: <code>wirthtd AT ucmail DOT uc DOT edu</code></p>"},{"location":"assistance/","title":"Get Assistance","text":"<p>If you're taking this course through University of Cincinnati, please follow the intructions on the Cavnas page.</p> <p>If you're not a part of the class, you can reach Trent at his University email: <code>wirthtd AT ucmail DOT uc DOT edu</code></p>"},{"location":"assistance/copilot/","title":"Setting up GitHub Co-Pilot for Students","text":"<p>To set up GitHub Co-Pilot, follow these steps:</p> <ol> <li>If you haven't done so already, create a GitHub account: Visit the GitHub website github.com.</li> <li>Follow the instructions on this GitHub page for applying to GitHub Global Campus as a student. This will give you access to GitHub Co-Pilot and other benefits.</li> </ol>"},{"location":"assistance/copilot/#using-github-co-pilot-in-vs-code","title":"Using GitHub Co-Pilot in VS Code","text":"<ol> <li>Install the GitHub Co-Pilot extension: Open VS Code and go to the Extensions tab. Search for \"GitHub Co-Pilot\" and click on the \"Install\" button to install the extension.</li> <li>Sign in to your GitHub account: Click on the \"Sign in to GitHub\" button in the bottom left corner of the VS Code window and follow the instructions to sign in to your GitHub account.</li> <li>Start using GitHub Co-Pilot: Open a new file in VS Code and start typing. GitHub Co-Pilot will automatically suggest code snippets based on the context of your code.</li> <li>Chat with GitHub Co-Pilot: You can also chat with GitHub Co-Pilot by clicking the two speech bubbles icon on the left side of the VS Code window. This will open a chat window where you can ask questions and get answers from GitHub Co-Pilot. This can be useful to have Co-Pilot explain your code line by line, or answer general questions.</li> </ol> <p>Hotkeys</p> <p>You can also use the keyboard shortcut <code>Ctrl+I</code> on Windows or <code>Command+I</code> on Mac to in-line chat with Github Co-Pilot and get immediate suggestions for your code.</p>"},{"location":"coding_assignments/","title":"Welcome to Coding Assignments!","text":"<p>These assignments are designed to test your understanding of the concepts covered in the learning paths. You will be asked to write Python code to solve a series of problems.</p> <p>Check out the pages on the left hand side, each coding assignment will tell you what Step in the Learning Path you should have completed before attempting the assignment.</p>"},{"location":"coding_assignments/coding_assignment_01/","title":"Coding Assignment 1","text":"<p>Note: You should only begin this assignment when you have completed Step 4 of the Learning Path.</p> <p>This assignment will test your understanding of the concepts covered up to Step 4 of the Learning Path. You will be asked to write Python code to solve a series of problems. </p> <p>Because what we've learned so far is limited, I will ask you to write a block of code that will end with a certain result/functionality. As a part of your assignment, you might need to explain how the resulting functionality is useful.</p>"},{"location":"coding_assignments/coding_assignment_01/#problem-1-odd-or-even","title":"Problem 1: Odd or Even?","text":"<p>Write a Python program that takes in an <code>input_integer</code> and then prints some information that would tell us if that number is odd or even.</p> <p>The code block should look something like this:</p> <pre><code># We should be able to enter *any* integer here \n# and get the correct answer\ninput_integer =  \n\n# ... your code here ...\n\nprint(output_information) \n# This can be a string, a boolean, or a number\n# it should tell us if the input_integer is odd or even. \n# Explain why this output is useful in a comment.\n</code></pre>"},{"location":"coding_assignments/coding_assignment_01/#problem-2-temperature-conversion","title":"Problem 2: Temperature Conversion","text":"<p>Write a Python program that takes in a temperature in Celsius and converts it to Fahrenheit. </p> <p>Print the result.</p> <p>The code block should look something like this:</p> <pre><code># We should be able to enter any temperature \n# (likely a float, not an integer) in Celsius here \n# and print the correct answer in Fahrenheit\ncelsius_temperature =  \n\n# ... your code here ...\n\nprint(fahrenheit_temperature) \n# This should print the temperature in Fahrenheit.\n</code></pre>"},{"location":"coding_assignments/coding_assignment_01/#problem-3-string-how-many-characters","title":"Problem 3: String + How Many Characters?","text":"<p>Write a Python program that takes an <code>input_string</code> and prints a statement that includes the string itself and its length. Use the length function (<code>len()</code>) function to determine the length of the string.</p> <p>If our string was \"Bearcat\", the printed result should be something like: </p> <p>\"The string 'Bearcat' has 7 characters.\"</p> <p>To generate a more complex print statement, you can use the <code>+</code> operator to concatenate strings, or you can explore the f-string print method.</p> <p>f-strings are really cool, and is super useful!</p> <p>The code block should look something like this:</p> <pre><code># We should be able to enter any string here \n# and get the correct answer\ninput_string =  \n\n# ... your code here ...\n\n# Print the string and its length in a descriptive statement\nprint(... your code here ...)\n# This should print the input string and its length.\n# Explain why this output is useful in a comment.\n</code></pre> <p>If you are taking this class for credit at UC...</p> <p>Save all of your problems as an <code>.ipynb</code> file and submit it to the appropriate assignment on Canvas.</p>"},{"location":"learning_paths/","title":"Learning Paths","text":"<p>There is a main path for this course, followed by a sequence of steps. Each step is a module that you need to complete in order to move on to the next step. The steps are designed to help you learn the material in a logical sequence.</p>"},{"location":"learning_paths/Step_01/","title":"Step 1","text":""},{"location":"learning_paths/Step_01/#some-basic-concepts","title":"Some Basic Concepts","text":""},{"location":"learning_paths/Step_01/#what-is-a-computer","title":"What is a Computer?","text":"<p>If you think about it, you computer is a magic rock (aren't we all?)! It's a rock that can do math, remember things, and even talk to other rocks!</p> <p>Your computer is composed of two main components: Hardware and Software.</p> <p>The hardware is the physical parts of the computer - the things you can touch and see. This includes things like the monitor, keyboard, mouse, and the computer itself.</p> <p>The software is the programs that run on the computer. This includes things like the operating system (Windows, Mac OS, Linux), web browsers, and the programs you use to do things like write documents, create spreadsheets, and play games.</p> <p>In order for software to operate, it needs to know where to find the data it needs to run. This is where the file system comes in.</p> <p>The file system is the way that data is stored on your computer. Think of the filing system like addresses on a street. Each file on your computer has an address, and the file system is the way that the computer knows where to find the data it needs.</p> <p>To further understand the basics of the file system, we need to know what a \"directory\" and a \"file\" are.</p>"},{"location":"learning_paths/Step_01/#what-is-a-directory","title":"What is a \"Directory\"?","text":"<p>A directory is a place where files are stored. Think of a directory like a folder on your computer (for all intents and purposes, directory == folder). A directory can contain other directories, as well as files.</p> <p>Directories are important because this allows us to provide distinct and organized \"addresses\" for our files. Keeping files organized, particularly for programming projects, is very important for scalability, and reproducability.</p> <p>Scientific Programming</p> <p>File cleanliness and organization is particularly important in scientific programming. This is because we often need to share our code with others, or come back to it after a long period of time. If our code is not organized, it can be very difficult for us - or anyone else! - to understand what is going on.</p>"},{"location":"learning_paths/Step_01/#what-is-a-file-and-file-extension","title":"What is a \"File\" and \"File Extension\"?","text":"<p>A file is a collection of data that is stored on your computer. Files can contain text, images, videos, or any other type of data. Files are stored in directories, and each file has a name that is unique within the directory.</p> <p>Files can be combined to create applications - think \"apps\". Applications are made up of many files that work together to provide specific functions. Examples of applications include web browsers, word processors, and games.</p> <p>A file extension is a series of characters that are added to the end of a file name to indicate what type of file it is. For example, a file with the extension \" <code>.txt</code>\" is a text file, while a file with the extension \"<code>.jpg</code>\" is an image file. File extensions are important because they tell the computer what type of data is in the file, and how to open it. </p> <p>I'm a huge fan of the <code>.md</code> file extension, which is a markdown file - it's a great, non-proprietary way to write and format text.</p> Markdown <p>Markdown is a lightweight markup language that you can use to format text. It is often used to write documentation, README files, and other types of text that need to be formatted. Markdown is easy to learn, and you can use it to create headings, lists, links, and other types of formatting. </p> <p>You can learn more about Markdown here.</p>"},{"location":"learning_paths/Step_01/#tools-well-be-using-throughout-this-learning-path","title":"Tools we'll be using throughout this learning path:","text":""},{"location":"learning_paths/Step_01/#google-colab","title":"Google Colab","text":"<p>Google Colab, or \"Colab Notebooks\" is a completely free tool that allows you to write and execute Python code in your web browser. It is a great tool for learning Python, as it allows you to write and run code without having to install anything on your computer. It is also a great tool for sharing code with others, as you can easily share a link to your notebook with others, and they can view and run your code without having to install anything on their computer.</p> <p>For a lot of the work we will be doing in our class, we will be using Google Colab. You can access Google Colab here, and assignments will often be shared with you as a link to a Google Colab notebook.</p>"},{"location":"learning_paths/Step_01/#vscode","title":"VSCode","text":"<p>Visual Studio Code (very often referred to as \"VSCode\") is a free code editor that is available for Windows, Mac, and Linux. It built and supported by Microsoft, and is a very powerful tool that can be customized to fit your needs. For the purposes of our class, we will most often be using Google Colab, but having VSCode installed on your machine will enable you to work on your code locally - this will be an optional path that you can take if you want to work on your code outside of Google Colab!</p> <p>You can download VSCode here.</p> <p>Note: You do not want to download Visual Studio, which is a different product. Make sure you are downloading Visual Studio Code (VSCode).</p>"},{"location":"learning_paths/Step_01/#github","title":"GitHub","text":"<p>GitHub is a website that allows you to store and share your code with others. It is a great tool for collaborating on code with others, and for sharing your code with the world.</p> <p>The primary reason I'd like us to have access to GitHub - in the long term - is the integration of VSCode with their AI tool, GitHub Copilot. In my testing, I've found that GitHub Copilot is one of the best available coding AI tools out there - and as students at UC (or any other University), you have access to it for free!</p>"},{"location":"learning_paths/Step_01/#exercises","title":"Exercises","text":"<ol> <li>Install VSCode on your computer (follow the link above in the <code>VSCode</code> section). We wont use this immediately, but we'll use it later!</li> <li>Open and walk through your first Google Colab Notebook to get a taste of programming in Python!.<ul> <li>In this excercise you will:<ul> <li>learn how to run code in a Google Colab Notebook.</li> <li>run your first \"Hello World\" program using a Colab Cell.</li> <li>learn about comments and why they're important, especially for scientific programming.</li> <li>be introduced to the concept of \"variables\" in programming.</li> </ul> </li> </ul> </li> </ol>"},{"location":"learning_paths/Step_02/","title":"Step 2","text":"<p>In step 2, we have two objectives:</p> <ol> <li>Get familiar with the VSCode interface, including the file explorer, terminal, and editor.</li> <li>Introduce ourselves to the building blocks of Python, including environments, libraries, syntax, and programming terminology.</li> </ol>"},{"location":"learning_paths/Step_02/#exercise-intro-to-vscode","title":"Exercise: Intro to VSCode","text":""},{"location":"learning_paths/Step_02/#visually-navigating-vscode","title":"Visually navigating VSCode","text":"<p>Visual Studio Code (VSCode) is a powerful code editor. If you didn't install it yet, go back to <code>Step 1</code> and follow the instructions.</p> <p>Here's a quick overview of its main components:</p> <ul> <li>Activity Bar: Located on the far left, it lets you switch between views and gives you access to different features.</li> <li>Side Bar: Shows different views like the Explorer, Search, Source Control, etc.</li> <li>Editor: The main area where you edit your files.</li> <li>Panel: Located at the bottom, it shows output, terminal, problems, etc.</li> <li>Status Bar: Displays information about the opened project and the current file.</li> </ul>"},{"location":"learning_paths/Step_02/#open-up-a-new-terminal","title":"Open up a new terminal","text":"<ol> <li> <p>Open the Terminal: </p> <ul> <li>Go to the top menu and select <code>Terminal &gt; New Terminal</code>.</li> <li>In the future, you can use the shortcut that is shown near <code>New Terminal</code>. Shortcuts are great!</li> <li>If you toggle open the pannel (using the pannel button in the top right corner of the terminal), you can also create a new terminal from there by pushing the big <code>+</code> button.</li> </ul> </li> <li> <p>Print your current directory path: Use the <code>pwd</code> command to print the path of your current directory:      <pre><code>pwd\n</code></pre> This will show you the path to your current directory, remember this is like the \"address\" of where you are in your computer. When we create files and folders (new directories!) we will be doing so in this location.</p> </li> </ol> <p>Code Blocks</p> <p>Above, you'll notice a gray box with text inside. This is a code block. You can copy the text inside the block with the \"copy\" button on the far right of the box, and paste it into your terminal to run the command.</p> <ol> <li> <p>Get to know your directory structure in the terminal: Use the <code>ls</code> command to list the contents of your current directory:      <pre><code>ls\n</code></pre></p> </li> <li> <p>Create a new directory called <code>a_folder_is_a_directory</code>: Use the <code>mkdir</code> command:      <pre><code>mkdir a_folder_is_a_directory\n</code></pre></p> <p><code>mkdir</code> stands for \"make directory\" and is used to create new directories (or, \"folders\").</p> </li> <li> <p>Create a new directory called <code>a_folder_is_a_directory/this_is_a_directory_within_a_directory</code>: Use the <code>mkdir</code> command again:      <pre><code>mkdir a_folder_is_a_directory/this_is_a_directory_within_a_directory\n</code></pre></p> <p>This creates a directory within a directory, also known as a subdirectory.</p> </li> <li> <p>Create a file called <code>test_1.md</code> in the <code>this_is_a_directory_within_a_directory</code> directory: Use the <code>New-Item</code> command:      <pre><code>New-Item -Name \"test_1.md\" -ItemType File\n</code></pre></p> <p><code>New-Item</code> is a command that tells the computer we want to make a new file. <code>-Name</code> and <code>-ItemType</code> are both parameters that you need to feed the <code>New-Item</code> command in order for it to work. In this case, we feed each parameter an \"argument\" in the space after it is presented, where \"test_1.md\" is the argument for the parameter <code>-Name</code> that specifies the file name.</p> <p>By default, this will create the file in your current directory. You can add an input parameter called \"<code>-Path</code>\" if you want to create a file in a particular location, like this: -Path <code>\"C:\\Users\\wirthtd\\downloads\"</code> </p> </li> </ol>"},{"location":"learning_paths/Step_02/#navigate-to-the-a_folder_is_a_directory-directory-in-the-vscode-file-explorer","title":"Navigate to the <code>a_folder_is_a_directory</code> directory in the VSCode file explorer","text":"<ol> <li>Open the Explorer:</li> </ol> <p>You should be able to see the directory/folder structure in the file explorer on the left side of the VSCode window. If you can't see it:</p> <ul> <li> <p>Click on the Explorer icon in the Activity Bar (double-page icon in the top left of VSCode) or use the shortcut: <code>Ctrl + Shift + E</code> (<code>Cmd + Shift + E</code> on Mac).</p> </li> <li> <p>Navigate to the directory:</p> <ul> <li>Click on the <code>a_folder_is_a_directory</code> folder to expand it.</li> <li>Then, click on the <code>this_is_a_directory_within_a_directory</code>. <p>Note: because there is only one directory within <code>a_folder_is_a_directory</code>, the two directories might appear stacked on a single line. If we added more content to <code>a_folder_is_a_directory</code>, it would open up in a way that appears more \"normal\". There are settings to change this behavior, but we won't worry about that right now.</p> </li> </ul> </li> </ul>"},{"location":"learning_paths/Step_02/#open-the-test_1md-file-in-the-vscode-editor","title":"Open the <code>test_1.md</code> file in the VSCode editor","text":"<ol> <li>Open the file:</li> <li>Double-click on <code>test_1.md</code> to open it in the editor.</li> <li>This is a markdown (<code>.md</code>) file, you can learn more about markdown here</li> </ol>"},{"location":"learning_paths/Step_02/#intro-to-python","title":"Intro to Python","text":"<p>Python is a high-level, interpreted programming language known for its readability and versatility. It's widely used in various fields, including web development, data analysis, artificial intelligence, and scientific computing.</p>"},{"location":"learning_paths/Step_02/#python-environment","title":"Python Environment","text":"<p>A Python environment is a setup that includes the Python interpreter, libraries, and other tools necessary to run Python scripts. Understanding and setting up a Python environment is crucial for ensuring that your Python projects run smoothly and are well-organized.</p>"},{"location":"learning_paths/Step_02/#components-of-a-python-environment","title":"Components of a Python Environment","text":"<ol> <li>Python Interpreter: The core component that reads and executes Python code, telling your hardware what to do.</li> <li>Libraries and Packages: Collections of pre-written code that perform common tasks, such as NumPy for numerical operations and Pandas for data manipulation. Think of these as special-purpose tools that you can use to build your projects. We'll go over some examples of libraries further down.</li> <li>Virtual Environment: A self-contained directory that includes a specific version of Python and a set of libraries. This helps isolate projects from each other, preventing conflicts between dependencies.</li> </ol>"},{"location":"learning_paths/Step_02/#benefits-of-using-a-python-environment","title":"Benefits of Using a Python Environment","text":"<ul> <li>Isolation: Each project can have its own dependencies, avoiding conflicts with other projects.</li> <li>Reproducibility: Ensures that the code runs consistently across different machines.</li> <li>Organization: Keeps projects clean and manageable.</li> </ul> <p>Using Python Environments on a project-to-project basis is a good practice to get into early on, and it is a critical concept in scientific software development!</p> <p>Reflect: Why might this be important in scientific software development?</p>"},{"location":"learning_paths/Step_02/#python-libraries","title":"Python \"Libraries\"","text":"<p>Python has a rich ecosystem of \"libraries\" that extend its capabilities - this is one of the greatest advantages of Python, and is a result of it being the largest free and open source programming language in the world. </p> <p>Remember, a library is a collection of pre-written code that performs common tasks. Libraries are a critical component of your Python environment.</p> <p>Here are some Python Libraries that are particularly common in scientific computing:</p>"},{"location":"learning_paths/Step_02/#numpy","title":"NumPy","text":"<p>NumPy is a library for numerical computing in Python. It provides support for arrays, matrices, and many mathematical functions.</p>"},{"location":"learning_paths/Step_02/#pandas","title":"Pandas","text":"<p>Pandas is a library for data manipulation and analysis. It provides data structures like DataFrames, which are essential for handling structured data.</p>"},{"location":"learning_paths/Step_02/#matplotlib","title":"Matplotlib","text":"<p>Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python.</p>"},{"location":"learning_paths/Step_02/#some-more-basic-programming-terminology","title":"Some more basic programming terminology","text":""},{"location":"learning_paths/Step_02/#syntax","title":"Syntax","text":"<p>Syntax refers to the set of rules that define the structure of a programming language - in other words, syntax tells you the necessary rules for writing code. </p> <p>In Python, syntax is designed to be readable and straightforward.</p>"},{"location":"learning_paths/Step_02/#variables","title":"Variables","text":"<p>Variables are used to store data that can be referenced and manipulated in a program. You got a taste of variables in Exercise 1.</p> <p>In Python, you can create a variable by assigning a value to it:</p> <pre><code>x = 10\n</code></pre>"},{"location":"learning_paths/Step_02/#exercise","title":"Exercise","text":"<p>Go to this Google Colab Notebook and work through importing a Python library, and exploring some Python syntax &amp; variables.</p>"},{"location":"learning_paths/Step_02/#bonus","title":"Bonus","text":"Setting Up a Python Environment <p>This is a bit advanced - we'll do this together eventually, but if you want to play around with environment set up you should go ahead!!</p> <ol> <li> <p>Install Python: Download and install Python from the official website.</p> </li> <li> <p>Create a Virtual Environment:</p> <ul> <li>Open your terminal or command prompt.</li> <li>Navigate to your project directory.</li> <li>Run <code>python -m venv env</code> (where <code>env</code> is the name of your environment).</li> </ul> </li> <li> <p>Activate the Virtual Environment:</p> <ul> <li>On Windows: <code>.\\env\\Scripts\\activate</code></li> <li>On macOS/Linux: <code>source env/bin/activate</code></li> </ul> </li> <li> <p>Install Libraries: Use <code>pip install &lt;library_name&gt;</code> to add necessary libraries.</p> </li> </ol> <p>Example</p> <pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment\nsource myenv/bin/activate  # On macOS/Linux\n.\\myenv\\Scripts\\activate  # On Windows\n\n# Install a library\npip install numpy\n</code></pre>"},{"location":"learning_paths/Step_03/","title":"Step 3","text":"<p>In Step 3, first, we will install <code>Anaconda</code> as well as a new version of <code>Python</code> onto each of your machines. </p> <p>After that, we will learn about different data types in Python and how to work with variables. Data types and variables are the building blocks of any programming language, and understanding them is essential for writing code!</p>"},{"location":"learning_paths/Step_03/#installing-anaconda-and-python","title":"Installing <code>Anaconda</code> and <code>Python</code>","text":"<p>You might be wondering, what's <code>Anaconda</code>? <code>Anaconda</code> is a free and open-source distribution of Python (and R) programming languages for scientific computing, that aims to simplify environment creation and management. Look back to Step 2 if you need a refresher on <code>Python Environments</code>.</p>"},{"location":"learning_paths/Step_03/#ai-exercise-install-anaconda-and-python","title":"AI Exercise: Install <code>Anaconda</code> and <code>Python</code>","text":"<p>I'd like for you to explore using an AI Chatbot to help you do technical IT tasks, like installing software.</p> <p>Take the following prompt to either Microsoft Copilot or ChatGPT - if you go to Copilot, make sure to use your student credentials (if you have them) to login and get access to the best version of Copilot. Note: This best version doesn't maintain a chat history, so if you want to keep a record of your conversation, you should take notes.</p> <p>Here's the prompt (make sure you tell it if you have a Windows machine or a Mac):</p> <pre><code>I'm a psychology student who is new to VSCode and Python. \nI need to install Anaconda and Python, \nand I want to do it through the VSCode terminal. \nIf that doesn't work, we can try other methods. \n\nI have a _____ machine. Can you help me with this?\n</code></pre>"},{"location":"learning_paths/Step_03/#exercise","title":"Exercise:","text":"<p>Work with the Chatbot to get the software installed on your machine. If you're doing this in class and you run into issues, let your professor know!</p> <p>Once you've installed <code>Anaconda</code> and <code>Python</code>, you're ready to move on to the next section!</p>"},{"location":"learning_paths/Step_03/#introduction-to-python-data-types","title":"Introduction to Python Data Types","text":"<p>Python has several built-in data types that are used to store different kinds of information. Here are some of the most common data types:</p> <ul> <li>Integers: Whole numbers, e.g., <code>1</code>, <code>42</code>, <code>-7</code></li> <li>Floats: Decimal numbers, e.g., <code>3.14</code>, <code>0.001</code>, <code>-2.5</code></li> <li>Strings: Text, e.g., <code>\"hello\"</code>, <code>\"Python\"</code>, <code>\"123\"</code></li> <li>Booleans: True or False values, e.g., <code>True</code>, <code>False</code></li> </ul>"},{"location":"learning_paths/Step_03/#examples-of-data-types","title":"Examples of Data Types","text":"<pre><code># Integer\na = 10\n\n# Float\nb = 3.14\n\n# String\nc = \"Hello, Python!\"\n\n# Boolean\nd = True\n</code></pre>"},{"location":"learning_paths/Step_03/#variables-in-python","title":"Variables in Python","text":"<p>Variables are used to store data that can be referenced and manipulated in a program. They act as containers for values.</p>"},{"location":"learning_paths/Step_03/#variable-naming-conventions","title":"Variable Naming Conventions","text":"<ul> <li>Variable names must start with a letter or an underscore (<code>_</code>), such as <code>_myVar</code> or <code>myVar</code>.</li> <li>The rest of the name can contain letters, numbers, or underscores, examples: <code>myVar</code>, <code>my_var</code>, <code>myVar123</code>.</li> <li>Variable names are case-sensitive (e.g., <code>myVar</code> and <code>myvar</code> are different).</li> </ul> <p>Consistency is Key</p> <p>When you start a project, try to pick a variable naming style and stick to that style throughout your code. This will make your code more readable and maintainable. There are a few styles commonly used in Python:</p> <ul> <li>Snake Case: <code>my_variable_name</code> (recommended for Python, where all letters are lower case and spaces are replaced with underscores)</li> <li>Camel Case: <code>myVariableName</code> (the first word is lowercase, and the subsequent words are capitalized, no spaces. This is commonly used in JavaScript and C#)</li> <li>Pascal Case: <code>MyVariableName</code> (the first letter of each word is capitalized, no spaces. This is commonly used in C# and Java)</li> </ul> <p>If you choose to use something other than snake case for python, that's fine! But remember to be consistent.</p>"},{"location":"learning_paths/Step_03/#assigning-values-to-variables","title":"Assigning Values to Variables","text":"<p>You can assign values to variables using the assignment operator (<code>=</code>).</p>"},{"location":"learning_paths/Step_03/#examples-of-variable-assignments","title":"Examples of Variable Assignments","text":"<pre><code># Assigning values to variables\nx = 5\ny = 10.5\nname = \"Alice\"\nis_student = True\n</code></pre> <p>Variable Reassignment</p> <p>You can reassign a variable to a different value at any time. The new value can be of the same or a different data type - be careful when reassigning variables to avoid confusion!</p>"},{"location":"learning_paths/Step_03/#type-checking","title":"Type Checking","text":"<p>You can check the data type of a variable using the <code>type()</code> function.</p> <pre><code># Check the data type of a variable\nx = 5\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre> <p>If you run the code snippet above, you will see that the output is <code>&lt;class 'int'&gt;</code>, indicating that the variable <code>x</code> is an integer.</p> <p>Note: \"class\" here is a Python term that refers to the data type of the variable. Data classes are important, and we will learn more about them in the future.</p> <p>Here are the different outputs for the different types we've covered in today's Path Step:</p> <ul> <li><code>int</code> for integers</li> <li><code>float</code> for floats</li> <li><code>str</code> for strings</li> <li><code>bool</code> for booleans</li> </ul> <p>Try it out!</p> <p>Open up a new Collab Notebook and create a variable assigment. Then, in a subsequent cell, use the <code>type()</code> function to check the data type of the variable. Did it work the way you thought?</p>"},{"location":"learning_paths/Step_03/#reflect","title":"Reflect","text":"<p>Why might there be different data types in programs? (Answer below)</p> Answer <p>There are a lot of reasons! But here are a few that I can come up with from the perspective of a scientific programmer:</p> <ol> <li>As scientists, we work with lots of different types of data - often at the same time. We might want to construct pipelines specifically designed for a particular data type; later on in our class we'll create functions. Some functions can be are type-specific, meaning they will only work if we supply that function with the correct data type. This is a good thing, because it means we can be sure that our functions are doing what we expect them to do.</li> <li>Different data types have different properties. For example, you can't add a string to an integer in the same way you can add two integers. This can be useful for controlling the flow of your program and ensuring that you're not doing something you didn't intend to do.</li> <li>Different properties allow you to control the flow of your program in different and nuanced ways. For example, you can use booleans to control whether or not a particular block of code is executed. This can be useful for debugging (fixing your code), or for ensuring that your code is running as expected - we will talk more about program flow in Step 5!</li> </ol>"},{"location":"learning_paths/Step_03/#review","title":"Review","text":"<p>In this step, we learned about different data types in Python and how to work with variables. Understanding data types and variables is essential for writing code in Python. Here's a quick recap:</p> <ul> <li>Data Types: Python has several built-in data types, including integers, floats, strings, and booleans.</li> <li>Variables: Variables are used to store data in a program. They act as containers for values.</li> <li>Variable Naming Conventions: Follow naming conventions to make your code more readable and maintainable.</li> <li>Type Checking: You can check the data type of a variable using the <code>type()</code> function.</li> </ul>"},{"location":"learning_paths/Step_03/#colab-exercise","title":"Colab Exercise","text":"<p>Now that you've learned about data types and variables, it's time to practice! </p> <p>Open up this Colab Notebook and work through the exercises to reinforce your understanding.</p>"},{"location":"learning_paths/Step_04/","title":"Step 4","text":"<p>In Step 4, we will dive into operators and expressions in Python. Operators allow us to perform various operations on data, and expressions combine variables and operators to produce new values. Understanding these concepts is crucial for writing effective and efficient code.</p>"},{"location":"learning_paths/Step_04/#operators-in-python","title":"Operators in Python","text":"<p>Python provides several types of operators that you can use to perform different operations on data. Here are the main types of operators:</p>"},{"location":"learning_paths/Step_04/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are used to perform mathematical operations.</p> <ul> <li>Addition (<code>+</code>): Adds two numbers.</li> <li>Subtraction (<code>-</code>): Subtracts the second number from the first.</li> <li>Multiplication (<code>*</code>): Multiplies two numbers.</li> <li>Division (<code>/</code>): Divides the first number by the second.</li> <li>Modulus (<code>%</code>): Returns the remainder of the division.</li> <li>Exponentiation (<code>**</code>): Raises the first number to the power of the second.</li> </ul>"},{"location":"learning_paths/Step_04/#examples-of-arithmetic-operators","title":"Examples of Arithmetic Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> What's an <code>.ipynb</code>? <p>An <code>.ipynb</code> file is a \"Jupyter Notebook\" file that allows you to run Python code in a cell-by-cell format. You've already been working with these in Google Colab! You can create a new <code>.ipynb</code> file in VSCode by clicking on the <code>New File</code> button in the file explorer and selecting <code>Python 3</code> as the kernel. If you want to try this out, go for it! Ask a chatbot or your professor if you get confused.</p> <pre><code># Addition\nresult = 5 + 3\nprint(\"5 + 3 =\", result)\n\n# Subtraction\nresult = 10 - 4\nprint(\"10 - 4 =\", result)\n\n# Multiplication\nresult = 7 * 2\nprint(\"7 * 2 =\", result)\n\n# Division\nresult = 15 / 3\nprint(\"15 / 3 =\", result)\n\n# Modulus\nresult = 10 % 3\nprint(\"10 % 3 =\", result)\n\n# Exponentiation\nresult = 2 ** 3\nprint(\"2 ** 3 =\", result)\n</code></pre>"},{"location":"learning_paths/Step_04/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values and return a boolean result (<code>True</code> or <code>False</code>).</p> <ul> <li>Equal to (<code>==</code>): Checks if two values are equal.</li> <li>Not equal to (<code>!=</code>): Checks if two values are not equal.</li> <li>Greater than (<code>&gt;</code>): Checks if the first value is greater than the second.</li> <li>Less than (<code>&lt;</code>): Checks if the first value is less than the second.</li> <li>Greater than or equal to (<code>&gt;=</code>): Checks if the first value is greater than or equal to the second.</li> <li>Less than or equal to (<code>&lt;=</code>): Checks if the first value is less than or equal to the second.</li> </ul>"},{"location":"learning_paths/Step_04/#examples-of-comparison-operators","title":"Examples of Comparison Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># Equal to\nprint(5 == 5)  # True\n\n# Not equal to\nprint(5 != 3)  # True\n\n# Greater than\nprint(7 &gt; 4)  # True\n\n# Less than\nprint(3 &lt; 8)  # True\n\n# Greater than or equal to\nprint(6 &gt;= 6)  # True\n\n# Less than or equal to\nprint(2 &lt;= 5)  # True\n</code></pre>"},{"location":"learning_paths/Step_04/#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to combine conditional statements.</p> <ul> <li>AND (<code>and</code>): Returns <code>True</code> if both statements are true.</li> <li>OR (<code>or</code>): Returns <code>True</code> if at least one statement is true.</li> <li>NOT (<code>not</code>): Reverses the result, returns <code>False</code> if the result is true.</li> </ul>"},{"location":"learning_paths/Step_04/#examples-of-logical-operators","title":"Examples of Logical Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># AND\nprint(True and True)  # True\nprint(True and False)  # False\n\n# OR\nprint(True or False)  # True\nprint(False or False)  # False\n\n# NOT\nprint(not True)  # False\nprint(not False)  # True\n</code></pre>"},{"location":"learning_paths/Step_04/#expressions-in-python","title":"Expressions in Python","text":"<p>Expressions are combinations of variables, operators, and values that produce a result. They are the building blocks of any Python program.</p>"},{"location":"learning_paths/Step_04/#combining-variables-and-operators","title":"Combining Variables and Operators","text":"<p>You can combine variables and operators to create expressions. Here are some examples:</p> <p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># Arithmetic expression\nx = 5\ny = 3\nresult = x + y\nprint(\"x + y =\", result)\n\n# Comparison expression\nis_greater = x &gt; y\nprint(\"x &gt; y:\", is_greater)\n\n# Logical expression\nis_true = (x &gt; y) and (y &gt; 0)\nprint(\"(x &gt; y) and (y &gt; 0):\", is_true)\n</code></pre>"},{"location":"learning_paths/Step_04/#exercise-working-with-operators-and-expressions","title":"Exercise: Working with Operators and Expressions","text":"<p>Now it's time to practice using operators and creating expressions. You can do this your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode (we haven't done this last one yet - if you'd like to try,ask a chatbot or your professor!).</p> <p>Try the following exercises:</p>"},{"location":"learning_paths/Step_04/#exercise-1-arithmetic-operators","title":"Exercise 1: Arithmetic Operators","text":"<p>Write a Python program that performs the following operations and prints the results:</p> <ol> <li>Add two numbers.</li> <li>Subtract one number from another.</li> <li>Multiply two numbers.</li> <li>Divide one number by another.</li> <li>Find the remainder of the division of two numbers.</li> <li>Raise one number to the power of another.</li> </ol>"},{"location":"learning_paths/Step_04/#exercise-2-comparison-operators","title":"Exercise 2: Comparison Operators","text":"<p>Write a Python program that compares two numbers using each of the comparison operators and prints the results.</p>"},{"location":"learning_paths/Step_04/#exercise-3-logical-operators","title":"Exercise 3: Logical Operators","text":"<p>Write a Python program that uses logical operators to combine multiple conditions and prints the results.</p>"},{"location":"learning_paths/Step_04/#exercise-4-creating-expressions","title":"Exercise 4: Creating Expressions","text":"<p>Write a Python program that combines variables and operators to create expressions. Use arithmetic, comparison, and logical operators in your expressions.</p>"},{"location":"learning_paths/Step_04/#reflect","title":"Reflect","text":"<p>Think about the different types of operators and expressions you've learned. How might you use them in your own programs? What are some real-world scenarios where these concepts might be useful?</p>"},{"location":"learning_paths/Step_04/#review","title":"Review","text":"<p>In this step, we learned about different types of operators and expressions in Python. Here's a quick recap:</p> <ul> <li>Arithmetic Operators: Used to perform mathematical operations.</li> <li>Comparison Operators: Used to compare two values and return a boolean result.</li> <li>Logical Operators: Used to combine conditional statements.</li> <li>Expressions: Combinations of variables, operators, and values that produce a result.</li> </ul> <p>Understanding these concepts is essential for writing effective and efficient code in Python.</p>"},{"location":"licenses/","title":"Project Licenses","text":""},{"location":"licenses/#course-content","title":"Course Content","text":"<p>The course content for this project is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You can find the full text of the license here.</p> <p>This means that you are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format, as long as you give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.<ul> <li>Credit can be made to <code>PSYC 3010 - Programming for Behavioral Scientists by Trenton D Wirth</code></li> </ul> </li> <li>Adapt \u2014 remix, transform, and build upon the material, as long as you distribute your contributions under the same license as the original.</li> <li>NonCommercial \u2014 you may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 if you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> </ul> <p>Please refer to the full text of the license for more details on your rights and responsibilities.</p>"},{"location":"licenses/#software","title":"Software","text":"<p>The code for this project is licensed under GPLv3 (GNU General Public License version 3). You can find the full text of the license here.</p>"}]}