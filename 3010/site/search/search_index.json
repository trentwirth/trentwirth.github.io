{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PSYC 3010 - Programming for Behavioral Scientists","text":"<p>This webpage will be used as the virtual textbook and our guide through learning Python.</p> <p>This is publicly facing, so that anyone can access it!</p> <p>To get started learning, click on the <code>Learning Paths</code> tab above. You probably want to start with <code>Step 01</code></p>"},{"location":"about/","title":"About","text":"<p>This course is designed and created by Dr. Trenton Wirth, Psychology Professor at the University of Cincinnati.</p> <p>It is made with the intention of introducing anyone to the basics of programming, with a focus on Python. The course is designed to be accessible to anyone, regardless of their prior experience with programming.</p> <p>The code for this project follows the GNU General Public License v3.0, and the course content follows the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You can find details of these licenses in the <code>Licenses</code> tab of this website.</p> <p>Trent is not a computer scientist, and doesn't claim to be an expert on programming. However, his journey of learning programming as a behavioral scientist himself equips him with the empathy and patience to develop a course targetting non-technical students who want to learn how to engage in scientific programming.</p> <p>You can reach Trent at his University email: <code>wirthtd AT ucmail DOT uc DOT edu</code></p>"},{"location":"about/#use-of-generative-ai-llms","title":"Use of Generative AI (LLMs)","text":"<p>The initial creation of this course within a single semester would likely not have been possible without the use of generative AI. </p> <p>I (Trent) used AI extensively to draft aspects of the course, particularly the Learning Paths. Here is how I used AI in the creation of this course:</p> <ol> <li>I knew the general goals of the course, and I interacted with a mixture of <code>Copilot</code> and <code>GPT4</code> (original, not <code>o</code>) to build up the first few learning path steps in a way that I felt satisfied the goals of my class. </li> <li>These initial steps were then edited and tested by me before I presented them to students. </li> <li>With the first few steps of the path complete, for every subsequent step I used all previous steps as a part of the prompt for creating the next one - I believe this helped to maintain a relatively consistent style and pacing throughout. <p>Rather than copy paste each of the files, I would attach a <code>.md</code> file that contained \"all of the steps\" up to that point - this was a part of my prompt. </p> </li> </ol> <p>People have a lot of feelings about the use of generative AI - I feel that the way I've used it here is reasonable and ethical, this is basically a curated version of the concept of the generative textbook. </p> <p>If you think I've done something terrible, please drop me a line - I'd be happy to hear from you. : ) </p>"},{"location":"assistance/","title":"Get Assistance","text":"<p>If you're taking this course through University of Cincinnati, please follow the intructions on the Cavnas page.</p> <p>If you're not a part of the class, you can reach Trent at his University email: <code>wirthtd AT ucmail DOT uc DOT edu</code></p>"},{"location":"assistance/copilot/","title":"Setting up GitHub Co-Pilot for Students","text":"<p>To set up GitHub Co-Pilot, follow these steps:</p> <ol> <li>If you haven't done so already, create a GitHub account: Visit the GitHub website github.com.</li> <li>Follow the instructions on this GitHub page for applying to GitHub Global Campus as a student. This will give you access to GitHub Co-Pilot and other benefits.</li> </ol>"},{"location":"assistance/copilot/#using-github-co-pilot-in-vs-code","title":"Using GitHub Co-Pilot in VS Code","text":"<ol> <li>Install the GitHub Co-Pilot extension: Open VS Code and go to the Extensions tab. Search for \"GitHub Co-Pilot\" and click on the \"Install\" button to install the extension.</li> <li>Sign in to your GitHub account: Click on the \"Sign in to GitHub\" button in the bottom left corner of the VS Code window and follow the instructions to sign in to your GitHub account.</li> <li>Start using GitHub Co-Pilot: Open a new file in VS Code and start typing. GitHub Co-Pilot will automatically suggest code snippets based on the context of your code.</li> <li>Chat with GitHub Co-Pilot: You can also chat with GitHub Co-Pilot by clicking the two speech bubbles icon on the left side of the VS Code window. This will open a chat window where you can ask questions and get answers from GitHub Co-Pilot. This can be useful to have Co-Pilot explain your code line by line, or answer general questions.</li> </ol> <p>Hotkeys</p> <p>You can also use the keyboard shortcut <code>Ctrl+I</code> on Windows or <code>Command+I</code> on Mac to in-line chat with Github Co-Pilot and get immediate suggestions for your code.</p>"},{"location":"coding_assignments/","title":"Welcome to Coding Assignments!","text":"<p>These assignments are designed to test your understanding of the concepts covered in the learning paths. You will be asked to write Python code to solve a series of problems.</p> <p>Check out the pages on the left hand side, each coding assignment will tell you what Step in the Learning Path you should have completed before attempting the assignment.</p>"},{"location":"coding_assignments/coding_assignment_01/","title":"Coding Assignment 1","text":"<p>Note: You should only begin this assignment when you have completed Step 4 of the Learning Path.</p> <p>This assignment will test your understanding of the concepts covered up to Step 4 of the Learning Path. You will be asked to write Python code to solve a series of problems. </p> <p>Because what we've learned so far is limited, I will ask you to write a block of code that will end with a certain result/functionality. As a part of your assignment, you might need to explain how the resulting functionality is useful.</p>"},{"location":"coding_assignments/coding_assignment_01/#problem-1-odd-or-even","title":"Problem 1: Odd or Even?","text":"<p>Write a Python program that takes in an <code>input_integer</code> and then prints some information that would tell us if that number is odd or even.</p> <p>The code block should look something like this:</p> <pre><code># We should be able to enter *any* integer here \n# and get the correct answer\ninput_integer =  \n\n# ... your code here ...\n\nprint(output_information) \n# This can be a string, a boolean, or a number\n# it should tell us if the input_integer is odd or even. \n# Explain why this output is useful in a comment.\n</code></pre>"},{"location":"coding_assignments/coding_assignment_01/#problem-2-temperature-conversion","title":"Problem 2: Temperature Conversion","text":"<p>Write a Python program that takes in a temperature in Celsius and converts it to Fahrenheit. </p> <p>Print the result.</p> <p>The code block should look something like this:</p> <pre><code># We should be able to enter any temperature \n# (likely a float, not an integer) in Celsius here \n# and print the correct answer in Fahrenheit\ncelsius_temperature =  \n\n# ... your code here ...\n\nprint(fahrenheit_temperature) \n# This should print the temperature in Fahrenheit.\n</code></pre>"},{"location":"coding_assignments/coding_assignment_01/#problem-3-string-how-many-characters","title":"Problem 3: String + How Many Characters?","text":"<p>Write a Python program that takes an <code>input_string</code> and prints a statement that includes the string itself and its length. Use the length function (<code>len()</code>) function to determine the length of the string.</p> <p>If our string was \"Bearcat\", the printed result should be something like: </p> <p>\"The string 'Bearcat' has 7 characters.\"</p> <p>To generate a more complex print statement, you can use the <code>+</code> operator to concatenate strings, or you can explore the f-string print method.</p> <p>f-strings are really cool, and is super useful!</p> <p>The code block should look something like this:</p> <pre><code># We should be able to enter any string here \n# and get the correct answer\ninput_string =  \n\n# ... your code here ...\n\n# Print the string and its length in a descriptive statement\nprint(... your code here ...)\n# This should print the input string and its length.\n# Explain why this output is useful in a comment.\n</code></pre> <p>If you are taking this class for credit at UC...</p> <p>Save all of your problems as an <code>.ipynb</code> file and submit it to the appropriate assignment on Canvas.</p>"},{"location":"coding_assignments/coding_assignment_02/","title":"Coding Assignment 2","text":"<p>Note: You should only begin this assignment when you have completed Step 8 of the Learning Path.</p> <p>This assignment will test your understanding of the concepts covered up to Step 8 of the Learning Path. You will be asked to write Python code to solve a series of problems.</p> <p>I will ask you to write blocks of code that will end with certain results/functionality. As a part of your assignment, you might need to explain how the resulting functionality is useful.</p>"},{"location":"coding_assignments/coding_assignment_02/#problem-1-conditionals-positive-negative-or-zero","title":"Problem 1: Conditionals - positive, negative, or zero?","text":"<p>Write a Python program that checks if a number is positive, negative, or zero and prints the result using f-strings.</p> <p>The code block should look something like this (you can copy and paste this into your Python notebook to work off of it, that's true for all the problems):</p> <pre><code># We should be able to enter any number here\nnumber = \n\n# ... your code here ...\n\nprint( ... your code here ... ) \n# This should print whether the number is positive, negative, or zero.\n</code></pre> <p>The print statement should be informative, and explain why the output itself is useful.</p>"},{"location":"coding_assignments/coding_assignment_02/#problem-2-divisible-by-2-or-3","title":"Problem 2: Divisible by 2 or 3?","text":"<p>Write a Python program that loops through numbers 1 to 21 and whether each number is divisble by 2 or 3. You should use print statements within your loop to print the result for each number. Use a function (or two) to check if a number is divisible by 2 or 3. The code doesn't require an explanatory comment.</p> <p>You may work off the following code block:</p> <pre><code>def divisibility_check(number):\n    # ... your code here ...\n    return result\n\n# Loop through numbers 1 to 21, use the function in the loop.\nfor number in range(_, _): # Replace the underscores with the correct values that will make the range function work as we want it to.\n\n    # ... your code here ...\n</code></pre>"},{"location":"coding_assignments/coding_assignment_02/#problem-3-filtering-students-by-grades","title":"Problem 3: Filtering Students by Grades","text":"<p>Write a Python program that checks through two lists: one with letter grades for students and another with the students' initials. Assume that the position of each student's initials is paired with the letter grade of the same position.</p> <p>The task is to print out all students who got an A or a B using a combination of loops, conditionals, and a function (include appropriate type hints for your function).</p> <p>I want you to work off of the following code block:</p> <pre><code># Example lists\ngrades = ['A', 'C', 'B', 'D', 'A', 'F']\ninitials = ['ABB', 'CDT', 'EFJ', 'GHR', 'IJK', 'LWN']\n\ndef filter_students_by_grade(grades, initials): # be sure to add type hints\n    # ... your code here ...\n    return # ... your code here ...\n\n# Call the function and print the result\nresult = filter_students_by_grade(_, _) # Replace the underscores with the variable names\nprint(f\"\") # Add a descriptive print statement here using f-strings\n# Explain why this output is useful in a comment.\n</code></pre> <p>If you are taking this class for credit at UC...</p> <p>Save all of your problems as an <code>.ipynb</code> file and submit it to the appropriate assignment on Canvas.</p>"},{"location":"coding_assignments/coding_assignment_03/","title":"Coding Assignment 3","text":"<p>Note: Ensure you have thoroughly understood the concepts related to Python classes, instance methods, and class interaction as covered in Steps 9-12 of the Learning Path before attempting this assignment.</p> <p>This assignment is designed to test your ability to debug complex class structures, create classes with specific behaviors and attributes, and develop interactions between multiple classes.</p>"},{"location":"coding_assignments/coding_assignment_03/#problem-1-debugging-a-class-implementation","title":"Problem 1: Debugging a Class Implementation","text":"<p>Below is a Python class called <code>Plant</code> that allows you to water, prune and display information about an instanced plant. </p> <p>At the end of the code block is an example of what the code should look like... but something isn't right! </p> <p>Hint: There are 6 errors in the code block</p> <pre><code>class Plant:\n    def __init__(self, plant_type: str, height: float):\n        self.plant_type = plant type\n        self.height = height  # Initial height in centimeters\n        self.growth_rate = \"1.0\"  # Initial growth rate, height increase per watering\n\n    def water(self):\n\"\"\"Water the plant to increase its height by the growth rate.\"\"\"\n        self.height + self.growth_rate\n\n    def prune(self):\n\"\"\"Prune the plant to increase its growth rate. No pain, no gain.\"\"\"\n        self.hieght -= 0.5 # Reduce the height by 0.5 cm\n        self.growth_rate = 1.0  # Increase growth rate by 1 cm per watering\n\n    def display_info(self):\n\"\"\"Display the current information about the plant.\"\"\"\n        display_message = f\"Plant Type: {self.plant_type}, Height: {self.height}cm, Growth Rate: {self.growth_rate}cm/watering\"\n        print()\n\n\n# Creating instances of the Plant class\nsunflower = Plant(\"Sunflower\", 30.0)\nrose = Plant(\"Rose\", 20.0)\ncactus = Plant(\"Cactus\", 50.0)\n\n# Interacting with the sunflower plant\nsunflower.water()\nsunflower.prune()\nsunflower.water()\nsunflower.display_info()\n\n# Interacting with the rose plant\nrose.prune()\nrose.display_info()\n\n# Interacting with the cactus plant\ncactus.water()\ncactus.display_info()\n\n# If your code is working correctly, the output should be:\n\n    # Plant Type: Sunflower, Height: 32.5cm, Growth Rate: 2.0cm/watering\n    # Plant Type: Rose, Height: 19.5cm, Growth Rate: 2.0cm/watering\n    # Plant Type: Cactus, Height: 51.0cm, Growth Rate: 1.0cm/watering\n</code></pre>"},{"location":"coding_assignments/coding_assignment_03/#problem-2-create-a-pet-class","title":"Problem 2: Create a \"Pet\" Class","text":"<p>Create a class called <code>Pet</code> with attributes and methods that reflect the behavior and properties of pets. This class should include the following:</p> <ul> <li>Attributes:</li> <li><code>name</code> (str): the name of the pet</li> <li><code>age</code> (int): the age of the pet in years</li> <li><code>species</code> (str): the type of animal</li> <li><code>fur_color</code> (str): the color of the fur</li> <li><code>tail_type</code> (str): the type of tail the pet has</li> <li> <p><code>hungry</code> (bool): whether the pet is hungry, initially set to <code>True</code></p> </li> <li> <p>Methods:</p> </li> <li><code>feed</code>: changes the <code>hungry</code> attribute to <code>False</code> when called and prints \"Pet is now fed!\"</li> <li><code>describe</code>: prints a description of the pet, including all of its attributes. </li> </ul> <p>Create three instances of this class with different attributes and demonstrate the functionality of the methods.</p> <p>Practice for the Written Assessment</p> <p>To practice for the written assessment, before you start your implementation, either on a piece of paper or in your text editor of choice (Google/Word Doc, etc.), outline how this code should work independent of your ability to write and test the code. </p> <p>The written assessment will be just that - your ability to write out how you would solve a problem, not necessarily your ability to write the code itself. You can and should be as detailed as you can manage. </p> <p>If you'd like more practice, try writing out your solution to Problem 3 as well!</p>"},{"location":"coding_assignments/coding_assignment_03/#problem-3-develop-two-interacting-classes","title":"Problem 3: Develop Two Interacting Classes","text":"<p>Create two classes, <code>Author</code> and <code>Book</code>. The <code>Author</code> class should have attributes like name and a list of books, while the <code>Book</code> class should include attributes like title, author (reference to an <code>Author</code> object), and publication year. Demonstrate how these instances interact by querying an author to list all books written by them.</p> <p>Hint: You can look at the \"Family\" and \"Person\" classes from Step 11 to help you create these classes.</p> <p>Ensure all your solutions are tested and functioning as expected. When you are satisfied, you can submit your work as an <code>.ipynb</code> on Canvas.</p>"},{"location":"coding_assignments/coding_assignment_04/","title":"Coding Assignment 4","text":"<p>Note: Ensure you have installed Pygame and have a basic understanding of Python control structures and functions (Steps 1\u20138 of the Learning Path) before attempting this assignment.</p> <p>Most people think games are fun! And a lot of those people have wondered to themselves the following questions:</p> <ul> <li>How do I make a game?</li> <li>Can I make a game?</li> <li>Would I like making a game?</li> </ul> <p>I know early on in my education, I had wondered all of these things. I also know that I was intimidated by the idea of making a game. I thought it would be too hard, and I didn't know where to start. </p> <p>This assignment is designed to introduce you to creating a simple game using a libarary called <code>Pygame</code>. You will set up a game window, handle user input, and implement basic game mechanics.</p> <p>Pygame Installation</p> <p>To install Pygame, run the following command in your terminal or command prompt:</p> <pre><code>pip install pygame\n</code></pre>"},{"location":"coding_assignments/coding_assignment_04/#what-youll-do-in-this-coding-assignment","title":"What you'll do in this coding assignment","text":"<p>You aren't really required to do much work in this assignment, below you will find three \"problems\" that all already have solutions. The blanks are already filled in, all you need to do is go through and remove the comments from the code. </p> <p>So, what this coding assignment is really doing is (1) testing your ability to install a new library (<code>pygame</code>) on your computer and (2) provide you the opportunity to see how a game is structured. </p> <p>If you're taking this for credit</p> <p>Because you're not writing code here, you will not be needing to submit a <code>.py</code> file, instead take three screenshots of the three different resulting programs below, and submitting those screenshots. If you don't know how to take a screenshot, Google it or ask a chatbot :)</p> <p>Alternatively, you can create your own little game! Any game you want or can think of, you can even use a chatbot to help you. If you go this route, you'll submit a <code>.py</code> file of your game following this format: <code>lastname_firstname_coding_assignment_4.py</code>.</p>"},{"location":"coding_assignments/coding_assignment_04/#problem-1-setting-up-the-game-window","title":"Problem 1: Setting Up the Game Window","text":"<p>Write a Python program using Pygame that:</p> <ul> <li>Imports Pygame and initializes it.</li> <li>Creates a window of size 640\u00d7480 pixels.</li> <li>Sets the window title to \"My First Pygame Window\".</li> <li>Fills the window with a background color of your choice.</li> <li>Includes a game loop that keeps the window open until the user closes it.</li> </ul> <p>Tip: Remember to call <code>pygame.quit()</code> after your game loop ends.</p> <pre><code># coding_assignment_05.md \u2013 Problem 1 starter\n\nimport pygame\n\ndef main():\n    # TODO: Initialize Pygame\n    # pygame.init()\n\n    # TODO: Set up the game window\n    # screen = pygame.display.set_mode((640, 480))\n\n    # TODO: Set window title\n    # pygame.display.set_caption(\"My First Pygame Window\")\n\n    # Game loop\n    running = True\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n\n        # TODO: Fill the screen with a color\n        # screen.fill((30, 30, 30))\n\n        pygame.display.flip()\n\n    # TODO: Quit Pygame\n    # pygame.quit()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding_assignments/coding_assignment_04/#whats-going-on-here","title":"What's going on here?","text":"<ul> <li><code>pygame.init()</code> initializes all the Pygame modules.</li> <li><code>pygame.display.set_mode()</code> creates a window with the specified dimensions.</li> <li><code>pygame.display.set_caption()</code> sets the title of the window.</li> <li>The game loop handles events (like closing the window) and updates the display.</li> <li><code>pygame.display.flip()</code> updates the entire screen with the new content.</li> <li><code>pygame.quit()</code> cleans up and closes the Pygame window.</li> </ul>"},{"location":"coding_assignments/coding_assignment_04/#problem-2-player-movement","title":"Problem 2: Player Movement","text":"<p>Extend your program from Problem 1 to:</p> <ol> <li>Draw a player rectangle (50\u00d750 px) at the center of the screen.</li> <li>Move the rectangle using the arrow keys (Up, Down, Left, Right) at a constant speed.</li> <li>Prevent the rectangle from moving off-screen.</li> </ol> <p>Hint: Use <code>pygame.key.get_pressed()</code> to check multiple keys at once.</p> <pre><code># coding_assignment_05.md \u2013 Problem 2 starter\n\nimport pygame\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    pygame.display.set_caption(\"Move the Square\")\n    clock = pygame.time.Clock()\n\n    # Player setup\n    player_size  = 50\n    player_x     = (640 - player_size) // 2\n    player_y     = (480 - player_size) // 2\n    player_speed = 5\n\n    running = True\n    while running:\n        clock.tick(60)  # 60 FPS\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n\n        keys = pygame.key.get_pressed()\n        # TODO: Update player_x and player_y based on keys\n        # if keys[pygame.K_LEFT]:  player_x -= player_speed\n        # if keys[pygame.K_RIGHT]: player_x += player_speed\n        # if keys[pygame.K_UP]:    player_y -= player_speed\n        # if keys[pygame.K_DOWN]:  player_y += player_speed\n\n        # TODO: Keep player within screen bounds\n        # player_x = max(0, min(player_x, 640 - player_size))\n        # player_y = max(0, min(player_y, 480 - player_size))\n\n        screen.fill((0, 0, 0))\n        pygame.draw.rect(screen, (255, 0, 0),\n                         (player_x, player_y, player_size, player_size))\n        pygame.display.flip()\n\n    pygame.quit()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding_assignments/coding_assignment_04/#whats-going-on-here_1","title":"What's going on here?","text":"<ul> <li><code>pygame.time.Clock()</code> is used to control the frame rate, meaning how many times the screen updates per second.</li> <li><code>pygame.draw.rect()</code> (towards the end of the code) draws the player rectangle on the screen.</li> <li>The player rectangle is initialized at the center of the screen (that's what the 640 and 480 are for, the size of the window, which then you divide by 2. Think of the screen like a coordinate grid).</li> <li><code>pygame.key.get_pressed()</code> checks the state of all keys.</li> <li>The player rectangle's position is updated based on the pressed keys.</li> <li>When you press the arrow keys, the rectangle moves in the corresponding direction.</li> <li>The <code>max()</code> and <code>min()</code> functions ensure the rectangle stays within the window bounds.</li> <li>The screen is cleared and redrawn every frame to reflect the updated position of the player rectangle.</li> </ul> Thinking about the game loop<p>An important concept in game development is the game loop and corresponding frame rate. The game loop is a continuous loop that runs until the game is closed. It handles events, updates the game state, and renders the graphics.</p> <p>A lot of the work of programming a game is thinking about how to structure your code within the game loop -- doing things like checking to see if a player is near an object, and if they are, updating the game state to reflect that so they can interact with said object.</p>"},{"location":"coding_assignments/coding_assignment_04/#problem-3-bouncing-ball","title":"Problem 3: Bouncing Ball","text":"<p>Further extend your program to include:</p> <ol> <li>A ball (circle) that starts at a random position and moves at a constant velocity.</li> <li>The ball should bounce off all four edges of the window.</li> <li>Draw the ball and update its position every frame.</li> </ol> <p>Tip: Use <code>pygame.draw.circle()</code> to draw the ball, and reverse the velocity component when it hits an edge.</p> <pre><code># coding_assignment_05.md \u2013 Problem 3 starter\n\nimport pygame\nimport random\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    pygame.display.set_caption(\"Bouncing Ball\")\n    clock = pygame.time.Clock()\n\n    # Ball setup\n    ball_radius = 15\n    ball_x      = random.randint(ball_radius, 640 - ball_radius)\n    ball_y      = random.randint(ball_radius, 480 - ball_radius)\n    vel_x       = 3\n    vel_y       = 3\n\n    running = True\n    while running:\n        clock.tick(60)  # 60 FPS\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n\n        # TODO: Update ball_x and ball_y\n        # ball_x += vel_x\n        # ball_y += vel_y\n\n        # TODO: Bounce off edges\n        # if ball_x - ball_radius &lt;= 0 or ball_x + ball_radius &gt;= 640:\n        #     vel_x = -vel_x\n        # if ball_y - ball_radius &lt;= 0 or ball_y + ball_radius &gt;= 480:\n        #     vel_y = -vel_y\n\n        screen.fill((0, 0, 0))\n        pygame.draw.circle(screen, (0, 255, 0),\n                           (ball_x, ball_y), ball_radius)\n        pygame.display.flip()\n\n    pygame.quit()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"coding_assignments/coding_assignment_04/#whats-going-on-here_2","title":"What's going on here?","text":"<ul> <li>The ball is initialized at a random position within the window, ensuring it doesn't start off-screen.</li> <li>The ball's velocity is set to a constant value, which determines how fast it moves.</li> <li>The ball's position is updated every frame based on its velocity.</li> <li>The ball bounces off the edges of the window by reversing its velocity when it hits an edge.</li> <li><code>pygame.draw.circle()</code> draws the ball on the screen.</li> <li>The screen is cleared and redrawn every frame to reflect the updated position of the ball.</li> </ul> Does this feel less like a game?<p>It might! Notice how we removed player movement and the game loop is now just a ball bouncing around. </p> <p>You could imagine how a more fun game would include a player trying to dodge or catch the ball -- to do that you'd need to program new behaviors that include things like:</p> <ul> <li>checking for collisions between the player and the ball</li> <li>updating the game state to reflect that the player has caught/been hit by the ball</li> <li>updating the score based on the player catching/hitting the ball</li> </ul> <p>Congratulations! You\u2019ve created a basic Pygame program with window setup, player movement, and a bouncing ball.  </p> <p>Feel free to experiment by adding: - Collision detection between the player and the ball. - A score counter that increments on each bounce. - Different colors or sprites instead of simple shapes.</p> <p>When you are satisfied, ensure all your solutions are tested and functioning as expected. Submit your work as a Python script (<code>.py</code>) or a Jupyter Notebook (<code>.ipynb</code>) on Canvas.</p>"},{"location":"coding_assignments/coding_assignment_05/","title":"Coding Assignment 5","text":"<p>In this coding assignment, you will download this zip file: coding_assignment_05.zip (click to download).</p> <p>The instructions to complete the coding assignment are embedded within the <code>.ipynb</code> file, the <code>coding_assignmnet_05</code> folder contains two files:</p> <ol> <li><code>coding_assignment_05.ipynb</code>: This is the Jupyter Notebook file that contains the instructions and code for the assignment.</li> <li><code>mediapipe_body_3d_xyz.npy</code>: This is a NumPy file that contains the 3D body pose data in XYZ format, which you will use in the assignment.</li> </ol>"},{"location":"coding_assignments/coding_assignment_05/#helpful-tips","title":"Helpful Tips","text":"<ul> <li>Unzip the downloaded file, and then don't move the files around. <code>coding_assignment_05.ipynb</code> expects the <code>mediapipe_body_3d_xyz.npy</code> file to be in the same directory!</li> <li>Follow the instructions in the Jupyter Notebook step by step, ask questions if you're confused</li> <li>The notebook first starts by walking you through plotting some complex 3D data, and then you get points in the assignment where you fill in some blanks, make your own plot, and reflect on the process. </li> <li>This assignment should be fun but also maybe a little weird! Plotting human movement data is second nature to me, but it takes time to develop intuition for what the data means. Ask questions! Follow your curiosity!</li> </ul>"},{"location":"coding_assignments/coding_assignment_05/#when-you-finish","title":"When you finish","text":"<p>If you're taking this course for credit, submit the completed <code>coding_assignment_05.ipynb</code> file through Canvas, rename it using the following format: </p> <p><code>lastname_firstname_coding_assignment_05.ipynb</code></p>"},{"location":"learning_paths/","title":"Learning Path","text":"<p>There is a main path for this course, followed by a sequence of steps. Each step is a module that you need to complete in order to move on to the next step. The steps are designed to help you learn the material in a logical sequence.</p>"},{"location":"learning_paths/Step_01/","title":"Step 1","text":""},{"location":"learning_paths/Step_01/#some-basic-concepts","title":"Some Basic Concepts","text":""},{"location":"learning_paths/Step_01/#what-is-a-computer","title":"What is a Computer?","text":"<p>If you think about it, your computer is a magic rock (aren't we all?)! It's a rock that can do math, remember things, and even talk to other rocks!</p> <p>Your computer is composed of two main components: Hardware and Software.</p> <p>The hardware is the physical parts of the computer - the things you can touch and see. This includes things like the monitor, keyboard, mouse, and the computer itself.</p> <p>The software is the programs that run on the computer. This includes things like the operating system (Windows, Mac OS, Linux), web browsers, and the programs you use to do things like write documents, create spreadsheets, and play games.</p> <p>In order for software to operate, it needs to know where to find the data it needs to run. This is where the file system comes in.</p> <p>The file system is the way that data is stored on your computer. Think of the filing system like addresses on a street. Each file on your computer has an address, and the file system is the way that the computer knows where to find the data it needs.</p> <p>To further understand the basics of the file system, we need to know what a \"directory\" and a \"file\" are.</p>"},{"location":"learning_paths/Step_01/#what-is-a-directory","title":"What is a \"Directory\"?","text":"<p>A directory is a place where files are stored. Think of a directory like a folder on your computer (for all intents and purposes, directory == folder). A directory can contain other directories, as well as files.</p> <p>Directories are important because this allows us to provide distinct and organized \"addresses\" for our files. Keeping files organized, particularly for programming projects, is very important for scalability, and reproducability.</p> <p>Scientific Programming</p> <p>File cleanliness and organization is particularly important in scientific programming. This is because we often need to share our code with others, or come back to it after a long period of time. If our code is not organized, it can be very difficult for us - or anyone else! - to understand what is going on.</p>"},{"location":"learning_paths/Step_01/#what-is-a-file-and-file-extension","title":"What is a \"File\" and \"File Extension\"?","text":"<p>A file is a collection of data that is stored on your computer. Files can contain text, images, videos, or any other type of data. Files are stored in directories, and each file has a name that is unique within the directory.</p> <p>Files can be combined to create applications - think \"apps\". Applications are made up of many files that work together to provide specific functions. Examples of applications include web browsers, word processors, and games.</p> <p>A file extension is a series of characters that are added to the end of a file name to indicate what type of file it is. For example, a file with the extension \" <code>.txt</code>\" is a text file, while a file with the extension \"<code>.jpg</code>\" is an image file. File extensions are important because they tell the computer what type of data is in the file, and how to open it. </p> <p>I'm a huge fan of the <code>.md</code> file extension, which is a markdown file - it's a great, non-proprietary way to write and format text.</p> Markdown<p>Markdown is a lightweight markup language that you can use to format text. It is often used to write documentation, README files, and other types of text that need to be formatted. Markdown is easy to learn, and you can use it to create headings, lists, links, and other types of formatting. </p> <p>You can learn more about Markdown here.</p>"},{"location":"learning_paths/Step_01/#tools-well-be-using-throughout-this-learning-path","title":"Tools we'll be using throughout this learning path:","text":""},{"location":"learning_paths/Step_01/#google-colab","title":"Google Colab","text":"<p>Google Colab, or \"Colab Notebooks\" is a completely free tool that allows you to write and execute Python code in your web browser. It is a great tool for learning Python, as it allows you to write and run code without having to install anything on your computer. It is also a great tool for sharing code with others, as you can easily share a link to your notebook with others, and they can view and run your code without having to install anything on their computer.</p> <p>For a lot of the work we will be doing in our class, we will be using Google Colab. You can access Google Colab here, and assignments will often be shared with you as a link to a Google Colab notebook.</p>"},{"location":"learning_paths/Step_01/#vscode","title":"VSCode","text":"<p>Visual Studio Code (very often referred to as \"VSCode\") is a free code editor that is available for Windows, Mac, and Linux. It built and supported by Microsoft, and is a very powerful tool that can be customized to fit your needs. For the purposes of our class, we will most often be using Google Colab, but having VSCode installed on your machine will enable you to work on your code locally - this will be an optional path that you can take if you want to work on your code outside of Google Colab!</p> <p>You can download VSCode here.</p> <p>Note: You do not want to download Visual Studio, which is a different product. Make sure you are downloading Visual Studio Code (VSCode).</p>"},{"location":"learning_paths/Step_01/#github","title":"GitHub","text":"<p>GitHub is a website that allows you to store and share your code with others. It is a great tool for collaborating on code with others, and for sharing your code with the world.</p> <p>The primary reason I'd like us to have access to GitHub - in the long term - is the integration of VSCode with their AI tool, GitHub Copilot. In my testing, I've found that GitHub Copilot is one of the best available coding AI tools out there - and as students at UC (or any other University), you have access to it for free!</p>"},{"location":"learning_paths/Step_01/#exercises","title":"Exercises","text":"<ol> <li>Install VSCode on your computer (follow the link above in the <code>VSCode</code> section). We wont use this immediately, but we'll use it later!</li> <li>Open and walk through your first Google Colab Notebook to get a taste of programming in Python!.<ul> <li>In this excercise you will:<ul> <li>learn how to run code in a Google Colab Notebook.</li> <li>run your first \"Hello World\" program using a Colab Cell.</li> <li>learn about comments and why they're important, especially for scientific programming.</li> <li>be introduced to the concept of \"variables\" in programming.</li> </ul> </li> </ul> </li> </ol>"},{"location":"learning_paths/Step_02/","title":"Step 2","text":"<p>In step 2, we have two objectives:</p> <ol> <li>Get familiar with the VSCode interface, including the file explorer, terminal, and editor.</li> <li>Introduce ourselves to the building blocks of Python, including environments, libraries, syntax, and programming terminology.</li> </ol>"},{"location":"learning_paths/Step_02/#exercise-intro-to-vscode","title":"Exercise: Intro to VSCode","text":""},{"location":"learning_paths/Step_02/#visually-navigating-vscode","title":"Visually navigating VSCode","text":"<p>Visual Studio Code (VSCode) is a powerful code editor. If you didn't install it yet, go back to <code>Step 1</code> and follow the instructions.</p> <p>Here's a quick overview of the main components we're concerned with:</p> <ul> <li>Side Bar: Shows different views like the Explorer, Search, Source Control, etc.</li> <li>Editor: The main area where you edit your files.</li> <li>Bottom Panel: Located at the bottom, it shows output, terminal, problems, etc.</li> </ul>"},{"location":"learning_paths/Step_02/#open-up-a-new-terminal","title":"Open up a new terminal","text":"<ol> <li> <p>Open the Terminal: </p> <ul> <li>Go to the top menu and select <code>Terminal &gt; New Terminal</code>.</li> <li>In the future, you can use the shortcut that is shown near <code>New Terminal</code>. Shortcuts are great!</li> <li>If you toggle open the pannel (using the pannel button in the top right corner of the terminal), you can also create a new terminal from there by pushing the big <code>+</code> button.</li> </ul> </li> <li> <p>Print your current directory path: Use the <code>pwd</code> command to print the path of your current directory:      <pre><code>pwd\n</code></pre> This will show you the path to your current directory, remember this is like the \"address\" of where you are in your computer. When we create files and folders (new directories!) we will be doing so in this location.</p> </li> </ol> <p>Code Blocks</p> <p>Above, you'll notice a gray box with text inside. This is a code block. You can copy the text inside the block with the \"copy\" button on the far right of the box, and paste it into your terminal to run the command.</p>"},{"location":"learning_paths/Step_02/#some-more-basic-terminal-commands","title":"Some more basic terminal commands","text":"<ol> <li> <p>Get to know your directory structure in the terminal: Use the <code>ls</code> command to list the contents of your current directory:      <pre><code>ls\n</code></pre></p> </li> <li> <p>Use the <code>mkdir</code> command:      <pre><code>mkdir a_folder_is_a_directory\n</code></pre></p> <p><code>mkdir</code> stands for \"make directory\" and is used to create new directories (or, \"folders\").</p> </li> <li> <p>Create a new directory called <code>a_folder_is_a_directory/this_is_a_directory_within_a_directory</code>: Use the <code>mkdir</code> command again:      <pre><code>mkdir a_folder_is_a_directory/this_is_a_directory_within_a_directory\n</code></pre></p> <p>This creates a directory within a directory, also known as a subdirectory.</p> </li> <li> <p>Create a file called <code>test_1.md</code> next to the <code>this_is_a_directory_within_a_directory</code> directory: Use the <code>New-Item</code> command:      <pre><code>New-Item -Name \"test_1.md\" -ItemType File\n</code></pre></p> <p>If you want to create the file inside of a particular directory, you can specify the path like this: <pre><code>New-Item -Name \"a_folder_is_a_directory/this_is_a_directory_within_a_directory/test_1.md\" -ItemType File\n</code></pre></p> </li> </ol> <p>Are you using a Mac?</p> <p>If you are on a Mac, the command to create a new file is slightly different. Use the <code>touch</code> command instead:  <pre><code>touch test_1.md\n</code></pre></p> <p><code>New-Item</code> is a command that tells the computer we want to make a new file. <code>-Name</code> and <code>-ItemType</code> are both parameters that you need to feed the <code>New-Item</code> command in order for it to work. In this case, we feed each parameter an \"argument\" in the space after it is presented, where \"test_1.md\" is the argument for the parameter <code>-Name</code> that specifies the file name.</p> <p>By default, this will create the file in your current directory. You can add an input parameter called \"<code>-Path</code>\" if you want to create a file in a particular location, like this: -Path <code>\"C:\\Users\\wirthtd\\downloads\"</code> </p>"},{"location":"learning_paths/Step_02/#navigate-to-the-a_folder_is_a_directory-directory-in-the-vscode-file-explorer","title":"Navigate to the <code>a_folder_is_a_directory</code> directory in the VSCode file explorer","text":"<ol> <li>Open the Explorer:</li> </ol> <p>You should be able to see the directory/folder structure in the file explorer on the left side of the VSCode window. If you can't see it:</p> <ul> <li> <p>Click on the Explorer icon in the Activity Bar (double-page icon in the top left of VSCode) or use the shortcut: <code>Ctrl + Shift + E</code> (<code>Cmd + Shift + E</code> on Mac).</p> </li> <li> <p>Navigate to the directory:</p> <ul> <li>Click on the <code>a_folder_is_a_directory</code> folder to expand it.</li> <li>Then, click on the <code>this_is_a_directory_within_a_directory</code>. <p>Note: because there is only one directory within <code>a_folder_is_a_directory</code>, the two directories might appear stacked on a single line. If we added more content to <code>a_folder_is_a_directory</code>, it would open up in a way that appears more \"normal\". There are settings to change this behavior, but we won't worry about that right now.</p> </li> </ul> </li> </ul>"},{"location":"learning_paths/Step_02/#open-the-test_1md-file-in-the-vscode-editor","title":"Open the <code>test_1.md</code> file in the VSCode editor","text":"<ol> <li>Open the file:</li> <li>Double-click on <code>test_1.md</code> to open it in the editor.</li> <li>This is a markdown (<code>.md</code>) file, you can learn more about markdown here</li> </ol>"},{"location":"learning_paths/Step_02/#intro-to-python","title":"Intro to Python","text":"<p>Python is a high-level, interpreted programming language known for its readability and versatility. It's widely used in various fields, including web development, data analysis, artificial intelligence, and scientific computing.</p>"},{"location":"learning_paths/Step_02/#python-environment","title":"Python Environment","text":"<p>A Python environment is a setup that includes the Python interpreter, libraries, and other tools necessary to run Python scripts. Understanding and setting up a Python environment is crucial for ensuring that your Python projects run smoothly and are well-organized.</p>"},{"location":"learning_paths/Step_02/#components-of-a-python-environment","title":"Components of a Python Environment","text":"<ol> <li>Python Interpreter: The core component that reads and executes Python code, telling your hardware what to do.</li> <li>Libraries and Packages: Collections of pre-written code that perform common tasks, such as NumPy for numerical operations and Pandas for data manipulation. Think of these as special-purpose tools that you can use to build your projects. We'll go over some examples of libraries further down.</li> <li>Virtual Environment: A self-contained directory that includes a specific version of Python and a set of libraries. This helps isolate projects from each other, preventing conflicts between dependencies.</li> </ol>"},{"location":"learning_paths/Step_02/#benefits-of-using-a-python-environment","title":"Benefits of Using a Python Environment","text":"<ul> <li>Isolation: Each project can have its own dependencies, avoiding conflicts with other projects.</li> <li>Reproducibility: Ensures that the code runs consistently across different machines.</li> <li>Organization: Keeps projects clean and manageable.</li> </ul> <p>Using Python Environments on a project-to-project basis is a good practice to get into early on, and it is a critical concept in scientific software development!</p> <p>Reflect: Why might this be important in scientific software development?</p>"},{"location":"learning_paths/Step_02/#python-libraries","title":"Python \"Libraries\"","text":"<p>Python has a rich ecosystem of \"libraries\" that extend its capabilities - this is one of the greatest advantages of Python, and is a result of it being the largest free and open source programming language in the world. </p> <p>Remember, a library is a collection of pre-written code that performs common tasks. Libraries are a critical component of your Python environment.</p> <p>Here are some Python Libraries that are particularly common in scientific computing:</p>"},{"location":"learning_paths/Step_02/#numpy","title":"NumPy","text":"<p>NumPy is a library for numerical computing in Python. It provides support for arrays, matrices, and many mathematical functions.</p>"},{"location":"learning_paths/Step_02/#pandas","title":"Pandas","text":"<p>Pandas is a library for data manipulation and analysis. It provides data structures like DataFrames, which are essential for handling structured data.</p>"},{"location":"learning_paths/Step_02/#matplotlib","title":"Matplotlib","text":"<p>Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python.</p>"},{"location":"learning_paths/Step_02/#some-more-basic-programming-terminology","title":"Some more basic programming terminology","text":""},{"location":"learning_paths/Step_02/#syntax","title":"Syntax","text":"<p>Syntax refers to the set of rules that define the structure of a programming language - in other words, syntax tells you the necessary rules for writing code. </p> <p>In Python, syntax is designed to be readable and straightforward.</p>"},{"location":"learning_paths/Step_02/#variables","title":"Variables","text":"<p>Variables are used to store data that can be referenced and manipulated in a program. You got a taste of variables in Exercise 1.</p> <p>In Python, you can create a variable by assigning a value to it:</p> <pre><code>x = 10\n</code></pre>"},{"location":"learning_paths/Step_02/#exercise","title":"Exercise","text":"<p>Go to this Google Colab Notebook and work through importing a Python library, and exploring some Python syntax &amp; variables.</p>"},{"location":"learning_paths/Step_02/#bonus","title":"Bonus","text":"Setting Up a Python Environment <p>This is a bit advanced - we'll do this together eventually, but if you want to play around with environment set up you should go ahead!!</p> <ol> <li> <p>Install Python: Download and install Python from the official website.</p> </li> <li> <p>Create a Virtual Environment:</p> <ul> <li>Open your terminal or command prompt.</li> <li>Navigate to your project directory.</li> <li>Run <code>python -m venv env</code> (where <code>env</code> is the name of your environment).</li> </ul> </li> <li> <p>Activate the Virtual Environment:</p> <ul> <li>On Windows: <code>.\\env\\Scripts\\activate</code></li> <li>On macOS/Linux: <code>source env/bin/activate</code></li> </ul> </li> <li> <p>Install Libraries: Use <code>pip install &lt;library_name&gt;</code> to add necessary libraries.</p> </li> </ol> <p>Example</p> <pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment\nsource myenv/bin/activate  # On macOS/Linux\n.\\myenv\\Scripts\\activate  # On Windows\n\n# Install a library\npip install numpy\n</code></pre>"},{"location":"learning_paths/Step_03/","title":"Step 3","text":""},{"location":"learning_paths/Step_03/#getting-python-set-up-in-vs-code","title":"Getting Python Set up in VS Code","text":"<p>Note: If you haven't installed VSCode yet, go back to Step 1.</p> <p>With VSCode installed, getting Python set up is fairly straight forward. </p> <ul> <li>Open VSCode</li> <li>Click on the Extensions icon on the left side of the window (it looks like a square with a few smaller squares in it)</li> <li>Search for \"Python\" in the search bar</li> <li>Click the green \"Install\" button on the Python extension by Microsoft</li> <li>Once the extension is installed, click the green \"Reload\" button to activate the extension</li> </ul>"},{"location":"learning_paths/Step_03/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>You've already used a Jupyter Notebook without realizing it; all Google Colab Notebooks are Jupyter Notebooks! Jupyter Notebooks are a great way to write and run Python code in a more interactive way than a traditional script.</p> <p>Jupyter compartments your code into \"cells\" that can be run independently of one another. This is great for debugging and testing code, as you can run a single cell to see if it works as expected.</p> <p>There are many ways to create a new Jupyter Notebook file in VSCode, one of the easiest ways is to click <code>File &gt; New File</code> and then either save the file with a <code>.ipynb</code> extension or <code>Jupyter Notebook</code> in the file type dropdown that pops up.</p> <p>Note: Any time you are prompted by VSCode to install a new package or extension relating to Python or Jupyter Notebooks, you should do so. These packages and extensions are what make Python and Jupyter Notebooks work in VSCode.</p>"},{"location":"learning_paths/Step_03/#introduction-to-python-data-types","title":"Introduction to Python Data Types","text":"<p>Python has several built-in data types that are used to store different kinds of information. Here are some of the most common data types:</p> <ul> <li>Integers: Whole numbers, e.g., <code>1</code>, <code>42</code>, <code>-7</code></li> <li>Floats: Decimal numbers, e.g., <code>3.14</code>, <code>0.001</code>, <code>-2.5</code></li> <li>Strings: Text, e.g., <code>\"hello\"</code>, <code>\"Python\"</code>, <code>\"123\"</code></li> <li>Booleans: True or False values, e.g., <code>True</code>, <code>False</code></li> </ul>"},{"location":"learning_paths/Step_03/#examples-of-data-types","title":"Examples of Data Types","text":"<pre><code># Integer\na = 10\n\n# Float\nb = 3.14\n\n# String\nc = \"Hello, Python!\"\n\n# Boolean\nd = True\n</code></pre>"},{"location":"learning_paths/Step_03/#variables-in-python","title":"Variables in Python","text":"<p>Variables are used to store data that can be referenced and manipulated in a program. They act as containers for values.</p>"},{"location":"learning_paths/Step_03/#variable-naming-conventions","title":"Variable Naming Conventions","text":"<ul> <li>Variable names must start with a letter or an underscore (<code>_</code>), such as <code>_myVar</code> or <code>myVar</code>.</li> <li>The rest of the name can contain letters, numbers, or underscores, examples: <code>myVar</code>, <code>my_var</code>, <code>myVar123</code>.</li> <li>Variable names are case-sensitive (e.g., <code>myVar</code> and <code>myvar</code> are different).</li> </ul> <p>Consistency is Key</p> <p>When you start a project, try to pick a variable naming style and stick to that style throughout your code. This will make your code more readable and maintainable. There are a few styles commonly used in Python:</p> <ul> <li>Snake Case: <code>my_variable_name</code> (recommended for Python, where all letters are lower case and spaces are replaced with underscores)</li> <li>Camel Case: <code>myVariableName</code> (the first word is lowercase, and the subsequent words are capitalized, no spaces. This is commonly used in JavaScript and C#)</li> <li>Pascal Case: <code>MyVariableName</code> (the first letter of each word is capitalized, no spaces. This is commonly used in C# and Java)</li> </ul> <p>If you choose to use something other than snake case for python, that's fine! But remember to be consistent.</p>"},{"location":"learning_paths/Step_03/#assigning-values-to-variables","title":"Assigning Values to Variables","text":"<p>You can assign values to variables using the assignment operator (<code>=</code>).</p>"},{"location":"learning_paths/Step_03/#examples-of-variable-assignments","title":"Examples of Variable Assignments","text":"<pre><code># Assigning values to variables\nx = 5\ny = 10.5\nname = \"Alice\"\nis_student = True\n</code></pre> <p>Variable Reassignment</p> <p>You can reassign a variable to a different value at any time. The new value can be of the same or a different data type - be careful when reassigning variables to avoid confusion!</p>"},{"location":"learning_paths/Step_03/#type-checking","title":"Type Checking","text":"<p>You can check the data type of a variable using the <code>type()</code> function.</p> <pre><code># Check the data type of a variable\nx = 5\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre> <p>If you run the code snippet above, you will see that the output is <code>&lt;class 'int'&gt;</code>, indicating that the variable <code>x</code> is an integer.</p> <p>Note: \"class\" here is a Python term that refers to the data type of the variable. Data classes are important, and we will learn more about them in the future.</p> <p>Here are the different outputs for the different types we've covered in today's Path Step:</p> <ul> <li><code>int</code> for integers</li> <li><code>float</code> for floats</li> <li><code>str</code> for strings</li> <li><code>bool</code> for booleans</li> </ul> <p>Try it out!</p> <p>Open up a new Collab Notebook and create a variable assigment. Then, in a subsequent cell, use the <code>type()</code> function to check the data type of the variable. Did it work the way you thought?</p>"},{"location":"learning_paths/Step_03/#reflect","title":"Reflect","text":"<p>Why might there be different data types in programs? (Answer below)</p> Answer<p>There are a lot of reasons! But here are a few that I can come up with from the perspective of a scientific programmer:</p> <ol> <li>As scientists, we work with lots of different types of data - often at the same time. We might want to construct pipelines specifically designed for a particular data type; later on in our class we'll create functions. Some functions can be are type-specific, meaning they will only work if we supply that function with the correct data type. This is a good thing, because it means we can be sure that our functions are doing what we expect them to do.</li> <li>Different data types have different properties. For example, you can't add a string to an integer in the same way you can add two integers. This can be useful for controlling the flow of your program and ensuring that you're not doing something you didn't intend to do.</li> <li>Different properties allow you to control the flow of your program in different and nuanced ways. For example, you can use booleans to control whether or not a particular block of code is executed. This can be useful for debugging (fixing your code), or for ensuring that your code is running as expected - we will talk more about program flow in Step 5!</li> </ol>"},{"location":"learning_paths/Step_03/#review","title":"Review","text":"<p>In this step, we learned about different data types in Python and how to work with variables. Understanding data types and variables is essential for writing code in Python. Here's a quick recap:</p> <ul> <li>Data Types: Python has several built-in data types, including integers, floats, strings, and booleans.</li> <li>Variables: Variables are used to store data in a program. They act as containers for values.</li> <li>Variable Naming Conventions: Follow naming conventions to make your code more readable and maintainable.</li> <li>Type Checking: You can check the data type of a variable using the <code>type()</code> function.</li> </ul>"},{"location":"learning_paths/Step_03/#colab-exercise","title":"Colab Exercise","text":"<p>Now that you've learned about data types and variables, it's time to practice! </p> <p>Open up this Colab Notebook and work through the exercises to reinforce your understanding.</p>"},{"location":"learning_paths/Step_04/","title":"Step 4","text":"<p>In Step 4, we will dive into operators and expressions in Python. Operators allow us to perform various operations on data, and expressions combine variables and operators to produce new values. Understanding these concepts is crucial for writing effective and efficient code.</p>"},{"location":"learning_paths/Step_04/#operators-in-python","title":"Operators in Python","text":"<p>Python provides several types of operators that you can use to perform different operations on data. Here are the main types of operators:</p>"},{"location":"learning_paths/Step_04/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are used to perform mathematical operations.</p> <ul> <li>Addition (<code>+</code>): Adds two numbers.</li> <li>Subtraction (<code>-</code>): Subtracts the second number from the first.</li> <li>Multiplication (<code>*</code>): Multiplies two numbers.</li> <li>Division (<code>/</code>): Divides the first number by the second.</li> <li>Modulus (<code>%</code>): Returns the remainder of the division.</li> <li>Exponentiation (<code>**</code>): Raises the first number to the power of the second.</li> </ul>"},{"location":"learning_paths/Step_04/#examples-of-arithmetic-operators","title":"Examples of Arithmetic Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> What's an <code>.ipynb</code>?<p>An <code>.ipynb</code> file is a \"Jupyter Notebook\" file that allows you to run Python code in a cell-by-cell format. You've already been working with these in Google Colab! You can create a new <code>.ipynb</code> file in VSCode by clicking on the <code>New File</code> button in the file explorer and selecting <code>Python 3</code> as the kernel. If you want to try this out, go for it! Ask a chatbot or your professor if you get confused.</p> <pre><code># Addition\nresult = 5 + 3\nprint(\"5 + 3 =\", result)\n\n# Subtraction\nresult = 10 - 4\nprint(\"10 - 4 =\", result)\n\n# Multiplication\nresult = 7 * 2\nprint(\"7 * 2 =\", result)\n\n# Division\nresult = 15 / 3\nprint(\"15 / 3 =\", result)\n\n# Modulus\nresult = 10 % 3\nprint(\"10 % 3 =\", result)\n\n# Exponentiation\nresult = 2 ** 3\nprint(\"2 ** 3 =\", result)\n</code></pre>"},{"location":"learning_paths/Step_04/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values and return a boolean result (<code>True</code> or <code>False</code>).</p> <ul> <li>Equal to (<code>==</code>): Checks if two values are equal.</li> <li>Not equal to (<code>!=</code>): Checks if two values are not equal.</li> <li>Greater than (<code>&gt;</code>): Checks if the first value is greater than the second.</li> <li>Less than (<code>&lt;</code>): Checks if the first value is less than the second.</li> <li>Greater than or equal to (<code>&gt;=</code>): Checks if the first value is greater than or equal to the second.</li> <li>Less than or equal to (<code>&lt;=</code>): Checks if the first value is less than or equal to the second.</li> </ul>"},{"location":"learning_paths/Step_04/#examples-of-comparison-operators","title":"Examples of Comparison Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># Equal to\nprint(5 == 5)  # True\n\n# Not equal to\nprint(5 != 3)  # True\n\n# Greater than\nprint(7 &gt; 4)  # True\n\n# Less than\nprint(3 &lt; 8)  # True\n\n# Greater than or equal to\nprint(6 &gt;= 6)  # True\n\n# Less than or equal to\nprint(2 &lt;= 5)  # True\n</code></pre>"},{"location":"learning_paths/Step_04/#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to combine conditional statements.</p> <ul> <li>AND (<code>and</code>): Returns <code>True</code> if both statements are true.</li> <li>OR (<code>or</code>): Returns <code>True</code> if at least one statement is true.</li> <li>NOT (<code>not</code>): Reverses the result, returns <code>False</code> if the result is true.</li> </ul>"},{"location":"learning_paths/Step_04/#examples-of-logical-operators","title":"Examples of Logical Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># AND\nprint(True and True)  # True\nprint(True and False)  # False\n\n# OR\nprint(True or False)  # True\nprint(False or False)  # False\n\n# NOT\nprint(not True)  # False\nprint(not False)  # True\n</code></pre>"},{"location":"learning_paths/Step_04/#expressions-in-python","title":"Expressions in Python","text":"<p>Expressions are combinations of variables, operators, and values that produce a result. They are the building blocks of any Python program.</p>"},{"location":"learning_paths/Step_04/#combining-variables-and-operators","title":"Combining Variables and Operators","text":"<p>You can combine variables and operators to create expressions. Here are some examples:</p> <p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># Arithmetic expression\nx = 5\ny = 3\nresult = x + y\nprint(\"x + y =\", result)\n\n# Comparison expression\nis_greater = x &gt; y\nprint(\"x &gt; y:\", is_greater)\n\n# Logical expression\nis_true = (x &gt; y) and (y &gt; 0)\nprint(\"(x &gt; y) and (y &gt; 0):\", is_true)\n</code></pre>"},{"location":"learning_paths/Step_04/#exercise-working-with-operators-and-expressions","title":"Exercise: Working with Operators and Expressions","text":"<p>Now it's time to practice using operators and creating expressions. You can do this your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode (we haven't done this last one yet - if you'd like to try,ask a chatbot or your professor!).</p> <p>Try the following exercises:</p>"},{"location":"learning_paths/Step_04/#exercise-1-arithmetic-operators","title":"Exercise 1: Arithmetic Operators","text":"<p>Write a Python program that performs the following operations and prints the results:</p> <ol> <li>Add two numbers.</li> <li>Subtract one number from another.</li> <li>Multiply two numbers.</li> <li>Divide one number by another.</li> <li>Find the remainder of the division of two numbers.</li> <li>Raise one number to the power of another.</li> </ol>"},{"location":"learning_paths/Step_04/#exercise-2-comparison-operators","title":"Exercise 2: Comparison Operators","text":"<p>Write a Python program that compares two numbers using each of the comparison operators and prints the results.</p>"},{"location":"learning_paths/Step_04/#exercise-3-logical-operators","title":"Exercise 3: Logical Operators","text":"<p>Write a Python program that uses logical operators to combine multiple conditions and prints the results.</p>"},{"location":"learning_paths/Step_04/#exercise-4-creating-expressions","title":"Exercise 4: Creating Expressions","text":"<p>Write a Python program that combines variables and operators to create expressions. Use arithmetic, comparison, and logical operators in your expressions.</p>"},{"location":"learning_paths/Step_04/#reflect","title":"Reflect","text":"<p>Think about the different types of operators and expressions you've learned. How might you use them in your own programs? What are some real-world scenarios where these concepts might be useful?</p>"},{"location":"learning_paths/Step_04/#review","title":"Review","text":"<p>In this step, we learned about different types of operators and expressions in Python. Here's a quick recap:</p> <ul> <li>Arithmetic Operators: Used to perform mathematical operations.</li> <li>Comparison Operators: Used to compare two values and return a boolean result.</li> <li>Logical Operators: Used to combine conditional statements.</li> <li>Expressions: Combinations of variables, operators, and values that produce a result.</li> </ul> <p>Understanding these concepts is essential for writing effective and efficient code in Python.</p>"},{"location":"learning_paths/Step_05/","title":"Step 5","text":"<p>In Step 5, we will explore control structures in Python, specifically focusing on making decisions using conditional statements. Control structures allow us to control the flow of our programs, making them more dynamic and responsive to different inputs and conditions.</p> <p>Write as you Go</p> <p>As you work through this step, try writing code snippets in your own Notebook either in VSCode or Google Colab. This will help you practice and reinforce what you're learning.</p>"},{"location":"learning_paths/Step_05/#indentations-in-python","title":"Indentations in Python","text":"<p>Indentation is a crucial aspect of Python syntax. Unlike many other programming languages that use braces <code>{}</code> to define code blocks, Python uses indentation to determine the grouping of statements. This means that the level of indentation (spaces or tabs) is used to define the structure and flow of your code.</p> <p>How to make an indentation?</p> <p>In VSCode and Google Colab, you can create an indentation by pressing the <code>Tab</code> key on your keyboard. You can also use the <code>Shift</code> + <code>Tab</code> key to remove/reverse an indentation.</p> <p>Weirdly, in Python, the \"prefered\" way to indent is to use 4 spaces. This is because it is easier to read and is more consistent across different editors and platforms - because typically, when you press <code>Tab</code>, it creates a character <code>\\t</code>. HOWEVER, most IDEs like VSCode will automatically convert tabs to 4 spaces for you - for the purposes of this class, you should be fine to use the <code>Tab</code> key.</p>"},{"location":"learning_paths/Step_05/#why-indentation-matters","title":"Why Indentation Matters","text":"<p>Indentation is not just for readability; it is a fundamental part of Python's syntax (remember, \"syntax\" is a way of saying \"the way the program is written to be understood by the machine\"). Incorrect indentation can lead to syntax errors or unexpected behavior in your code.</p>"},{"location":"learning_paths/Step_05/#rules-for-indentation","title":"Rules for Indentation","text":"<ol> <li>Consistent Indentation: Use the same number of spaces or tabs for each level of indentation. Mixing spaces and tabs can cause errors. Most </li> <li>Standard Practice: The standard practice is to use 4 spaces for each level of indentation. Most Python editors and IDEs (like VSCode) are configured to use 4 spaces by default.</li> <li>Indentation Levels: Each level of indentation represents a new block of code. For example, the code inside an <code>if</code> statement or a loop must be indented.</li> </ol>"},{"location":"learning_paths/Step_05/#example","title":"Example","text":"<p>We will learn about <code>if</code> statements in the next section below, but here's an example to illustrate the importance of indentation. This might make more sense after you learn what an <code>if</code> statement is, but for now think of an <code>if</code> statement as a way to check if a condition is true or false.</p> <pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n    if x &gt; 8:\n        print(\"x is also greater than 8\")\nprint(\"This line is outside the if statement\")\n</code></pre> <p>In this example:</p> <ul> <li>The first <code>print</code> statement is indented once, so it is part of the <code>if x &gt; 5</code> block.</li> <li>The second <code>print</code> statement is indented twice, so it is part of the <code>if x &gt; 8</code> block, which is nested inside the first <code>if</code> block.</li> <li>The final <code>print</code> statement is not indented, so it is outside of the <code>if</code> block and will always be executed.</li> </ul> <p>So, remember to pay attention to your indentation when writing Python code! It changes the way the code will be executed. Now, onto more fun things!</p>"},{"location":"learning_paths/Step_05/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements are used to perform different actions based on different conditions. The most common conditional statements in Python are <code>if</code>, <code>elif</code>, and <code>else</code>.</p>"},{"location":"learning_paths/Step_05/#the-if-statement","title":"The <code>if</code> Statement","text":"<p>The <code>if</code> statement is used to test a condition. If the condition is true, the code block inside the <code>if</code> statement is executed.</p> <p>Recall: Boolean Operators</p> <p>Remember that conditional statements rely on boolean expressions to determine whether a condition is true or false. We went over boolean operators in Step 4, but here's a quick refresher:</p> <p>A boolean expression is an expression that evaluates to either <code>True</code> or <code>False</code>. We can make the variable <code>condition</code> in the <code>if</code> statement is a boolean expression by setting it equal to to either <code>True</code> or <code>False</code> before we run the code. You can experiment with this in your own Notebook, printing out a value within the conditional statement to see how it changes.</p>"},{"location":"learning_paths/Step_05/#syntax","title":"Syntax","text":"<pre><code>if condition:\n    # code block to be executed if the condition is true\n</code></pre>"},{"location":"learning_paths/Step_05/#example_1","title":"Example","text":"<pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n</code></pre>"},{"location":"learning_paths/Step_05/#the-elif-statement","title":"The <code>elif</code> Statement","text":"<p>The <code>elif</code> statement is short for \"else if\". It allows us to check multiple conditions.</p>"},{"location":"learning_paths/Step_05/#syntax_1","title":"Syntax","text":"<pre><code>if condition1:\n    # code block to be executed if condition1 is true\nelif condition2:\n    # code block to be executed if condition2 is true\n</code></pre>"},{"location":"learning_paths/Step_05/#example_2","title":"Example","text":"<pre><code>x = 10\nif x &gt; 15:\n    print(\"x is greater than 15\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but less than or equal to 15\")\n</code></pre>"},{"location":"learning_paths/Step_05/#the-else-statement","title":"The <code>else</code> Statement","text":"<p>The <code>else</code> statement catches anything that isn't caught by the preceding conditions.</p>"},{"location":"learning_paths/Step_05/#syntax_2","title":"Syntax","text":"<pre><code>if condition1:\n    # code block to be executed if condition1 is true\nelif condition2:\n    # code block to be executed if condition2 is true\nelse:\n    # code block to be executed if none of the conditions are true\n</code></pre>"},{"location":"learning_paths/Step_05/#example_3","title":"Example","text":"<pre><code>x = 10\nif x &gt; 15:\n    print(\"x is greater than 15\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but less than or equal to 15\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre> <p>Play with it!</p> <p>In a notebook, copy and paste the code above. Then try changing the value of <code>x</code> in the example above to see how the output changes based on the conditions.</p>"},{"location":"learning_paths/Step_05/#exercise-making-decisions-with-conditional-statements","title":"Exercise: Making Decisions with Conditional Statements","text":"<p>Now it's time to practice using conditional statements. You can do this in your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode.</p>"},{"location":"learning_paths/Step_05/#exercise-1-basic-if-statement","title":"Exercise 1: Basic <code>if</code> Statement","text":"<p>Write a Python program that checks if a number is positive, negative, or zero and prints the result.</p> Solution<p>Here's a simple solution to the basic <code>if</code> statement problem:</p> <pre><code>x = 10\nif x &gt; 0:\n    print(\"x is positive\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelse:\n    print(\"x is zero\")\n</code></pre>"},{"location":"learning_paths/Step_05/#exercise-2-using-elif-and-else","title":"Exercise 2: Using <code>elif</code> and <code>else</code>","text":"<p>Write a Python program that checks the grade of a student based on their score and prints the corresponding grade (A, B, C, D, or F).</p> Solution<p>Here's a simple solution to the grade-checking problem:</p> <pre><code>score = 85\nif score &gt;= 90:\n    print(\"A\")\nelif score &gt;= 80:\n    print(\"B\")\nelif score &gt;= 70:\n    print(\"C\")\nelif score &gt;= 60:\n    print(\"D\")\nelse:\n    print(\"F\")\n</code></pre>"},{"location":"learning_paths/Step_05/#reflect","title":"Reflect","text":"<p>Think about how conditional statements can be used to control the flow of a program. What are some real-world scenarios where these concepts might be useful?</p> Sorting Data<p>Conditional statements can be used to sort data, filter out unwanted information, or make decisions based on specific criteria. For example, you might use conditional statements to categorize products based on their price, filter out invalid user inputs, or determine the eligibility of a customer for a discount.</p>"},{"location":"learning_paths/Step_05/#review","title":"Review","text":"<p>In this step, we learned about conditional statements in Python. Here's a quick recap:</p> <ul> <li><code>if</code> Statement: Used to test a condition and execute a code block if the condition is true.</li> <li><code>elif</code> Statement: Allows us to check multiple conditions.</li> <li><code>else</code> Statement: Catches anything that isn't caught by the preceding conditions.</li> </ul> <p>Understanding these concepts is essential for writing dynamic and responsive programs in Python.</p>"},{"location":"learning_paths/Step_06/","title":"Step 6","text":"<p>In Step 6, we will focus on problem-solving using control structures. This step will build on the concepts of conditional statements and introduce loops, which are essential for creating dynamic and efficient programs.</p>"},{"location":"learning_paths/Step_06/#problem-solving-with-control-structures","title":"Problem-Solving with Control Structures","text":"<p>Control structures allow us to control the flow of our programs, making them more dynamic and responsive to different inputs and conditions. In this step, we will explore how to use control structures to solve problems.</p>"},{"location":"learning_paths/Step_06/#loops-in-python","title":"Loops in Python","text":"<p>Loops are used to execute a block of code repeatedly. Python provides two types of loops: <code>for</code> loops and <code>while</code> loops.</p>"},{"location":"learning_paths/Step_06/#the-for-loop","title":"The <code>for</code> Loop","text":"<p>The <code>for</code> loop is used to iterate over a sequence of numbers and execute a block of code for each number.</p> <p><code>list</code>s in Python</p> <p>A <code>list</code> is a collection of items that can be of different types. You can create a list by placing the items inside square brackets <code>[]</code>, separated by commas. For example:</p> <pre><code>numbers_list = [1, 2, 3, 4, 5]\n</code></pre> <p>Lists are iterable, meaning you can loop over the items in a list using a <code>for</code> loop. Python makes great use of lists and other iterable objects to simplify programming tasks!</p>"},{"location":"learning_paths/Step_06/#syntax","title":"Syntax","text":"<pre><code>numbers_list = [1, 2, 3, 4, 5]\n\nfor number in numbers_list:\n    # code block to be executed for each number in the list\n</code></pre>"},{"location":"learning_paths/Step_06/#example","title":"Example","text":"<pre><code>numbers_list = [1, 2, 3, 4, 5]\nfor number in numbers_list:\n    print(number)\n</code></pre> The <code>range()</code> Function<p>The <code>range()</code> function is commonly used with <code>for</code> loops to generate a sequence of numbers. It takes three arguments: <code>start</code>, <code>stop</code>, and <code>step</code>. For example, <code>range(1, 6, 2)</code> generates the sequence <code>1, 3, 5</code>.</p> <p>You can also use <code>range()</code> with a single argument to generate a sequence starting from 0. For example, <code>range(5)</code> generates the sequence <code>0, 1, 2, 3, 4</code>. </p> <p>You can use the <code>range()</code> function to iterate over a specific range of numbers in a <code>for</code> loop, like this: </p> <pre><code>for i in range(1, 6):\n    print(i)\n</code></pre>"},{"location":"learning_paths/Step_06/#another-example","title":"Another Example","text":"<p>Just like you can loop over a list of numbers, you can loop over a string in Python. When you feed in a string to a <code>for</code> loop, it will iterate over each character in the string.</p> <pre><code>for character in \"This will print vertically\":\n    print(character)\n</code></pre>"},{"location":"learning_paths/Step_06/#the-while-loop","title":"The <code>while</code> Loop","text":"<p>The <code>while</code> loop is used to execute a block of code as long as a condition is true.</p>"},{"location":"learning_paths/Step_06/#syntax_1","title":"Syntax","text":"<pre><code>while condition:\n    # code block to be executed as long as the condition is true\n</code></pre>"},{"location":"learning_paths/Step_06/#example_1","title":"Example","text":"<pre><code>count = 0\nwhile count &lt; 3:\n    print(count)\n    count += 1\n</code></pre> <p>The <code>+=</code> Operator</p> <p>The <code>+=</code> operator is used to increment (add) the value of a variable. This is a shorter way to write  <pre><code>variable = variable + 1\n</code></pre></p> <p><code>-=</code> can be used to decrement (subtract) the value of a variable, as well as <code>*=</code>, <code>/=</code>, and <code>**=</code> for multiplication, division, and exponentiation, respectively.</p>"},{"location":"learning_paths/Step_06/#combining-loops-and-conditional-statements","title":"Combining Loops and Conditional Statements","text":"<p>You can combine loops and conditional statements to create more complex control structures.</p>"},{"location":"learning_paths/Step_06/#example_2","title":"Example","text":"<pre><code>numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfor i in numbers_list:\n    if i % 2 == 0:\n        print(f\"{i} is even\")\n    else:\n        print(f\"{i} is odd\")\n</code></pre> <p>What the f?</p> <p>The <code>f</code> before the string in the print statement indicates that it is an f-string. F-strings allow you to embed expressions inside string literals, using curly braces <code>{}</code>. This makes it easy to format strings with variable values.</p> <p>For example, <code>f\"{i} is even\"</code> will replace <code>{i}</code> with the value of <code>i</code> when printing.</p> <p>We'll talk more about f-strings in <code>Step 9</code> because they're very useful for Debugging -- the focus of <code>Step 9</code>.</p>"},{"location":"learning_paths/Step_06/#using-print-statements-to-understand-control-flow","title":"Using Print Statements to Understand Control Flow","text":"<p>You might have noticed above that we used print statements to understand how our code is working. Print statements are a simple yet powerful tool to track the flow of your program and understand how variables change over time.</p>"},{"location":"learning_paths/Step_06/#example-tracking-a-number","title":"Example: Tracking a Number","text":"<p>Let's start with a simple example where we print a number, perform an operation on it, and then print it again to see the output.</p>"},{"location":"learning_paths/Step_06/#example-code","title":"Example Code","text":"<pre><code>number = 10\nprint(\"Initial number:\", number)\n\n# Perform an operation\nnumber += 5\nprint(\"After adding 5:\", number)\n\n# Perform another operation\nnumber *= 2\nprint(\"After multiplying by 2:\", number)\n</code></pre>"},{"location":"learning_paths/Step_06/#reflection","title":"Reflection","text":"<ul> <li>What did the output look like?</li> <li>Did you see how the number changed after each operation?</li> </ul>"},{"location":"learning_paths/Step_06/#exercise-problem-solving-with-control-structures","title":"Exercise: Problem-Solving with Control Structures","text":"<p>Now it's time to practice using loops and conditional statements to solve problems. You can do this in your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode.</p>"},{"location":"learning_paths/Step_06/#exercise-1-simple-loops","title":"Exercise 1: Simple Loops","text":"<p>Write a Python program that prints the numbers from 1 to 5 using a <code>for</code> loop, then do it again for a <code>while</code> loop.</p> Solution<p>Here's a simple solution to the simple loops problem:</p> <pre><code># Using a for loop\nnumbers_list = [1, 2, 3, 4, 5]\nfor i in numbers_list:\n    print(i)\n</code></pre> <pre><code># Using a while loop\ncount = 1\nwhile count &lt; 6:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"learning_paths/Step_06/#exercise-2-sum-of-numbers","title":"Exercise 2: Sum of Numbers","text":"<p>Write a Python program that calculates the sum of numbers from 1 to 10.</p> Hint<p>You can use a <code>for</code> loop combined with the <code>range()</code> function to iterate over the numbers from 1 to 10 and calculate the sum. You could also implement the <code>+=</code> operator to increment the sum for each number.</p> Solution<p>Here's a simple solution to the sum of numbers problem:</p> <pre><code>total = 0\nfor i in range(1, 11):\n    total += i\nprint(f\"The sum of numbers from 1 to 10 is: {total}\")\n</code></pre>"},{"location":"learning_paths/Step_06/#exercise-3-fizzbuzz","title":"Exercise 3: FizzBuzz","text":"<p>Write a Python program that prints the numbers from 1 to 20. For multiples of three, print \"Fizz\" instead of the number, and for the multiples of five, print \"Buzz\". For numbers which are multiples of both three and five, print \"FizzBuzz\".</p> Solution<p>Here's a simple solution to the FizzBuzz problem:</p> <pre><code>for i in range(1, 21):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n</code></pre>"},{"location":"learning_paths/Step_06/#exercise-4-counting-vowels","title":"Exercise 4: Counting Vowels","text":"<p>Write a Python program that counts the number of vowels in a given string.</p> Hint<p>You can use a for loop to iterate over each character in the string and a conditional statement to check if the character is a vowel.</p> Solution<p>Here is one solution to the problem: <pre><code>string = \"This is a sample string\"\nvowels = \"aeiouAEIOU\"\ncount = 0\nfor char in string:\n    if char in vowels:\n        count += 1\nprint(f\"The number of vowels in the string is: {count}\")\n</code></pre></p>"},{"location":"learning_paths/Step_06/#exercise-5-reverse-a-string","title":"Exercise 5: Reverse a String","text":"<p>Write a Python program that reverses a given string using a for loop.</p> Hint<p>You can use a for loop to iterate over the string in reverse order and build a new string.</p> Solution<p>Here's a possible solution: <pre><code>string = \"Hello, World!\"\nreversed_string = \"\"\nfor char in string:\n    reversed_string = char + reversed_string\nprint(f\"The reversed string is: {reversed_string}\")\n</code></pre></p> <p>Think: Why does this solution work?</p>"},{"location":"learning_paths/Step_06/#exercise-6-multiplication-table-with-f-strings","title":"Exercise 6: Multiplication Table with F-Strings","text":"<p>Write a Python program that generates a multiplication table for numbers 1-5, using f-strings.</p> Hint<p>You can use nested <code>for</code> loops to generate the multiplication table for numbers 1-5.</p> Solution<p>Here's a possible solution: <pre><code>for i in range(1, 6):\n    for j in range(1, 6):\n        print(f\"{i} x {j} = {i * j}\") # Print a new line after each row\n</code></pre></p> <p>This solution uses nested <code>for</code> loops to generate the multiplication table for numbers 1-5. The outer loop iterates over the numbers 1-5 for the first multiplier, and the inner loop iterates over the numbers 1-5 again for the second number, generating a table of all multiplication results.</p>"},{"location":"learning_paths/Step_06/#reflect","title":"Reflect","text":"<p>Think about how loops and conditional statements can be used to solve problems. What are some real-world scenarios where these concepts might be useful?</p> Automating Repetitive Tasks<p>Loops and conditional statements are essential for automating repetitive tasks and handling different conditions in programs. For example, you can use loops to process large datasets, iterate over files in a directory, or perform calculations based on specific conditions. Conditional statements can be used to control the flow of a program, handle user inputs, or make decisions based on certain criteria.</p> <p>Another tool, <code>functions</code>, can also be used to automate repetitive tasks. We'll learn about functions in the next step!</p>"},{"location":"learning_paths/Step_06/#review","title":"Review","text":"<p>In this step, we learned about loops and how to use them in combination with conditional statements to solve problems. Here's a quick recap:</p> <ul> <li><code>for</code> Loop: Used to iterate over a sequence of numbers and execute a block of code for each number.</li> <li><code>while</code> Loop: Used to execute a block of code as long as a condition is true.</li> <li>Combining Loops and Conditional Statements: Allows for more complex control structures and problem-solving.</li> </ul> <p>Understanding these concepts is essential for writing dynamic and efficient programs in Python.</p>"},{"location":"learning_paths/Step_07/","title":"Step 7","text":"<p>In Step 7, we will explore functions in Python. Functions are reusable blocks of code that perform a specific task. They help us organize our code, make it more readable, and avoid repetition.</p>"},{"location":"learning_paths/Step_07/#defining-functions","title":"Defining Functions","text":"<p>To define a function in Python, we use the <code>def</code> keyword (short for \"define\") followed by the function name and parentheses <code>()</code>. </p> <p>Inside the parentheses, we can specify parameters, or \"inputs\", that the function can accept. The function body is indented and contains the code that will be executed when the function is called.</p>"},{"location":"learning_paths/Step_07/#syntax","title":"Syntax","text":"<pre><code>def function_name(parameters):\n    # code block to be executed\n</code></pre>"},{"location":"learning_paths/Step_07/#example","title":"Example","text":"<pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n</code></pre> <p>In this example, <code>greet</code> is the function name, and <code>name</code> is a parameter. The function prints a greeting message using the provided name.</p>"},{"location":"learning_paths/Step_07/#calling-functions","title":"Calling Functions","text":"<p>To call a function, we use the function name followed by parentheses <code>()</code>. If the function accepts parameters, we pass the arguments inside the parentheses.</p>"},{"location":"learning_paths/Step_07/#example_1","title":"Example","text":"<pre><code>greet(\"Alice\")\n</code></pre> <p>This will output:</p> <pre><code>Hello, Alice!\n</code></pre>"},{"location":"learning_paths/Step_07/#return-statement","title":"Return Statement","text":"<p>Functions can return a value using the <code>return</code> statement. This allows us to capture the result of a function and use it in other parts of our code.</p>"},{"location":"learning_paths/Step_07/#example_2","title":"Example","text":"<pre><code>def add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>This will output:</p> <pre><code>8\n</code></pre>"},{"location":"learning_paths/Step_07/#default-parameters","title":"Default Parameters","text":"<p>We can define default values for parameters in a function. If an argument is not provided when the function is called, the default value will be used.</p>"},{"location":"learning_paths/Step_07/#example_3","title":"Example","text":"<pre><code>def greet(name=\"World\"):\n    print(f\"Hello, {name}!\")\n\ngreet()\n</code></pre> <p>This will output:</p> <pre><code>Hello, World!\n</code></pre> <p>by default, the function uses \"World\" as the name. If we call the function without providing a name, it will use the default value, like this:</p> <pre><code>def greet(name=\"World\"):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\n</code></pre> <p>This will output:</p> <pre><code>Hello, Alice!\n</code></pre> <p>Try it yourself!</p>"},{"location":"learning_paths/Step_07/#keyword-arguments","title":"Keyword Arguments","text":"<p>We can more flexibly use functions by telling the function what we want to use as input when we call that function.</p> <p>Let's imagine a scenario where we have a \"describe_pet\" function that takes two parameters: \"animal_type\" and \"pet_name\", the function might look like this:</p> <pre><code>def describe_pet(animal_type, pet_name):\n    print(f\"I have a {animal_type} named {pet_name}.\")\n</code></pre> <p>We can specify the inputs, or \"arguments\", when we call the function by setting them equal to the parameter names. </p> <p>Parameters &amp; Arguments</p> <p>The parameter is the name we give to the input in the function definition, and the argument is the actual value we pass to the function.</p> <p>Here is an example of specifying that I have a dog named Rufus: <pre><code>describe_pet(animal_type=\"dog\", pet_name=\"Rufus\")\n</code></pre></p> <p>Note that when I specify the arguments (inputs), I can change the order and the function will work just fine:</p> <pre><code>describe_pet(pet_name=\"Django\", animal_type=\"dog\")\n</code></pre> <p>So, in the code below, I can define the function and use the function twice in a row, changing the order of the arguments:</p> <pre><code>def describe_pet(animal_type, pet_name):\n    print(f\"I have a {animal_type} named {pet_name}.\")\n\ndescribe_pet(animal_type=\"dog\", pet_name=\"Sherlock\")\ndescribe_pet(pet_name=\"Watson\", animal_type=\"cat\")\n</code></pre> <p>This will output:</p> <pre><code>I have a dog named Sherlock. I have a cat named Watson.\n</code></pre>"},{"location":"learning_paths/Step_07/#exercises","title":"Exercises","text":"<ol> <li> <p>Define a Function: Write a function called <code>square</code> that takes a number as a parameter and returns its square.</p> Solution<pre><code>def square(number):\n    return number * number\n\nresult = square(5)\nprint(result)\n</code></pre> </li> <li> <p>Call a Function: Write a function called <code>multiply</code> that takes two numbers as parameters and returns their product. Call the function with different arguments and print the results.</p> Solution<pre><code>def multiply(a, b):\n    return a * b\n\nresult1 = multiply(3, 4)\nresult2 = multiply(5, 2)\nprint(result1)\nprint(result2)\n</code></pre> </li> <li> <p>Default Parameters: Write a function called <code>greet_user</code> that takes a name as a parameter and prints a greeting message. If no name is provided, it should use \"User\" as the default name.</p> Solution<pre><code>def greet_user(name=\"User\"):\n    print(f\"Hello, {name}!\")\n\ngreet_user(\"Alice\")\ngreet_user()\n</code></pre> </li> <li> <p>Keyword Arguments: Write a function called <code>make_sandwich</code> that takes a list of ingredients and prints a message describing the sandwich. Call the function using keyword arguments to specify the ingredients in different orders.</p> Solution<pre><code>def make_sandwich(ingredients):\n    print(\"Sandwich with:\")\n    for ingredient in ingredients:\n        print(f\"- {ingredient}\")\n\nmake_sandwich(ingredients=[\"bread\", \"cheese\", \"tomato\"])\nmake_sandwich(ingredients=[\"tomato\", \"bread\", \"cheese\"])\n</code></pre> </li> </ol>"},{"location":"learning_paths/Step_07/#reflect","title":"Reflect","text":"<p>Think about how functions can help you organize your code and make it more reusable. What are some real-world scenarios where you might use functions?</p>"},{"location":"learning_paths/Step_07/#review","title":"Review","text":"<p>In this step, we learned about functions in Python. Here's a quick recap:</p> <ul> <li>Defining Functions: Use the <code>def</code> keyword to define a function.</li> <li>Calling Functions: Use the function name followed by parentheses to call a function.</li> <li>Return Statement: Use the <code>return</code> statement to return a value from a function.</li> <li>Default Parameters: Define default values for parameters in a function.</li> <li>Keyword Arguments: Specify arguments using parameter names when calling a function.</li> </ul> <p>Understanding these concepts is essential for writing organized and reusable code in Python.</p>"},{"location":"learning_paths/Step_08/","title":"Step 8","text":"<p>In Step 8, we will reinforce our understanding of functions by combining them with loops, conditionals, and type hints. This step will provide opportunities to practice and see how these concepts work together.</p>"},{"location":"learning_paths/Step_08/#simple-function","title":"Simple Function","text":"<p>Let's start with a simple function that adds two numbers.</p> <pre><code>def add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>In this example, <code>add</code> is a function that takes two parameters <code>a</code> and <code>b</code>, and returns their sum.</p>"},{"location":"learning_paths/Step_08/#using-a-function-in-a-loop","title":"Using a Function in a Loop","text":"<p>Now, let's see how we can use this function in a loop to add numbers from a list.</p> <pre><code>def add(a, b):\n    return a + b\n\nnumbers = [1, 2, 3, 4, 5]\ntotal = 0\nfor number in numbers:\n    total = add(total, number)\n\nprint(total)\n</code></pre> <p>In this example, we use the <code>add</code> function in a <code>for</code> loop to sum all the numbers in the list.</p>"},{"location":"learning_paths/Step_08/#functions-with-various-data-types","title":"Functions with Various Data Types","text":"<p>Functions can work with different data types and return various outputs. Let's see some examples.</p>"},{"location":"learning_paths/Step_08/#example-1-concatenating-strings","title":"Example 1: Concatenating Strings","text":"<pre><code>def concatenate(str1, str2):\n    return str1 + \" \" + str2\n\nresult = concatenate(\"Hello\", \"World\")\nprint(result)\n</code></pre>"},{"location":"learning_paths/Step_08/#example-2-checking-even-or-odd","title":"Example 2: Checking Even or Odd","text":"<pre><code>def is_even(number):\n    if number == 0:\n        return False # Zero is not considered even or odd, it is an \"edge case\"\n                     # so we'll take care of it first.\n    else:\n        return number % 2 == 0 # Now that zero is taken care of, \n                               # this will work fine.\n\nresult = is_even(4)\nprint(result)\n</code></pre>"},{"location":"learning_paths/Step_08/#example-3-finding-the-maximum-value","title":"Example 3: Finding the Maximum Value","text":"<pre><code>def find_max(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\n\nresult = find_max(10, 20)\nprint(result)\n</code></pre>"},{"location":"learning_paths/Step_08/#introducing-type-hints","title":"Introducing Type Hints","text":"<p>Type hints allow you to specify the expected data types of function parameters and return values. They do not enforce the types but provide useful information for code readability. </p>"},{"location":"learning_paths/Step_08/#syntax","title":"Syntax","text":"<p>Below is a template for how a function with type hints would work, note, these are not real types:</p> <pre><code>def function_name(parameter: type) -&gt; return_type:\n    # code block\n</code></pre> Why Type Hints are Important<p>Type hints improve code readability and help others understand what types of arguments a function expects and what it returns. They also assist in catching type-related errors during development.</p> <p>Note, we are not changing anything about the function here. All we're doing is being more communicative about how the function should be used.</p> <p>Below are some examples of functions with type hints.</p>"},{"location":"learning_paths/Step_08/#example-1-adding-integers","title":"Example 1: Adding Integers","text":"<pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>This function is pretty simple, it takes two integers, adds them together, and returns an integer.</p>"},{"location":"learning_paths/Step_08/#example-2-concatenating-strings","title":"Example 2: Concatenating Strings","text":"<pre><code>def concatenate(str1: str, str2: str) -&gt; str:\n    return str1 + \" \" + str2\n\nresult = concatenate(\"Hello\", \"World\")\nprint(result)\n</code></pre> <p>\"Concatenate\" means to join two things together. In this case, two strings.</p> <p>This function takes two strings and returns a new string that is the concatenation of the two input strings.</p> String Concatenation<p>You can follow this link to see more about string concatenation in Python.</p>"},{"location":"learning_paths/Step_08/#example-3-checking-even-or-odd","title":"Example 3: Checking Even or Odd","text":"<p><pre><code>def is_even(number: int) -&gt; bool:\n    if number == 0:\n        return False \n    else:\n        return number % 2 == 0\n\nresult = is_even(4)\nprint(result)\n</code></pre> Note, we used this function before, all we've changes is that we now have type hints!</p>"},{"location":"learning_paths/Step_08/#what-when-we-feed-a-function-the-wrong-type","title":"What when we feed a function the wrong type?","text":"<pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n\nresult = add(\"3\", 5)  # This will produce an error...\n</code></pre> <p>This will raise a <code>TypeError</code> because we are trying to add a string and an integer, which is not allowed based on the type hints. In this case, it will also functionally break the code.</p> <p>The type error will look like this: <pre><code>TypeError: can only concatenate str (not \"int\") to str\n</code></pre></p> <p>Note, if you fed the <code>add()</code> function a float, even though it breaks the Type Hint, the code will still run. This is because Python is a \"dynamically typed language\", and it will try to do the operation you're asking it to do and only break if it can't.</p> <p>So, Type Hints are not a \"hard rule\" in Python, but they are a great idea to follow because code is read more often than it is written.</p>"},{"location":"learning_paths/Step_08/#using-a-loop-within-a-function","title":"Using a Loop within a Function","text":"<p>You can use loops within functions to perform repetitive tasks.</p>"},{"location":"learning_paths/Step_08/#example-summing-numbers","title":"Example: Summing Numbers","text":"<pre><code>def sum_numbers(n: int) -&gt; int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\nresult = sum_numbers(10)\nprint(result)\n</code></pre> <p>The example above takes in an integer <code>n</code> and returns the sum of all numbers from 1 to <code>n</code>. It uses the range function to generate a sequence of numbers from 1 to <code>n</code> - remember that range doesn't include the last number, so we add 1 to <code>n</code> + 1 so that we include <code>n</code> in the sum.</p>"},{"location":"learning_paths/Step_08/#combining-functions-with-conditionals","title":"Combining Functions with Conditionals","text":"<p>You can combine functions with conditionals to perform different actions based on conditions.</p>"},{"location":"learning_paths/Step_08/#example-filtering-even-numbers","title":"Example: Filtering Even Numbers","text":"<p>NOTE: For the function below, <code>is_even</code> is a function that we defined earlier in this document. That means if you've run the <code>is_even</code> function in your <code>.ipynb</code> already, then this code will work just fine. If you haven't, you'll need to run the code block containing <code>is_even</code> function before you run this code.</p> <pre><code>def filter_even(numbers: list[int]) -&gt; list[int]:\n    even_numbers = []\n    for number in numbers:\n        if is_even(number):\n            even_numbers.append(number)\n    return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even(numbers)\nprint(result)\n</code></pre> <p>This above function is great! It contains a loop that iterates over a list of numbers and uses the <code>is_even</code> function to check if each number is even. If the number is even (here, we use a conditional!), it is added to a new list called <code>even_numbers</code>, which is then returned.</p> <p>This function combines a lot of what we've learned so far!</p>"},{"location":"learning_paths/Step_08/#review","title":"Review","text":"<p>In this step, we reinforced our understanding of functions by exploring:</p> <ul> <li>Simple Function: Creating and using a basic function.</li> <li>Using a Function in a Loop: Applying a function within a loop.</li> <li>Functions with Various Data Types: Working with different data types and return values.</li> <li>Introducing Type Hints: Specifying expected data types for function parameters and return values.</li> <li>Using a Loop within a Function: Performing repetitive tasks within a function.</li> <li>Combining Functions with Conditionals: Using conditionals within functions to perform different actions.</li> </ul> <p>Understanding these concepts is essential for writing robust and flexible code in Python.</p>"},{"location":"learning_paths/Step_08/#exercises","title":"Exercises","text":"<p>Rememeber: The solutions I provide are only one way to solve the problem. There are many ways to solve most coding problems! You should feel free to experiment and try different approaches.</p> <ol> <li> <p>Type Hints: Write a function called <code>concat</code> that takes two strings as parameters and returns their concatenation. Use type hints to specify the parameter and return types.</p> Solution<pre><code>def concat(str1: str, str2: str) -&gt; str:\n    return str1 + \" \" + str2\n\nresult = concat(\"Hello\", \"World\")\nprint(result)\n</code></pre> </li> <li> <p>Sum of Squares: Write a function called <code>sum_of_squares</code> that takes an integer <code>n</code> and returns the sum of the squares of all numbers from 1 to <code>n</code>.</p> Solution<pre><code>def sum_of_squares(n: int) -&gt; int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 2\n    return total\n\nresult = sum_of_squares(5)\nprint(result)\n</code></pre> </li> <li> <p>Count Vowels: Write a function called <code>count_vowels</code> that takes a string as a parameter and returns the number of vowels in the string. Use a loop to iterate over the string and count the vowels.</p> Solution<pre><code>def count_vowels(s: str) -&gt; int:\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nresult = count_vowels(\"Hello, World!\")\nprint(result)\n</code></pre> </li> <li> <p>Find Minimum: Write a function called <code>find_min</code> that takes a list of integers and returns the smallest number in the list. Use a loop to iterate over the list and find the minimum value.</p> Solution<pre><code>def find_min(numbers: list[int]) -&gt; int:\n    min_number = numbers[0]\n    for number in numbers:\n        if number &lt; min_number:\n            min_number = number\n    return min_number\n\nnumbers = [5, 3, 8, 1, 9, 2]\nresult = find_min(numbers)\nprint(result)\n</code></pre> </li> <li> <p>Palindrome Check: Write a function called <code>is_palindrome</code> that takes a string and returns <code>True</code> if the string is a palindrome (reads the same forwards and backwards) and <code>False</code> otherwise. Use a loop to check the characters.</p> Solution<pre><code>def is_palindrome(input_string: str) -&gt; bool:\n    input_string = input_string.lower() # This line makes it so we don't have to worry about capital letters.\n    reversed_input_string = input_string[::-1]\n    return input_string == reversed_input_string\n\nresult1 = is_palindrome(\"radar\")\nresult2 = is_palindrome(\"hello\")\nprint(result1)\nprint(result2)\n</code></pre> </li> </ol>"},{"location":"learning_paths/Step_08/#bonus-lambda-functions-one-line-functions","title":"Bonus: Lambda Functions (One-Line Functions)","text":"<p>Lambda functions are small functions defined using the <code>lambda</code> keyword. They are often used for short, simple operations.</p> <p>These are called \"anonymous functions\" because they don't have a name, we don't define (\"<code>def</code>\") them. They are useful when you need a simple function for a short period of time.</p>"},{"location":"learning_paths/Step_08/#syntax_1","title":"Syntax","text":"<p>Note, the text below is a template, not real code: <pre><code>lambda parameters: expression\n</code></pre></p>"},{"location":"learning_paths/Step_08/#example-squaring-a-number","title":"Example: Squaring a Number","text":"<pre><code>square = lambda x: x * x\nprint(square(5))\n</code></pre>"},{"location":"learning_paths/Step_08/#example-using-lambda-with-filter","title":"Example: Using Lambda with <code>filter</code>","text":"<p><pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)\n</code></pre> of course, the above code has the 0 edge case... but hopefully this gives you an idea.</p>"},{"location":"learning_paths/Step_08/#bonus-excercise-using-lambda-functions","title":"Bonus Excercise: Using Lambda Functions","text":"<ol> <li> <p>Filtering Odd Numbers: Use a lambda function with the <code>filter</code> function to filter out odd numbers from a list of integers.</p> Solution<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = list(filter(lambda x: x % 2 != 0, numbers))\nprint(odd_numbers)\n</code></pre> </li> <li> <p>Adding \"1\": With a super simple lambda function, add 1 to a number.</p> Solution<pre><code>add_one = lambda x: x + 1\nprint(add_one(5))\n</code></pre> </li> </ol>"},{"location":"learning_paths/Step_09/","title":"Step 9","text":"<p>In Step 9, we will focus on debugging Python code using Visual Studio Code (VSCode) and Jupyter Notebooks (<code>.ipynb</code> files). Debugging is an essential skill for any programmer, as it helps identify and fix errors in the code.</p> <p>Note: This is the kind of thing that it really helps to watch someone demonstrate what debugging looks like. I've done my best to include images, but attending class and asking questions is uniquely important for this Step.</p>"},{"location":"learning_paths/Step_09/#introduction-to-debugging","title":"Introduction to Debugging","text":"<p>Debugging is the process of finding and fixing errors or \"bugs\" in your code. Bugs can be syntax errors, runtime errors, or logical errors. Understanding how to debug effectively will save you time and frustration.</p> Why \"bug\"?<p>The term \"bug\" originated in the early days of computing when an actual insect (a moth) caused a malfunction in a computer. Since then, the term has been used to describe any unexpected behavior in software.</p>"},{"location":"learning_paths/Step_09/#types-of-errors","title":"Types of Errors","text":"<ol> <li>Syntax Errors: These occur when the code is not written correctly according to the language's rules. For example, missing a colon at the end of an <code>if</code> statement (Trent does this all the time...).</li> <li>Runtime Errors: These occur when the code is executed and something goes wrong, such as dividing by zero.</li> <li>Logical Errors: These occur when the code runs without crashing - in other words, telling you that something is wrong - but produces incorrect results. These are often the hardest to find.</li> </ol>"},{"location":"learning_paths/Step_09/#debugging-in-vscode","title":"Debugging in VSCode","text":"<p>VSCode provides powerful tools for debugging Python code, including support for Jupyter Notebooks. Here are the steps to debug a <code>.ipynb</code> file in VSCode.</p>"},{"location":"learning_paths/Step_09/#setting-up-the-debugger","title":"Setting Up the Debugger","text":"<ol> <li>Open VSCode: Make sure you have VSCode installed and open it.</li> <li>Install Python Extension: If you haven't already, install the Python extension for VSCode.</li> <li>Open Your Notebook: Open the <code>.ipynb</code> file you want to debug.</li> </ol>"},{"location":"learning_paths/Step_09/#using-breakpoints","title":"Using Breakpoints","text":"<p>Breakpoints allow you to pause the execution of your code at specific lines, so you can inspect the state of your program.</p> <ol> <li> <p>Set a Breakpoint: Click in the gutter (the space to the left of the line numbers) next to the line where you want to set a breakpoint. A red dot will appear.</p> <ul> <li> <p>The \"Gutter\" is the region to the left of the line numbers in the editor. </p> </li> <li> <p>Hover your mouse over the gutter to see the breakpoint icon. </p> </li> <li> <p>Click the dimmed breakpoint icon to set a breakpoint. </p> </li> <li> <p>Click the down arrow near the play button for the cell, and you will see the option to \"Debug Cell\" </p> </li> <li> <p>When you see the line highlighted in yellow, you have successfully set a breakpoint and you're now in debug mode! </p> </li> </ul> </li> <li> <p>Start Debugging: Now, you can walk through your code line by line. You can use the buttons in the debug toolbar to continue, step into, over, out, restart, or disconnect the debugger (symbols from left to right in image above).</p> <ul> <li>The \"Continue\" button will run the code until the next breakpoint.</li> <li>The \"Step Over\" button will run the next line of code.</li> <li>The \"Step Into\" button will go into the next function call.</li> <li>The \"Step Out\" button will run until the current function returns.</li> <li>The \"Restart\" button will restart the debugger.</li> <li>The \"Disconnect\" button will stop the debugger.</li> </ul> </li> <li> <p>Inspect Variables: When the code execution pauses at a breakpoint, you can hover over variables to see their current values or use the Variables pane to inspect them.</p> <ul> <li>To the left of the notebook, you will see the \"Variables\" tab. Click on it to see the variables in the current scope.</li> <li> <p>Note: in a Jupyter Notebook, the first time you run through the cell, your variables wont be identified yet, but they will be after the first run through. This means that if your code relies on a variable that is defined in a specific sequence, you'll need to restart the kernel and run the cell again. </p> </li> <li> <p>You can also check variables and test code in the debug console (located at the bottom of VSCode). This is a great and useful way to test code without having to run the entire cell again or update your notebook. </p> </li> </ul> </li> </ol>"},{"location":"learning_paths/Step_09/#reading-error-outputs","title":"Reading Error Outputs","text":"<p>When an error occurs, VSCode will display an error message in the terminal or output pane. Understanding these messages is crucial for debugging.</p> <ol> <li>Error Message: The error message will tell you what went wrong and where it happened. For example, <code>ZeroDivisionError: division by zero</code> indicates that you tried to divide a number by zero.</li> <li>Traceback: The traceback shows the sequence of function calls that led to the error. This can help you pinpoint where the error occurred in your code.</li> </ol>"},{"location":"learning_paths/Step_09/#using-f-strings","title":"Using F-Strings","text":"<p>While Debugging, \"F-strings\" (formatted string literals) are a more readable and concise way to include variable values in your print statements. They were introduced in Python 3.6 and have become a popular way to format strings.</p>"},{"location":"learning_paths/Step_09/#example-using-f-strings","title":"Example: Using F-Strings","text":"<p>Let's rewrite the previous example using f-strings.</p>"},{"location":"learning_paths/Step_09/#example-code","title":"Example Code","text":"<pre><code>number = 10\nprint(f\"Initial number: {number}\")\n\n# Perform an operation\nnumber += 5\nprint(f\"After adding 5: {number}\")\n\n# Perform another operation\nnumber *= 2\nprint(f\"After multiplying by 2: {number}\")\n</code></pre>"},{"location":"learning_paths/Step_09/#reflection","title":"Reflection","text":"<ul> <li>How does the use of f-strings improve the readability of the code?</li> <li>Did you find it easier to understand the output with f-strings?</li> </ul>"},{"location":"learning_paths/Step_09/#exercises","title":"Exercises","text":"<p>Now, let's practice debugging with some exercises. Each exercise contains code with intentional errors. Your task is to find and fix the errors.</p>"},{"location":"learning_paths/Step_09/#exercise-1-syntax-error","title":"Exercise 1: Syntax Error","text":"<p>Goal: Find and fix the syntax error.</p> <pre><code>def greet(name)\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\n</code></pre> Hint<p>Look for missing punctuation.</p>"},{"location":"learning_paths/Step_09/#exercise-2-runtime-error","title":"Exercise 2: Runtime Error","text":"<p>Goal: Read and understand the error.</p> <pre><code>def divide(a, b):\n    return a / b\n\nresult = divide(10, 0)\nprint(result)\n</code></pre> Hint<p>Think about what happens when you divide by zero.</p>"},{"location":"learning_paths/Step_09/#exercise-3-logical-error","title":"Exercise 3: Logical Error","text":"<p>Goal: Fix the logical error in the code.</p> <pre><code>def is_even(number):\n    return number % 2 == 1\n\nresult = is_even(4)\nprint(f\"Is 4 even? {result}\")\n</code></pre> Hint<p>This code functions, but isn't working properly. </p> <p>Check the logic used to determine if a number is even - does this make sense?</p>"},{"location":"learning_paths/Step_09/#exercise-4-using-breakpoints","title":"Exercise 4: Using Breakpoints","text":"<p>Goal: Practice setting breakpoints and inspecting variables.</p> <pre><code>def sum_list(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = sum_list(numbers)\nprint(f\"The sum of the list is: {result}\")\n</code></pre> Hint<p>Set a breakpoint inside the loop and inspect the value of <code>total</code> at each iteration.</p> <p>You've likely funtionally done this with print statements before, but this is a more efficient and less permanent way to do it.</p> <p>If you want to get a little fancy, try adding an f-string after the <code>total += number</code> line to print the value of the total -- notice how you can get similar information without having to set a breakpoint.</p>"},{"location":"learning_paths/Step_09/#exercise-5-reading-error-outputs","title":"Exercise 5: Reading Error Outputs","text":"<p>Goal: Read, understand, and fix the (new) error.</p> <pre><code>def get_item(lst, index):\n    return lst[index]\n\nmy_list = [1, 2, 3]\nresult = get_item(my_list, 5)\nprint(result)\n</code></pre> Hint<p>Carefully read the error message and traceback to understand what went wrong. If you don't understand the error, try asking Microsoft Copilot what the error means :) If that doesn't help, ask the professor!</p>"},{"location":"learning_paths/Step_09/#reflect","title":"Reflect","text":"<p>Think about how debugging can help you understand your code better and improve your problem-solving skills. What strategies can you use to debug more effectively?</p>"},{"location":"learning_paths/Step_09/#review","title":"Review","text":"<p>In this step, we learned about:</p> <ul> <li>Different types of errors: syntax, runtime, and logical errors.</li> <li>Setting up the debugger in VSCode.</li> <li>Using breakpoints to pause code execution and inspect variables.</li> <li>Reading and understanding error outputs.</li> </ul> <p>Understanding these concepts is essential for becoming a proficient programmer and writing reliable code.</p>"},{"location":"learning_paths/Step_09/#bonus","title":"Bonus","text":"<p>Because of time pressure, we can only spend on class day focused on debugging. I've created a bonus coding assignment that you can work on to practice - this will not be graded but you can ask me questions about it.</p> <p>You can download the file following this link: Debugging Bonus Assignment</p>"},{"location":"learning_paths/Step_10/","title":"Step 10","text":"<p>Welcome to Step 10, where we take a significant conceptual leap into Object-Oriented Programming (OOP). So far, you've been learning how to write Python code using variables, functions, loops, and control structures. Now, we will explore a new way of organizing and structuring your code: by using classes and objects.</p>"},{"location":"learning_paths/Step_10/#what-is-object-oriented-programming-oop","title":"What is Object-Oriented Programming (OOP)?","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm (a style or way of programming) based on the concept of \"objects.\" An object is an instance of a class, and a class defines the blueprint for that object.</p> <p>OOP focuses on using objects that have both data (also called attributes) and behaviors (also called methods). This is different from procedural programming, where you write sequences of instructions for the computer to follow.</p> <p>What is an instance?</p> <p>An instance is an individual object created from a class. When you define a class, you're creating a blueprint, but when you create an instance, you're making an actual object based on that blueprint.</p> <p>Instancing also happens when you define a variable, or a function. So when you assign a namespace to a class, you're creating an instance of that class.</p>"},{"location":"learning_paths/Step_10/#why-oop","title":"Why OOP?","text":"<p>OOP allows us to:</p> <ul> <li>Model real-world entities: You can represent things like students, books, or even psychology experiments as objects in your code.</li> <li>Organize and reuse code: Classes let us write modular and reusable code. Once you write a class, you can create multiple objects from it, each with its own unique data.</li> <li>Structure complex systems: As projects grow larger, OOP makes it easier to manage and structure the code.</li> </ul>"},{"location":"learning_paths/Step_10/#the-key-concepts-of-oop","title":"The Key Concepts of OOP","text":"<p>There are four fundamental concepts in OOP:</p> <ol> <li>Classes: A blueprint for creating objects. It defines a set of attributes and methods that the objects created from the class will have.</li> <li>Objects: An instance of a class. Each object can have its own data (attributes) and can perform actions (methods).</li> <li>Attributes: Data stored in an object. Think of these as characteristics of the object.</li> <li>Methods: Functions that belong to a class. These are actions the object can perform.</li> </ol> <p>Louder for the people in the back, what are Methods?</p> <p>It's written above - but methods are simply class specific functions. This is useful because you might want functions that reference attributes of the class. There will be demonstrations of this later on.</p>"},{"location":"learning_paths/Step_10/#classes-and-objects-in-python","title":"Classes and Objects in Python","text":"<p>In Python, you define a class using the <code>class</code> keyword, and you create objects from that class by calling it like a function. Let\u2019s take a look at an example:</p>"},{"location":"learning_paths/Step_10/#defining-a-class-and-creating-an-object","title":"Defining a Class and Creating an Object","text":"<pre><code># Defining a simple class called 'Person'\nclass Person:\n    # Constructor method (__init__) to initialize attributes\n    def __init__(self, name, age):\n        self.name = name  # Attribute\n        self.age = age  # Attribute\n\n    # Method to display information about the person\n    def introduce(self):\n        print(f\"Hi, my name is {self.name} and I am {self.age} years old.\")\n\n# Creating an object of the Person class\nperson1 = Person(\"Alice\", 30)\n\n# Using the object\u2019s method\nperson1.introduce()\n</code></pre>"},{"location":"learning_paths/Step_10/#whats-happening-in-the-code","title":"What\u2019s Happening in the Code?","text":"<ul> <li>class Person: This defines a new class called <code>Person</code>.</li> <li>__init__ method: This is a special method (also called a constructor) that runs when a new object is created. It initializes the object\u2019s attributes (<code>name</code> and <code>age</code>).</li> <li>self: Refers to the current instance of the class. It allows the object to reference its own attributes and methods.</li> <li>person1 = Person(\"Alice\", 30): This creates an object (an instance) of the <code>Person</code> class with the name \"Alice\" and age 30.</li> <li>person1.introduce(): Calls the method <code>introduce()</code> on the <code>person1</code> object, which prints out a message.</li> </ul>"},{"location":"learning_paths/Step_10/#key-concepts-in-oop-attributes-and-methods","title":"Key Concepts in OOP: Attributes and Methods","text":""},{"location":"learning_paths/Step_10/#attributes","title":"Attributes","text":"<p>Attributes are variables that belong to an object. They hold information about the object, and each object can have different values for its attributes.</p> <p>In the previous example, <code>name</code> and <code>age</code> are attributes of the <code>Person</code> class.</p>"},{"location":"learning_paths/Step_10/#methods","title":"Methods","text":"<p>Methods are functions that belong to an object. They define the behaviors of the object. For example, the <code>introduce</code> method is a behavior of the <code>Person</code> class, which allows the object to introduce itself.</p>"},{"location":"learning_paths/Step_10/#lets-build-more-complex-classes","title":"Let\u2019s Build More Complex Classes","text":""},{"location":"learning_paths/Step_10/#adding-more-attributes-and-methods","title":"Adding More Attributes and Methods","text":"<p>Let\u2019s create a class that represents a Car, with attributes for its brand, model, and year, and methods to start and stop the car.</p> <pre><code># Defining a Car class\nclass Car:\n    # Constructor method to initialize attributes\n    def __init__(self, brand, model, year):\n        self.brand = brand  # Attribute\n        self.model = model  # Attribute\n        self.year = year  # Attribute\n        self.is_running = False  # Attribute to track if the car is running\n\n    # Method to start the car\n    def start(self):\n        self.is_running = True\n        print(f\"The {self.year} {self.brand} {self.model} has started.\")\n\n    # Method to stop the car\n    def stop(self):\n        self.is_running = False\n        print(f\"The {self.year} {self.brand} {self.model} has stopped.\")\n\n# Creating an object of the Car class\nmy_car = Car(\"Toyota\", \"Camry\", 2020)\n\n# Starting the car\nmy_car.start()\n\n# Stopping the car\nmy_car.stop()\n</code></pre>"},{"location":"learning_paths/Step_10/#practice-create-your-own-class","title":"Practice: Create Your Own Class","text":"<p>Now it\u2019s your turn! Create a class to represent something from your daily life. It could be a Book, Laptop, or even a Pet. Your class should have:</p> <ul> <li>At least 3 attributes</li> <li>At least 2 methods</li> </ul>"},{"location":"learning_paths/Step_10/#example-exercise","title":"Example Exercise:","text":"<ol> <li>Define a class <code>Book</code> with attributes for title, author, and year.</li> <li>Add methods to display information about the book and check if it\u2019s available.</li> </ol> <p>Here\u2019s a starting point:</p> <pre><code># Your Task: Define a Book class and create objects from it\n\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.is_available = True\n\n    def display_info(self):\n        print(f\"'{self.title}' by {self.author} ({self.year})\")\n\n    def check_out(self):\n        if self.is_available:\n            self.is_available = False\n            print(f\"'{self.title}' has been checked out.\")\n        else:\n            print(f\"'{self.title}' is not available.\")\n\n    def return_book(self):\n        self.is_available = True\n        print(f\"'{self.title}' has been returned.\")\n\n# Example usage:\nbook1 = Book(\"1984\", \"George Orwell\", 1949)\nbook1.display_info()\nbook1.check_out()\nbook1.return_book()\n</code></pre>"},{"location":"learning_paths/Step_10/#reflection-why-oop-matters","title":"Reflection: Why OOP Matters","text":"<p>OOP is a powerful way to write code that models real-world objects and systems. It makes your code more modular, easier to maintain, and helps you think in terms of objects and actions rather than just sequences of instructions.</p> <p>As you move forward, keep practicing by identifying real-world objects you can model with classes and objects. This will help you internalize the concepts of OOP and become more comfortable with this new way of thinking about code!</p>"},{"location":"learning_paths/Step_10/#review","title":"Review","text":"<ul> <li>Classes are blueprints for creating objects.</li> <li>Objects are instances of classes.</li> <li>Attributes are characteristics of objects, while methods are actions that objects can perform.</li> <li>OOP helps model real-world entities and organize code more effectively.</li> </ul>"},{"location":"learning_paths/Step_11/","title":"Step 11","text":"<p>Welcome back! In Step 10, we introduced the fundamental concepts of Object-Oriented Programming (OOP) with Python classes and objects. In Step 11, we will dive deeper into these concepts to solidify your understanding and practical skills in OOP.</p>"},{"location":"learning_paths/Step_11/#review-of-python-classes-and-objects","title":"Review of Python Classes and Objects","text":""},{"location":"learning_paths/Step_11/#revisiting-the-__init__-method","title":"Revisiting the <code>__init__</code> Method","text":"<p>The <code>__init__</code> method is crucial in Python as it serves as the constructor for a class. It initializes the instance of the class with specific attributes. Let's revisit how to use <code>__init__</code> with different attributes.</p> <pre><code>class Person:\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n</code></pre>"},{"location":"learning_paths/Step_11/#practical-exercises","title":"Practical Exercises","text":""},{"location":"learning_paths/Step_11/#exercise-1-creating-a-person-class","title":"Exercise 1: Creating a Person Class","text":"<p>Create a <code>Person</code> class with attributes <code>name</code>, <code>age</code>, and <code>location</code>. Initialize these attributes using the <code>__init__</code> method.</p>"},{"location":"learning_paths/Step_11/#exercise-2-adding-methods-to-the-person-class","title":"Exercise 2: Adding Methods to the Person Class","text":"<p>Enhance the <code>Person</code> class by adding a method <code>update_location</code> to change the person's location and a method <code>display_profile</code> to print the person's information.</p> Solution<pre><code>class Person:\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n\n    def update_location(self, new_location):\n        self.location = new_location\n\n    def display_profile(self):\n        print(f\"Name: {self.name}, Age: {self.age}, Location: {self.location}\")\n</code></pre>"},{"location":"learning_paths/Step_11/#understanding-and-managing-class-and-instance-attributes","title":"Understanding and Managing Class and Instance Attributes","text":"<p>Let's discuss the difference between class attributes, which are shared across all instances, and instance attributes, which are unique to each instance.</p>"},{"location":"learning_paths/Step_11/#exercise-3-class-attribute-example","title":"Exercise 3: Class Attribute Example","text":"<p>Add a class attribute <code>population</code> to the <code>Person</code> class to keep count of all person instances created.</p> Solution<pre><code>class Person:\n    population = 0\n\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n        Person.population += 1\n</code></pre>"},{"location":"learning_paths/Step_11/#simple-methods-in-classes","title":"Simple Methods in Classes","text":"<p>Instance methods are functions defined inside a class and are used to define the behaviors of an instance.</p>"},{"location":"learning_paths/Step_11/#exercise-4-writing-an-instance-method","title":"Exercise 4: Writing an Instance Method","text":"<p>Write an instance method in the <code>Person</code> class that increments the person's age by one to celebrate their birthday (a <code>celebrate_birthday</code> method).</p> Solution<pre><code>class Person:\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n\n    def celebrate_birthday(self):\n        self.age += 1\n        print(f\"Happy Birthday {self.name}, you are now {self.age}!\")\n</code></pre> <p>You would call the <code>celebrate_birthday</code> method on a <code>Person</code> object to increment their age, like so:</p> <pre><code># Create a Person object\nalice = Person(\"Candice\", 25, \"Cincinnati Ohio\")\n\n# Celebrate Alice's birthday\nalice.celebrate_birthday()\n</code></pre>"},{"location":"learning_paths/Step_11/#introduction-to-simple-exception-handling-within-methods","title":"Introduction to Simple Exception Handling within Methods","text":"<p>Proper error handling is essential to prevent and manage exceptions in Python programs effectively.</p> <p>You can handle errors using the <code>try</code> and <code>except</code> blocks to catch exceptions and provide appropriate responses.</p> <p>Example in a \"toy\" function:</p> <pre><code>def divide(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print(\"Error: Division by zero is not allowed.\")\n    else:\n        print(f\"The result of the division is: {result}\")\n</code></pre> <p><code>try</code> and <code>except</code> blocks are used to catch exceptions. If an exception occurs within the <code>try</code> block, the code within the <code>except</code> block is executed. Implementing exception handling in class methods is similar to the example above, and we'll practice that in the exercise below.</p>"},{"location":"learning_paths/Step_11/#exercise-5-exception-handling-in-method","title":"Exercise 5: Exception Handling in Method","text":"<p>Implement a method in the <code>Person</code> class to set the person's age, which handles exceptions if a non-integer value is passed.</p> Potential Solution<pre><code>class Person:\n    def set_age(self, age):\n        try:\n            self.age = int(age)\n        except ValueError:\n            print(\"Please enter a valid integer for age.\")\n</code></pre>"},{"location":"learning_paths/Step_11/#class-composition","title":"Class Composition","text":""},{"location":"learning_paths/Step_11/#what-is-class-composition","title":"What is Class Composition?","text":"<p>Class composition is a fundamental concept in Object-Oriented Programming where a class is formed using references to one or more objects of other classes in order to build more complex functionalities. This is often described as a \u201chas-a\u201d relationship between the composite class and the component class. For example, a <code>Library</code> has a list of <code>Books</code>.</p>"},{"location":"learning_paths/Step_11/#why-use-class-composition","title":"Why Use Class Composition?","text":"<p>Using class composition allows you to combine simple objects to create more complex structures. It\u2019s a powerful method to manage complexity by breaking down problems into smaller, more manageable parts. Composition also helps in reusing code and keeping changes localized, as updating the behavior of composed objects can be done independently.</p>"},{"location":"learning_paths/Step_11/#exercise-6-creating-a-family-class-using-composition","title":"Exercise 6: Creating a Family Class Using Composition","text":"<p>Now that you understand what class composition involves, let\u2019s put this into practice. You will create a <code>Family</code> class that demonstrates class composition by including multiple <code>Person</code> objects. Think of a family as a group of people; this is the relationship you\u2019ll model where a <code>Family</code> object will contain several <code>Person</code> objects.</p>"},{"location":"learning_paths/Step_11/#task-description","title":"Task Description","text":"<ul> <li>Person Class</li> <li>Attributes: <code>name</code>, <code>age</code></li> <li>Methods:<ul> <li>A method to display person's details.</li> </ul> </li> </ul> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display_info(self):\n        print(f\"Name: {self.name}, Age: {self.age}\")\n</code></pre> <ul> <li>Family Class</li> <li>Attributes: <code>members</code> (a list that will store instances of the <code>Person</code> class)</li> <li>Methods:<ul> <li><code>add_member</code>: Adds a new person to the family.</li> <li><code>display_family</code>: Shows the information of all family members.</li> </ul> </li> </ul> <p>Your task is to define the <code>Family</code> class using the <code>Person</code> class as described above. Here\u2019s how you might start:</p> <pre><code>class Family:\n    def __init__(self):\n        self.members = []\n\n    def add_member(self, person):\n        self.members.append(person)\n        print(f\"Added: {person.display_info()}\")\n\n    def display_family(self):\n        print(\"Family Members:\")\n        for member in self.members:\n            member.display_info()\n</code></pre>"},{"location":"learning_paths/Step_11/#explanation","title":"Explanation","text":"<ul> <li>Person Class: This class represents an individual person with basic attributes like <code>name</code> and <code>age</code>.</li> <li>Family Class: This class uses composition by having a list of <code>Person</code> objects. It represents a family where each member is a <code>Person</code> instance. You can add members to the family and display all members' details.</li> </ul> <p>This exercise will help you understand how to use class composition to structure your Python code effectively, representing real-world relationships within your programs.</p>"},{"location":"learning_paths/Step_11/#wrap-up-and-review","title":"Wrap-Up and Review","text":"<p>We've covered a lot today! From enhancing our understanding of the <code>__init__</code> method to handling exceptions within class methods. It's crucial to get comfortable with these OOP basics as they form the foundation of more complex software development concepts.</p>"},{"location":"learning_paths/Step_11/#reflect","title":"Reflect","text":"<p>Consider how these OOP principles can be applied to other programming tasks. Perhaps think about a small project where you could use classes to organize your code better.</p>"},{"location":"learning_paths/Step_11/#further-reading-and-resources","title":"Further Reading and Resources","text":"<p>Look for online resources or books that delve deeper into Python OOP to expand your understanding and skills.</p> <p>Thank you for participating in today's session. Keep practicing, and don't hesitate to reach out with any questions as you continue your journey in Python programming!</p>"},{"location":"learning_paths/Step_12/","title":"Step 12","text":"<p>In Step 12, we will dive into two essential programming concepts: Modular Programming and File I/O (Input/Output). These concepts allow you to break down your code into manageable pieces and interact with files, which are crucial in scientific programming for saving and loading data.</p> <p>Up until now, we've focused on writing code in a single file. However, as your programs grow in complexity, it becomes challenging to manage everything in one place. Modular programming helps you organize your code into separate modules, making it easier to maintain and reuse.</p> <p>Using a <code>.py</code> File</p> <p>Up until this point, we've been using python of \"Jupyter\" Notebooks (<code>.ipynb</code>), however, most python code is written inside of a file without predefined code blocks. Notebooks with codeblocks are incredibly useful for learning how to program and learn how functions work; it is a tool that you will always want in your belt! However, when you are writing a program that you want to run on its own (without you \"pressing play\"), you will want to write it in a <code>.py</code> file.</p>"},{"location":"learning_paths/Step_12/#modular-programming","title":"Modular Programming","text":"<p>Modular programming refers to breaking down your code into smaller, reusable pieces called modules. This makes your code more organized, easier to maintain, and promotes reusability.</p>"},{"location":"learning_paths/Step_12/#why-use-modular-programming","title":"Why Use Modular Programming?","text":"<ul> <li>Code Reusability: Instead of writing the same code multiple times, you can write a function or a class once and use it across multiple programs or modules.</li> <li>Maintainability: By dividing the code into separate modules, it becomes easier to locate and fix bugs or add new features without affecting the entire program.</li> <li>Readability: Modular code is generally more readable and easier to follow, especially in large projects.</li> </ul>"},{"location":"learning_paths/Step_12/#creating-and-using-modules","title":"Creating and Using Modules","text":"<p>In Python, a module is simply a file that contains Python code. You can create a module by saving functions, classes, or variables in a <code>.py</code> file and then importing it into another file. </p> <p>To be clear, this is not in a Jupyter Notebook, but in a <code>.py</code> file - you can create a new file in VSCode and save it as <code>math_operations.py</code> and then write your functions in that file, below.</p>"},{"location":"learning_paths/Step_12/#example-creating-and-importing-a-module","title":"Example: Creating and Importing a Module","text":"<p>Let's create a simple module called <code>math_operations.py</code> that contains a few basic mathematical functions.</p> <p><code>math_operations.py</code>: <pre><code># This is a module that contains mathematical operations\n\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return \"Cannot divide by zero\"\n</code></pre></p> <p>Now, create a new python file in the same directory (folder). You can then import the <code>math_operations.py</code> module into this new Python file and use its functions:</p> <p>Using the <code>math_operations</code> module: <pre><code>import math_operations\n\nresult_add = math_operations.add(10, 5)\nresult_divide = math_operations.divide(10, 2)\n\nprint(f\"Addition Result: {result_add}\")\nprint(f\"Division Result: {result_divide}\")\n</code></pre></p>"},{"location":"learning_paths/Step_12/#importing-specific-functions","title":"Importing Specific Functions","text":"<p>You can also import specific functions from a module instead of the whole module.</p> <pre><code>from math_operations import add, divide\n\nresult_add = add(10, 5)\nresult_divide = divide(10, 2)\n\nprint(f\"Addition Result: {result_add}\")\nprint(f\"Division Result: {result_divide}\")\n</code></pre>"},{"location":"learning_paths/Step_12/#exercises-create-and-import-modules","title":"Exercises: Create and Import Modules","text":"<ol> <li>Create a <code>string_operations.py</code> module: <ul> <li>Define functions like <code>count_vowels</code> and <code>reverse_string</code>.</li> </ul> </li> <li>Import and use the module:<ul> <li>Write a Python script to use the functions from <code>string_operations.py</code> to process some input text.</li> </ul> </li> </ol>"},{"location":"learning_paths/Step_12/#file-io-input-and-output","title":"File I/O (Input and Output)","text":"<p>File I/O refers to the process of reading from and writing to files. In Python, file handling is done using built-in functions like <code>open()</code>, <code>read()</code>, and <code>write()</code>.</p>"},{"location":"learning_paths/Step_12/#working-with-files","title":"Working with Files","text":"<p>Python makes it easy to work with files using the <code>open()</code> function. When you open a file, you can choose different modes like:</p> <ul> <li>'r': Read mode (default) \u2013 Opens a file for reading.</li> <li>'w': Write mode \u2013 Opens a file for writing (creates a new file or overwrites an existing file).</li> <li>'a': Append mode \u2013 Opens a file for appending (adds new data at the end of the file).</li> <li>'r+': Read and write mode \u2013 Opens a file for both reading and writing.</li> </ul>"},{"location":"learning_paths/Step_12/#reading-from-a-file","title":"Reading from a File","text":"<p>The <code>read()</code> method reads the entire content of a file, and <code>readline()</code> reads one line at a time.</p>"},{"location":"learning_paths/Step_12/#example-reading-from-a-file","title":"Example: Reading from a File","text":"<p>Suppose we have a file called <code>data.txt</code> with the following content:</p> <p><code>data.txt</code>: <pre><code>Hello, this is a sample file.\nIt contains multiple lines.\nEach line has some text.\n</code></pre></p> <p>We can read this file using Python:</p> <p>Check your Directory</p> <p>Make sure the file you are trying to read is in the same directory as your Python script.</p> <pre><code># Open the file in read mode\nfile = open(\"data.txt\", \"r\")\n\n# Read the entire file\ncontent = file.read()\n\n# Close the file\nfile.close()\n\nprint(content)\n</code></pre>"},{"location":"learning_paths/Step_12/#writing-to-a-file","title":"Writing to a File","text":"<p>The <code>write()</code> method allows you to write content to a file. Be careful when using the write mode (<code>'w'</code>) as it will overwrite any existing content in the file.</p>"},{"location":"learning_paths/Step_12/#example-writing-to-a-file","title":"Example: Writing to a File","text":"<pre><code># Open the file in write mode\nfile = open(\"output.txt\", \"w\")\n\n# Write to the file\nfile.write(\"This is the first line.\\n\")\nfile.write(\"This is the second line.\\n\")\n\n# Close the file\nfile.close()\n</code></pre>"},{"location":"learning_paths/Step_12/#appending-to-a-file","title":"Appending to a File","text":"<p>The append mode (<code>'a'</code>) allows you to add content to the end of the file without overwriting the existing content.</p>"},{"location":"learning_paths/Step_12/#example-appending-to-a-file","title":"Example: Appending to a File","text":"<pre><code># Open the file in append mode\nfile = open(\"output.txt\", \"a\")\n\n# Append to the file\nfile.write(\"This is an appended line.\\n\")\n\n# Close the file\nfile.close()\n</code></pre>"},{"location":"learning_paths/Step_12/#using-with-to-handle-files","title":"Using <code>with</code> to Handle Files","text":"<p>It's a good practice to use the <code>with</code> statement when working with files. This automatically closes the file after the block of code is executed, even if an error occurs.</p>"},{"location":"learning_paths/Step_12/#example-using-with","title":"Example: Using <code>with</code>","text":"<pre><code># Using 'with' to open and read a file\nwith open(\"data.txt\", \"r\") as file:\n    content = file.read()\n\nprint(content)\n</code></pre> <p>The file will be automatically closed after the block of code inside <code>with</code> is executed.</p>"},{"location":"learning_paths/Step_12/#exercises-working-with-files","title":"Exercises: Working with Files","text":"<ol> <li>Read a file: Create a file called <code>my_data.txt</code> and write a Python script to read and print its contents.</li> <li>Write to a file: Write a Python script that writes user input to a file called <code>user_data.txt</code>.</li> <li>Append to a file: Modify the script to append new user input to <code>user_data.txt</code> without overwriting the existing content.</li> </ol>"},{"location":"learning_paths/Step_12/#reflect","title":"Reflect","text":"<p>Think about how modular programming and file I/O can help in scientific programming. Why might you want to break your code into modules? How could file I/O be useful in experiments or data analysis?</p>"},{"location":"learning_paths/Step_12/#review","title":"Review","text":"<p>In this step, we covered two important topics:</p> <ul> <li>Modular Programming: Breaking down code into reusable modules and importing them into other files.</li> <li>File I/O: Reading from and writing to files in Python.</li> </ul> <p>These concepts are essential for organizing your code and handling data efficiently in larger programming projects.</p>"},{"location":"learning_paths/Step_13/","title":"Step 13","text":"<p>In step 12, you were introduced to modular programming and file I/O (input/output) operations. In Step 13, we will continue to explore Modules and File Operations by combining them in a cohesive manner. We\u2019ll expand our knowledge of file handling, delve into advanced file operations, and use Python's built-in modules to work with both CSV and JSON formats. You\u2019ll also learn how to handle errors that may occur during file processing, ensuring your programs run smoothly.</p>"},{"location":"learning_paths/Step_13/#1-introduction-to-modules-and-file-operations","title":"1. Introduction to Modules and File Operations","text":"<p>In behavioral science and psychology, data collection is key. Working with datasets efficiently requires tools that let you organize and manage your code and data. Modules allow you to break down your code into reusable components, and File Operations enable you to save, retrieve, and process data stored in files.</p> <p>In this step, we\u2019ll combine modular programming with file operations, ensuring that your programs are well-structured and can handle data in multiple formats, such as CSV and JSON.</p>"},{"location":"learning_paths/Step_13/#2-importing-built-in-modules","title":"2. Importing Built-in Modules","text":"<p>Python provides various built-in modules that simplify tasks like interacting with files and directories. Let\u2019s start with the <code>os</code> module for working with your system\u2019s file structure.</p>"},{"location":"learning_paths/Step_13/#the-os-module","title":"The <code>os</code> Module","text":"<p>The <code>os</code> module provides functions for interacting with the operating system. You can use it to navigate directories, check if files exist, and even remove or rename files.</p>"},{"location":"learning_paths/Step_13/#example-using-os-to-work-with-files-and-directories","title":"Example: Using <code>os</code> to Work with Files and Directories","text":"<p>Here\u2019s how you can use the <code>os</code> module to interact with files and directories:</p> <pre><code>import os\n\n# Get the current working directory\ncurrent_directory = os.getcwd()\nprint(f\"Current Directory: {current_directory}\")\n\n# List all files in the current directory\nfiles = os.listdir(current_directory)\nprint(f\"Files: {files}\")\n\n# Check if a file exists\nif os.path.exists(\"data.txt\"):\n    print(\"The file 'data.txt' exists.\")\nelse:\n    print(\"The file 'data.txt' does not exist.\")\n</code></pre>"},{"location":"learning_paths/Step_13/#exercise-use-os-to-check-if-a-file-exists","title":"Exercise: Use <code>os</code> to Check if a File Exists","text":"<ul> <li>Write a Python script that checks if a file called <code>experiment_data.txt</code> exists in the current directory. If the file exists, read its contents; if not, print a message saying the file is missing.</li> </ul>"},{"location":"learning_paths/Step_13/#3-working-with-csv-files","title":"3. Working with CSV Files","text":"<p>In the behavioral sciences, data often comes in CSV (Comma Separated Values) format. The <code>csv</code> module in Python makes it easy to write (create) and read (work with) CSV files. </p> <p>CSV files are often used because they are simple, human-readable, and compatible with many data processing tools, such as Excel.</p>"},{"location":"learning_paths/Step_13/#writing-to-a-csv-file","title":"Writing to a CSV File","text":"<p>You can write data to a CSV file using the <code>csv.writer()</code> method. Here\u2019s how:</p> <pre><code>import csv\n\n# Data to write\ndata = [\n    ['Name', 'Age', 'Occupation'],\n    ['Alice', '29', 'Therapist'],\n    ['Bob', '34', 'Psychologist']\n]\n\n# Open a CSV file for writing\nwith open('occupation_data.csv', mode='w', newline='') as file:\n    csv_writer = csv.writer(file)\n\n    # Write each row to the CSV file\n    csv_writer.writerows(data)\n</code></pre>"},{"location":"learning_paths/Step_13/#reading-from-a-csv-file","title":"Reading from a CSV File","text":"<p>To read data from a CSV file, use the <code>csv.reader()</code> function:</p> <pre><code>import csv\n\n# Open the CSV file\nwith open('occupation_data.csv', mode='r') as file:\n    csv_reader = csv.reader(file)\n\n    # Loop through the rows in the CSV\n    for row in csv_reader:\n        print(row)\n</code></pre>"},{"location":"learning_paths/Step_13/#4-working-with-json-files","title":"4. Working with JSON Files","text":"<p>JSON (JavaScript Object Notation) is another popular format for storing structured data. It\u2019s easy to read and write, and closely resembles Python dictionaries. JSON is commonly used for storing data in web applications and APIs.</p>"},{"location":"learning_paths/Step_13/#writing-and-reading-json-files","title":"Writing and Reading JSON Files","text":"<p>You can use the <code>json</code> module to write and read JSON files.</p>"},{"location":"learning_paths/Step_13/#example-writing-and-reading-json","title":"Example: Writing and Reading JSON","text":"<pre><code>import json\n\n# Writing to a JSON file\ndata = {\"name\": \"Alice\", \"age\": 30, \"occupation\": \"Therapist\"}\nwith open(\"data.json\", \"w\") as file:\n    json.dump(data, file)\n\n# Reading from a JSON file\nwith open(\"data.json\", \"r\") as file:\n    data_loaded = json.load(file)\n    print(data_loaded)\n</code></pre>"},{"location":"learning_paths/Step_13/#5-handling-file-exceptions","title":"5. Handling File Exceptions","text":"<p>When working with files, errors such as a missing file or permission issues can occur. It\u2019s important to handle these exceptions to prevent your code from crashing.</p>"},{"location":"learning_paths/Step_13/#example-handling-file-errors","title":"Example: Handling File Errors","text":"<pre><code>try:\n    with open(\"nonexistent_file.txt\", \"r\") as file:\n        content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found.\")\nexcept PermissionError:\n    print(\"Error: Permission denied.\")\n</code></pre>"},{"location":"learning_paths/Step_13/#final-exercise-bringing-it-all-together","title":"Final Exercise: Bringing It All Together","text":"<p>Now that you've learned how to work with both CSV and JSON files, and handle file errors, let's put everything together. </p>"},{"location":"learning_paths/Step_13/#instructions","title":"Instructions:","text":"<ol> <li> <p>Create a Custom Module for File Operations:</p> <ul> <li>Create a <code>file_utils.py</code> file that contains functions for reading/writing both CSV and JSON files.</li> <li>Include error handling in this module to manage missing or corrupted files.</li> </ul> </li> <li> <p>Create a Class System for Data Collection:</p> <ul> <li>Create a Python script that defines two classes: <code>User</code> and <code>Survey</code>.<ul> <li>The <code>User</code> class should have attributes for <code>name</code>, <code>age</code>, and <code>profession</code>.</li> <li>The <code>Survey</code> class should manage a collection of <code>User</code> objects and provide methods for writing the data to both CSV and JSON formats.</li> </ul> </li> </ul> </li> <li> <p>File Operations:</p> <ul> <li>Collect user data and save it to both a CSV and a JSON file using your <code>file_utils.py</code> functions.</li> <li>Implement a function to load the saved data back into your program from either format (CSV or JSON) and print it to the console.</li> </ul> </li> <li> <p>Exception Handling:</p> <ul> <li>Ensure that your program handles errors gracefully if the file does not exist or is corrupted.</li> <li>If the program fails to load the CSV or JSON file, it should print a user-friendly error message.</li> </ul> </li> </ol> <p>Practice for your Written Assessment</p> <p>To practice for the written assessment, outline how you would solve this problem before you start your implementation. You can write out your solution on a piece of paper or in your text editor of choice (Google/Word Doc, etc.). Be as detailed as you can manage. Once you're done with this, then use your outline to implement the solution - how close were you? What did you forget? Answering these questions will help you prepare for the written assessment!</p> Potential Solution<ol> <li> <p>file_utils.py: <pre><code>import os\nimport csv\nimport json\n\ndef file_exists(file_path):\n    return os.path.exists(file_path)\n\ndef read_json(file_path):\n    try:\n        with open(file_path, \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(f\"Error: {file_path} not found.\")\n    except json.JSONDecodeError:\n        print(f\"Error: Could not decode {file_path}.\")\n\ndef write_json(file_path, data):\n    with open(file_path, \"w\") as file:\n        json.dump(data, file)\n\ndef read_csv(file_path):\n    try:\n        with open(file_path, \"r\") as file:\n            return list(csv.reader(file))\n    except FileNotFoundError:\n        print(f\"Error: {file_path} not found.\")\n\ndef write_csv(file_path, data):\n    with open(file_path, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n</code></pre></p> </li> <li> <p>survey.py: <pre><code>from file_utils import write_csv, write_json\n\nclass User:\n    def __init__(self, name, age, profession):\n        self.name = name\n        self.age = age\n        self.profession = profession\n\nclass Survey:\n    def __init__(self):\n        self.users = []\n\n    def add_user(self, user):\n        self.users.append(user)\n\n    def save_data(self, csv_file, json_file):\n        data = [[user.name, user.age, user.profession] for user in self.users]\n        write_csv(csv_file, data)\n        write_json(json_file, data)\n\nsurvey = Survey()\nuser1 = User('Alice', 29, 'Therapist')\nuser2 = User('Bob', 34, 'Psychologist')\nsurvey.add_user(user1)\nsurvey.add_user(user2)\nsurvey.save_data('user_data.csv', 'user_data.json')\n</code></pre></p> </li> </ol>"},{"location":"learning_paths/Step_13/#reflect-and-review","title":"Reflect and Review","text":"<p>At this point, you should understand how to combine modular programming and file operations to handle data in CSV and JSON formats. You\u2019ve also learned how to handle file-related errors to ensure your program runs smoothly even when issues arise.</p> <p>Reflect on how you can apply these skills in real-world behavioral science research. Handling data in various formats is crucial for data analysis and collaboration. Moreover, using modular programming makes your code more maintainable, reusable, and easier to debug.</p>"},{"location":"learning_paths/Step_14/","title":"Step 14","text":"<p>In Step 14, we will explore four of the most common data structures in Python: Lists, Tuples, Dictionaries, and Sets. These data structures are essential for organizing and storing data efficiently, and you will frequently encounter them in any kind of data analysis, especially in behavioral science research.</p> <p>Let\u2019s dive into each one and understand how to use them in Python!</p>"},{"location":"learning_paths/Step_14/#1-introduction-to-python-data-structures","title":"1. Introduction to Python Data Structures","text":"<p>Python offers a variety of ways to store and organize data. Each structure has its own use cases and advantages. In this step, we will cover:</p> <ul> <li>Lists: Ordered, mutable collections of items.</li> <li>Tuples: Ordered, immutable collections of items.</li> <li>Dictionaries: Key-value pairs for efficient data lookup.</li> <li>Sets: Unordered collections of unique elements.</li> </ul> <p>We\u2019ll discuss each one in detail, provide code examples, and give you exercises to help solidify your understanding.</p>"},{"location":"learning_paths/Step_14/#2-working-with-lists","title":"2. Working with Lists","text":""},{"location":"learning_paths/Step_14/#what-are-lists","title":"What Are Lists?","text":"<p>A list is an ordered collection of items (elements). Lists are mutable, which means that the elements can be changed after the list is created. You can add, remove, and modify elements in a list.</p>"},{"location":"learning_paths/Step_14/#example-creating-and-modifying-lists","title":"Example: Creating and Modifying Lists","text":"<pre><code># Creating a list of participants\nparticipants = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\n# Accessing elements in a list\nprint(participants[0])  # Output: Alice\n\n# Modifying elements in a list\nparticipants[1] = \"Barbara\"\nprint(participants)  # Output: ['Alice', 'Barbara', 'Charlie', 'David']\n\n# Adding new elements to the list\nparticipants.append(\"Eve\")\nprint(participants)  # Output: ['Alice', 'Barbara', 'Charlie', 'David', 'Eve']\n\n# Removing an element from the list\nparticipants.remove(\"Charlie\")\nprint(participants)  # Output: ['Alice', 'Barbara', 'David', 'Eve']\n</code></pre>"},{"location":"learning_paths/Step_14/#list-methods","title":"List Methods","text":"<p>Here are a few useful methods you can use with lists:</p> <ul> <li><code>append()</code>: Adds an element to the end of the list.</li> <li><code>remove()</code>: Removes the first occurrence of an element from the list.</li> <li><code>sort()</code>: Sorts the list in place.</li> <li><code>len()</code>: Returns the length of the list.</li> </ul>"},{"location":"learning_paths/Step_14/#exercise-working-with-lists","title":"Exercise: Working with Lists","text":"<ol> <li>Create a List: Create a list of 5 favorite hobbies.</li> <li>Modify the List: Add a new hobby to the list, then remove the second hobby from the list.</li> <li>Print and Sort: Print the final list and sort it alphabetically.</li> </ol>"},{"location":"learning_paths/Step_14/#3-working-with-tuples","title":"3. Working with Tuples","text":""},{"location":"learning_paths/Step_14/#what-are-tuples","title":"What Are Tuples?","text":"<p>A tuple is similar to a list, but it is immutable, meaning that once a tuple is created, its elements cannot be changed. Tuples are useful when you want to store a collection of items that should not be modified.</p>"},{"location":"learning_paths/Step_14/#example-creating-and-accessing-tuples","title":"Example: Creating and Accessing Tuples","text":"<pre><code># Creating a tuple\ncoordinates = (10, 20)\n\n# Accessing elements in a tuple\nprint(coordinates[0])  # Output: 10\n\n# Tuples are immutable, so you cannot modify them\n# The following line would raise an error:\n# coordinates[0] = 15  # Uncommenting this will raise a TypeError\n\n# You can create a tuple with a single element by adding a comma at the end\nsingle_element_tuple = (42,)\nprint(single_element_tuple)  # Output: (42,)\n</code></pre> <p>Tuple Syntax</p> <p>Notice that Tuples are created using parentheses <code>()</code> and elements are separated by commas, where as Lists are created using square brackets <code>[]</code>. This distinction is important to remember when working with these data structures!</p>"},{"location":"learning_paths/Step_14/#when-to-use-tuples","title":"When to Use Tuples","text":"<ul> <li>Use a tuple when you have a collection of items that should not change.</li> <li>Tuples are often used to represent fixed collections, such as geographical coordinates or RGB color values.</li> </ul>"},{"location":"learning_paths/Step_14/#exercise-working-with-tuples","title":"Exercise: Working with Tuples","text":"<ol> <li>Create a Tuple: Create a tuple that contains your birthdate (day, month, year).</li> <li>Access Elements: Print the day, month, and year individually by accessing the tuple elements.</li> <li>Experiment: Try modifying the tuple (and note why it doesn\u2019t work).</li> </ol>"},{"location":"learning_paths/Step_14/#4-working-with-dictionaries","title":"4. Working with Dictionaries","text":""},{"location":"learning_paths/Step_14/#what-are-dictionaries","title":"What Are Dictionaries?","text":"<p>A dictionary is a collection of key-value pairs. Each key is associated with a value, and you can use the key to quickly access the corresponding value. Dictionaries are mutable, so you can change the values associated with keys after the dictionary is created.</p>"},{"location":"learning_paths/Step_14/#example-creating-and-using-dictionaries","title":"Example: Creating and Using Dictionaries","text":"<pre><code># Creating a dictionary to store survey responses\nsurvey_responses = {\n    \"Alice\": 5,\n    \"Bob\": 7,\n    \"Charlie\": 6\n}\n\n# Accessing a value by its key\nprint(survey_responses[\"Bob\"])  # Output: 7\n\n# Modifying a value\nsurvey_responses[\"Bob\"] = 8\nprint(survey_responses)  # Output: {'Alice': 5, 'Bob': 8, 'Charlie': 6}\n\n# Adding a new key-value pair\nsurvey_responses[\"David\"] = 9\nprint(survey_responses)  # Output: {'Alice': 5, 'Bob': 8, 'Charlie': 6, 'David': 9}\n\n# Removing a key-value pair\ndel survey_responses[\"Charlie\"]\nprint(survey_responses)  # Output: {'Alice': 5, 'Bob': 8, 'David': 9}\n</code></pre>"},{"location":"learning_paths/Step_14/#dictionary-methods","title":"Dictionary Methods","text":"<ul> <li><code>keys()</code>: Returns a list of all keys in the dictionary.</li> <li><code>values()</code>: Returns a list of all values in the dictionary.</li> <li><code>items()</code>: Returns a list of key-value pairs (tuples).</li> </ul>"},{"location":"learning_paths/Step_14/#example-using-dictionary-methods","title":"Example: Using Dictionary Methods","text":"<pre><code># Getting all keys in the dictionary\nprint(survey_responses.keys())  # Output: dict_keys(['Alice', 'Bob', 'David'])\n\n# Getting all values in the dictionary\nprint(survey_responses.values())  # Output: dict_values([5, 8, 9])\n\n# Getting key-value pairs as tuples\nprint(survey_responses.items())  # Output: dict_items([('Alice', 5), ('Bob', 8), ('David', 9)])\n</code></pre>"},{"location":"learning_paths/Step_14/#exercise-working-with-dictionaries","title":"Exercise: Working with Dictionaries","text":"<ol> <li>Create a Dictionary: Create a dictionary with the names of three friends and their favorite colors.</li> <li>Modify the Dictionary: Change one friend's favorite color and add a new friend with their favorite color. <p>Hint, use the <code>update()</code> method (this is a clickable link) to add a new key-value pair to the dictionary as well as to update an existing key-value pair.</p> </li> <li>Print and Access: Print the dictionary and access the favorite color of one of your friends.</li> </ol>"},{"location":"learning_paths/Step_14/#5-working-with-sets","title":"5. Working with Sets","text":""},{"location":"learning_paths/Step_14/#what-are-sets","title":"What Are Sets?","text":"<p>A set is an unordered collection of unique elements. Sets are useful when you want to store items without duplicates and don't care about the order of the elements. Sets are mutable, but you cannot access elements by index like in lists.</p> <p>Online resource for sets can be found here</p>"},{"location":"learning_paths/Step_14/#example-creating-and-using-sets","title":"Example: Creating and Using Sets","text":"<pre><code># Creating a set of participants\nparticipants = {\"Alice\", \"Bob\", \"Charlie\", \"David\"}\n\n# Adding a new element to the set\nparticipants.add(\"Eve\")\nprint(participants)  # Output: {'Alice', 'Bob', 'Charlie', 'David', 'Eve'}\n\n# Trying to add a duplicate element (it will have no effect)\nparticipants.add(\"Alice\")\nprint(participants)  # Output: {'Alice', 'Bob', 'Charlie', 'David', 'Eve'}\n\n# Removing an element from the set\nparticipants.remove(\"David\")\nprint(participants)  # Output: {'Alice', 'Bob', 'Charlie', 'Eve'}\n</code></pre>"},{"location":"learning_paths/Step_14/#set-operations","title":"Set Operations","text":"<ul> <li><code>add()</code>: Adds an element to the set.</li> <li><code>remove()</code>: Removes an element from the set.</li> <li><code>union()</code>: Returns a new set containing all elements from two sets (without duplicates).</li> <li><code>intersection()</code>: Returns a new set containing only elements found in both sets.</li> </ul>"},{"location":"learning_paths/Step_14/#exercise-working-with-sets","title":"Exercise: Working with Sets","text":"<ol> <li>Create a Set: Create a set of favorite fruits.</li> <li>Add Elements: Add a new fruit to the set and attempt to add a duplicate fruit.</li> <li>Perform Set Operations: Create a second set of fruits and find the union and intersection of the two sets.</li> </ol>"},{"location":"learning_paths/Step_14/#6-final-exercise-working-with-data-structures","title":"6. Final Exercise: Working with Data Structures","text":"<p>Now that you\u2019ve learned about lists, tuples, dictionaries, and sets, let's wrap up with a final exercise that brings these concepts together.</p>"},{"location":"learning_paths/Step_14/#instructions","title":"Instructions:","text":"<ol> <li> <p>Create a Class System for Participants:</p> <ul> <li>Create a <code>Participant</code> class that stores the name, age, and favorite hobby of each participant.</li> <li>Use a list to store a collection of <code>Participant</code> objects.</li> </ul> </li> <li> <p>Store Data in a Dictionary:</p> <ul> <li>Create a dictionary where the keys are participant names and the values are tuples containing their age and favorite hobby.</li> </ul> </li> <li> <p>Use a Set for Unique Hobbies:</p> <ul> <li>Extract all unique hobbies from the participants and store them in a set.</li> </ul> </li> <li> <p>Final Output:</p> <ul> <li>Print the list of participants.</li> <li>Print the dictionary mapping names to participant details.</li> <li>Print the set of unique hobbies.</li> </ul> </li> </ol> <p>Practice for your Written Assessment</p> <p>To practice for the written assessment, outline how you would solve this problem before you start your implementation. You can write out your solution on a piece of paper or in your text editor of choice (Google/Word Doc, etc.). Be as detailed as you can manage. Once you're done with this, then use your outline to implement the solution - how close were you? What did you forget? Answering these questions will help you prepare for the written assessment!</p> Potential Solution<pre><code>class Participant:\n    def __init__(self, name, age, hobby):\n        self.name = name\n        self.age = age\n        self.hobby = hobby\n\n# List to store participants\nparticipants = [\n    Participant(\"Alice\", 29, \"Reading\"),\n    Participant(\"Bob\", 34, \"Cycling\"),\n    Participant(\"Charlie\", 27, \"Reading\"),\n    Participant(\"David\", 31, \"Swimming\")\n]\n\nprint(participants)\n\n# create an empty dictionary\nparticipant_dict = {}\n\n# Dictionary to map participant names to their age and hobby\nfor participant in participants:\n    participant_dict[participant.name] = {\"age\": participant.age, \"hobby\": participant.hobby}\n\n# Print the list of participants, `\\n` is used to print a new line\nprint(f\"participant_dict: \\n {participant_dict}\")\n</code></pre> <p>Loop through the dictionary to extract unique hobbies and store them in a set:</p> <pre><code># Set to store unique hobbies\nunique_hobbies = set()\n\nfor details in participant_dict.values():\n    unique_hobbies.add(details['hobby'])\n\nprint(f\"unique_hobbies: \\n {unique_hobbies}\")\n#Expected Output:\n# {'Reading', 'Cycling', 'Swimming'}\n</code></pre> <p>Alternatively, loop through the list of participants to extract unique hobbies:</p> <pre><code># Set to store unique hobbies\nunique_hobbies = set()\n\nfor participant in participants:\n    unique_hobbies.add(participant.hobby)\n\nprint(f\"unique_hobbies: \\n {unique_hobbies}\")\n</code></pre>"},{"location":"learning_paths/Step_14/#7-reflect-and-review","title":"7. Reflect and Review","text":"<p>In this step, we covered four essential Python data structures:</p> <ul> <li>Lists: Ordered, mutable collections of items, which are ideal for managing an ordered set of data that might need to be modified.</li> <li>Tuples: Ordered but immutable collections, useful for fixed data that should not be changed once defined.</li> <li>Dictionaries: Unordered collections of key-value pairs, which are excellent for mapping relationships, such as names to data.</li> <li>Sets: Unordered collections of unique items, great for ensuring no duplicates and for performing mathematical set operations such as unions and intersections.</li> </ul>"},{"location":"learning_paths/Step_14/#why-are-these-data-structures-important","title":"Why Are These Data Structures Important?","text":"<p>These data structures help organize, store, and access data efficiently in Python programs, especially in scenarios where datasets are large or need to be processed in various ways. Understanding the strengths and limitations of each type of data structure is crucial for writing effective and optimized Python code.</p> <p>Think about how you might apply these structures in real-world projects:</p> <ul> <li>Lists for managing ordered collections like participant data or survey responses.</li> <li>Tuples for grouping related but unchangeable data, like coordinates or fixed settings.</li> <li>Dictionaries for looking up information quickly, such as mapping survey participants to their answers.</li> <li>Sets for managing collections where uniqueness is required, such as lists of unique hobbies or tags.</li> </ul> <p>Having a strong grasp of Python\u2019s core data structures will help you organize and manipulate data more effectively in future projects.</p>"},{"location":"learning_paths/Step_15/","title":"Step 15","text":"<p>In Step 14, we introduced the four most common data structures in Python: Lists, Tuples, Dictionaries, and Sets. Now that you have a basic understanding of these structures, it's time to practice manipulating them. Data manipulation is essential in research and real-world projects, as it allows you to prepare, clean, and transform data for analysis.</p>"},{"location":"learning_paths/Step_15/#1-working-with-lists","title":"1. Working with Lists","text":"<p>Lists are mutable, meaning you can change their elements after they've been created. Let\u2019s explore some ways to manipulate lists.</p>"},{"location":"learning_paths/Step_15/#adding-elements","title":"Adding Elements","text":"<p>You can add new elements to a list using the <code>append()</code> and <code>insert()</code> methods.</p> <pre><code># Example: Append vs Insert\nmy_list = [1, 2, 3]\nmy_list.append(4)  # Adds 4 to the end\nmy_list.insert(1, \"inserted\")  # Inserts at index 1\n\nprint(my_list)\n</code></pre> <ul> <li><code>append()</code> adds the element to the end of the list.</li> <li><code>insert()</code> allows you to add an element at a specific position in the list. The first argument is the index where you want to insert the element.</li> </ul>"},{"location":"learning_paths/Step_15/#removing-elements","title":"Removing Elements","text":"<p>To remove elements, you can use the <code>remove()</code> method or the <code>pop()</code> method.</p> <ul> <li><code>remove()</code> deletes the first occurrence of a value.</li> <li><code>pop()</code> removes an element by index, which means it removes the element at a specific position in the list, rather than searching for the value itself. Every item in a list has an index that represents its position in the list, starting with 0 for the first item.</li> </ul> <p>For example, in the list <code>['apple', 'banana', 'cherry']</code>, 'apple' has index 0, 'banana' has index 1, and 'cherry' has index 2. If you use <code>pop(1)</code>, it will remove 'banana' because it's at index 1.</p> <pre><code># Example: Remove vs Pop\nmy_list.remove(2)  # Removes the first occurrence of 2\nmy_list.pop(1)  # Removes the element at index 1, which is \"inserted\"\n\nprint(my_list)\n</code></pre>"},{"location":"learning_paths/Step_15/#2-working-with-tuples","title":"2. Working with Tuples","text":"<p>Tuples are immutable, meaning you cannot change their contents after creation. However, you can perform operations like slicing and unpacking.</p>"},{"location":"learning_paths/Step_15/#unpacking-tuples","title":"Unpacking Tuples","text":"<p>\"Unpacking\" means assigning the elements of a tuple to individual variables. This allows you to break the tuple into its components and work with each one separately. For example:</p> <pre><code># Example: Tuple Unpacking\nmy_tuple = (10, 20, 30)\na, b, c = my_tuple  # Unpacks the values into a, b, c\n\nprint(a, b, c)\n</code></pre> <ul> <li>In this example, the values 10, 20, and 30 are \"unpacked\" from the tuple and assigned to the variables <code>a</code>, <code>b</code>, and <code>c</code>. This technique is useful when you need to work with individual components of a tuple.</li> </ul> <p>If the number of variables on the left doesn\u2019t match the number of elements in the tuple, Python will raise an error.</p>"},{"location":"learning_paths/Step_15/#3-manipulating-dictionaries","title":"3. Manipulating Dictionaries","text":"<p>Dictionaries allow you to store key-value pairs. You can add, update, and delete key-value pairs easily.</p>"},{"location":"learning_paths/Step_15/#adding-and-updating-elements","title":"Adding and Updating Elements","text":"<p>You can add new key-value pairs or update existing ones by assigning a value to a key.</p> <pre><code># Example: Add and Update Dictionary\nmy_dict = {\"name\": \"Alice\", \"age\": 25}\nmy_dict[\"age\"] = 26  # Update existing key\nmy_dict[\"city\"] = \"New York\"  # Add new key-value pair\n\nprint(my_dict)\n</code></pre>"},{"location":"learning_paths/Step_15/#removing-elements_1","title":"Removing Elements","text":"<p>To remove an element, use the <code>del</code> statement or the <code>pop()</code> method.</p> <pre><code># Example: Delete vs Pop\ndel my_dict[\"city\"]  # Deletes the key-value pair for 'city'\nmy_dict.pop(\"age\")  # Removes 'age' key and returns its value\n\nprint(my_dict)\n</code></pre>"},{"location":"learning_paths/Step_15/#looping-through-a-dictionary","title":"Looping Through a Dictionary","text":"<p>You can loop through a dictionary to access its keys and values, allowing you to manipulate or analyze its data.</p> <pre><code># Example: Looping through a dictionary\nmy_dict = {\"name\": \"Alice\", \"age\": 26, \"city\": \"New York\"}\n\nfor key, value in my_dict.items():\n    print(f\"The key is {key} and the value is {value}\")\n</code></pre> <ul> <li><code>my_dict.items()</code> returns each key-value pair as a tuple, and you can unpack it into <code>key</code> and <code>value</code> as shown in the example. This is useful for iterating over all the entries in a dictionary to access or modify the data.</li> </ul>"},{"location":"learning_paths/Step_15/#4-set-operations","title":"4. Set Operations","text":"<p>Sets are unordered collections of unique elements. They support mathematical operations like union, intersection, and difference, which are helpful when comparing sets of data.</p>"},{"location":"learning_paths/Step_15/#adding-and-removing-elements","title":"Adding and Removing Elements","text":"<pre><code># Example: Add and Remove in Set\nmy_set = {1, 2, 3}\nmy_set.add(4)  # Adds 4 to the set\nmy_set.remove(2)  # Removes 2 from the set\n\nprint(my_set)\n</code></pre>"},{"location":"learning_paths/Step_15/#set-operations-union-intersection-difference","title":"Set Operations: Union, Intersection, Difference","text":"<ul> <li>Union combines all unique elements from two sets.</li> <li>Intersection returns only the elements that are present in both sets.</li> <li>Difference returns the elements that are in one set but not in the other.</li> </ul> <pre><code># Example: Set Operations\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\nunion_set = set1.union(set2)  # Union of two sets\nintersection_set = set1.intersection(set2)  # Intersection of two sets\ndifference_set = set1.difference(set2)  # Elements in set1 but not in set2\n\nprint(\"Union:\", union_set)\nprint(\"Intersection:\", intersection_set)\nprint(\"Difference:\", difference_set)\n</code></pre> <ul> <li>Union: <code>{1, 2, 3}</code> and <code>{3, 4, 5}</code> together become <code>{1, 2, 3, 4, 5}</code> because all elements are included but duplicates are removed.</li> <li>Intersection: Only the number <code>3</code> appears in both sets, so the result is <code>{3}</code>.</li> <li>Difference: In the difference operation, the result is <code>{1, 2}</code> because these are the elements in <code>set1</code> that are not in <code>set2</code>.</li> </ul>"},{"location":"learning_paths/Step_15/#exercises","title":"Exercises","text":"<ol> <li> <p>Create a list of your favorite fruits and perform the following operations:</p> <ul> <li>Add a new fruit to the end.</li> <li>Insert a fruit at the second position.</li> <li>Remove one fruit by its value.</li> </ul> Solution<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")  # Add orange to the end\nfruits.insert(1, \"grape\")  # Insert grape at the second position\nfruits.remove(\"banana\")  # Remove banana by value\n\nprint(fruits)\n</code></pre> </li> <li> <p>Create a dictionary that contains the names of 3 countries and their capitals. Then:</p> <ul> <li>Update the capital of one country.</li> <li>Add a new country-capital pair.</li> <li>Remove one country from the dictionary.</li> </ul> Solution<pre><code>capitals = {\"France\": \"Paris\", \"Japan\": \"Tokyo\", \"USA\": \"Washington D.C.\"}\ncapitals[\"USA\"] = \"Cincinnati\"  # Update capital of USA\ncapitals[\"Germany\"] = \"Berlin\"  # Add new country-capital pair\ncapitals.pop(\"USA\")  # Remove USA from the dictionary\n\nprint(capitals)\n</code></pre> </li> <li> <p>Create a tuple of 3-4 numbers. Given a tuple of numbers, unpack it into individual variables and print them.</p> Solution<pre><code>numbers = (100, 200, 300)\nx, y, z = numbers  # Unpack the tuple into x, y, z\n\nprint(x, y, z)\n</code></pre> </li> <li> <p>Create two sets of integers and:</p> <ul> <li>Perform union, intersection, and difference operations.</li> </ul> Solution<pre><code>set1 = {10, 20, 30, 40}\nset2 = {30, 40, 50, 60}\n\nunion_set = set1.union(set2)  # Union\nintersection_set = set1.intersection(set2)  # Intersection\ndifference_set = set1.difference(set2)  # Difference\n\nprint(\"Union:\", union_set)\nprint(\"Intersection:\", intersection_set)\nprint(\"Difference:\", difference_set)\n</code></pre> </li> </ol>"},{"location":"learning_paths/Step_16/","title":"Step 16","text":""},{"location":"learning_paths/Step_16/#introduction-to-data-visualization","title":"Introduction to Data Visualization","text":"<p>In this step, we'll start exploring data visualization using Python, specifically with the <code>matplotlib</code> library and <code>numpy</code> for data creation. Data visualization is an essential tool in data analysis\u2014it allows you to better understand your data by uncovering patterns, trends, and outliers. In scientific research, visualizing data is especially valuable, helping to interpret experiment results, compare groups, and communicate findings effectively.</p> <p>We'll cover a few essential plot types: line plots, bar plots, histograms, and scatter plots. These visualizations are foundational, and you\u2019ll likely use them to analyze data in future projects.</p>"},{"location":"learning_paths/Step_16/#getting-started-setting-up-matplotlib-and-numpy","title":"Getting Started: Setting Up Matplotlib and Numpy","text":"<p>To start, make sure you have <code>matplotlib</code> installed. If you haven\u2019t installed it yet, you can install it by running: <pre><code>!pip install matplotlib\n</code></pre></p> <p>The <code>!</code></p> <p>The <code>!</code> at the beginning of the command is used in Jupyter notebooks to things like installation commands - this will install matplotlib if it's not already installed.</p> <p>Import <code>matplotlib</code> and <code>numpy</code> with the following aliases: <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n</code></pre></p> Did your import not work?<p>If you're having import issues, try using the following code to install the necessary packages: <pre><code>%pip install matplotlib\n</code></pre> The <code>%</code> is used in Jupyter notebooks to run commands in the terminal, and <code>!</code> is used to run commands in the shell - depending on your environment, you may need to use one or the other.</p> <p>If you're still having issues, try restarting VSCode and running the import commands again.</p>"},{"location":"learning_paths/Step_16/#1-line-plot","title":"1. Line Plot","text":""},{"location":"learning_paths/Step_16/#use-case","title":"Use Case","text":"<p>Line plots are great for visualizing changes over time or across experimental trials. Let\u2019s start by creating a basic line plot with synthetic data.</p>"},{"location":"learning_paths/Step_16/#creating-a-basic-line-plot","title":"Creating a Basic Line Plot","text":"<p>We\u2019ll create an array of data points and visualize them:</p> <pre><code># Generate data\nx = np.arange(0, 10, 1)  # x-axis: from 0 to 9\ny = np.random.randint(1, 10, size=10)  # y-axis: random integers\n\n# Create line plot\nplt.plot(x, y, label=\"Random Data\", color=\"blue\", linestyle=\"--\", marker=\"o\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.title(\"Basic Line Plot\")\nplt.legend()\nplt.show()\n</code></pre> <p>Plots a as a Debugging Tool</p> <p>Just like when you use a print statement, when you run <code>plt.show()</code>, you should see the plot appear in your notebook - this is great for instantaneous feedback.</p> <p>Think about how you can use this to debug your data - if you're not getting the results you expect, you can visualize your data to visually inspect it, and see if something's wrong. As scientists, we build up intuitions for the \"shape\" of our data, and visualizing it can help us understand what's going on.</p>"},{"location":"learning_paths/Step_16/#breaking-it-down","title":"Breaking it down:","text":"<ul> <li><code>plt.plot(x, y)</code>: This function creates a line plot with <code>x</code> on the x-axis and <code>y</code> on the y-axis.</li> <li><code>plt.xlabel()</code>: Sets the label for the x-axis.</li> <li><code>plt.ylabel()</code>: Sets the label for the y-axis.</li> <li><code>plt.title()</code>: Sets the title of the plot.</li> <li><code>plt.legend()</code>: Displays the legend on the plot.</li> <li><code>plt.show()</code>: Displays the plot.</li> </ul> <p>You can check out the <code>plot</code> documentation for matplotlib here.</p>"},{"location":"learning_paths/Step_16/#customizing-the-line-plot","title":"Customizing the Line Plot","text":"<p>Try adjusting colors, line styles, and adding markers to make the plot more informative.</p> <p>Here is a web link to the named colors of matplotlib, it can be a lot of fun and very useful to experiment with different colors.</p> <p>Colors from Hex Codes</p> <p>You can also use hex codes to specify colors in matplotlib. For example, <code>color=\"#FF5733\"</code> would give you a specific shade of orange.</p> <p>Something that I personally love to do to find unique combinations of hex code colors is to use PokePalettes, a website that generates color palettes based on Pokemon. Check it out here!</p> <p>To replace a color in a plot with a hex code, you can use the following syntax: <pre><code>plt.plot(x, y, color=\"#FF5733\")\n</code></pre></p>"},{"location":"learning_paths/Step_16/#2-bar-plot","title":"2. Bar Plot","text":""},{"location":"learning_paths/Step_16/#use-case_1","title":"Use Case","text":"<p>Bar plots are useful for comparing categorical data, like response counts across different participant groups.</p>"},{"location":"learning_paths/Step_16/#creating-a-basic-bar-plot","title":"Creating a Basic Bar Plot","text":"<p>Here, we\u2019ll create a bar plot with categorical labels on the x-axis:</p> <pre><code># Data\ncategories = [\"Group A\", \"Group B\", \"Group C\"]\nvalues = [15, 35, 25]\n\n# Create bar plot\nplt.bar(categories, values, color=\"green\")\nplt.xlabel(\"Groups\")\nplt.ylabel(\"Values\")\nplt.title(\"Bar Plot of Categorical Data\")\nplt.show()\n</code></pre> <p>You can see the <code>bar</code> documentation for matplotlib here.</p>"},{"location":"learning_paths/Step_16/#customizing-the-bar-plot","title":"Customizing the Bar Plot","text":"<p>Experiment with changing colors, adjusting bar width, and adding values on top of each bar to emphasize comparisons.</p> <p>Fun Example</p> <p>You can change the way the bars are displayed, their orientation, and other properties. For example, you can create a horizontal bar plot by using <code>plt.barh()</code> instead of <code>plt.bar()</code>.</p> <pre><code>plt.barh(categories, values, color=\"green\")\n</code></pre>"},{"location":"learning_paths/Step_16/#3-histogram","title":"3. Histogram","text":""},{"location":"learning_paths/Step_16/#use-case_2","title":"Use Case","text":"<p>Histograms are ideal for visualizing the distribution of a dataset, such as reaction times or score distributions.</p>"},{"location":"learning_paths/Step_16/#creating-a-basic-histogram","title":"Creating a Basic Histogram","text":"<p>Using Numpy, we\u2019ll generate a normal distribution and plot it as a histogram.</p> <pre><code># Generate data with a normal distribution\ndata = np.random.normal(loc=0, scale=1, size=1000)\n\n# Create histogram\nplt.hist(data, bins=30, color=\"purple\", edgecolor=\"black\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Histogram of Normally Distributed Data\")\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_16/#importance-of-bin-size","title":"Importance of Bin Size","text":"<p>Histograms are great data visualization tools, but it's important to understand how the bin size can be adjusted to change the level of detail in the plot, sometimes altering the interpretation of the data.</p> <p>You can adjust the number of bins by changing the <code>bins</code> parameter in the <code>hist()</code> function. Functionally, the number of bins determines the number of intervals (or groups) the data is divided into, the more bins, the more detailed the histogram.</p>"},{"location":"learning_paths/Step_16/#customizing-the-histogram","title":"Customizing the Histogram","text":"<p>Experiment with changing colors, adjusting the number of bins, and adding labels to make the histogram more informative.</p>"},{"location":"learning_paths/Step_16/#4-scatter-plot","title":"4. Scatter Plot","text":""},{"location":"learning_paths/Step_16/#use-case_3","title":"Use Case","text":"<p>Scatter plots are useful for showing relationships between two continuous variables, like age and reaction time.</p>"},{"location":"learning_paths/Step_16/#creating-a-basic-scatter-plot","title":"Creating a Basic Scatter Plot","text":"<p>Here, we\u2019ll create two correlated datasets and plot them against each other.</p> <pre><code># Generate data\nx = np.random.rand(100)\ny = x * 2 + np.random.normal(0, 0.1, 100)\n\n# Create scatter plot\nplt.scatter(x, y, color=\"red\", s=20, label=\"Data Points\")\nplt.xlabel(\"X Variable\")\nplt.ylabel(\"Y Variable\")\nplt.title(\"Scatter Plot Example\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_16/#customizing-the-scatter-plot","title":"Customizing the Scatter Plot","text":"<p>Change point size, colors, and add legends to enhance interpretability.</p> <p>Fun Example</p> <p>You can change the shape of the markers in a scatter plot. For example, you can use triangles instead of circles by specifying <code>marker=\"^\"</code>.</p> <pre><code>plt.scatter(x, y, color=\"red\", s=20, label=\"Data Points\", marker=\"^\")\n</code></pre> <p>This is particularly useful when you have multiple datasets on the same plot and want to differentiate them.</p>"},{"location":"learning_paths/Step_16/#5-combining-multiple-plots-in-a-single-figure","title":"5. Combining Multiple Plots in a Single Figure","text":""},{"location":"learning_paths/Step_16/#use-case_4","title":"Use Case","text":"<p>Sometimes, it\u2019s useful to compare multiple visualizations side-by-side. Using subplots, you can arrange multiple plots in one figure.</p>"},{"location":"learning_paths/Step_16/#creating-subplots","title":"Creating Subplots","text":"<p>Below is an example of creating a line plot and a histogram in a 1x2 grid layout.</p> <pre><code># Create subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 4))\n\n# Scatter Plot\naxes[0].scatter(x, y, color=\"blue\", label=\"Scatter Plot\")\naxes[0].set_title(\"Scatter Plot\")\naxes[0].set_xlabel(\"X-axis\")\naxes[0].set_ylabel(\"Y-axis\")\naxes[0].legend()\n\n# Histogram\naxes[1].hist(data, bins=20, color=\"orange\", edgecolor=\"black\")\naxes[1].set_title(\"Histogram\")\naxes[1].set_xlabel(\"Value\")\naxes[1].set_ylabel(\"Frequency\")\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n</code></pre> <p>Notice how <code>axes[0]</code> and <code>axes[1]</code> are used to access the individual subplots. This allows you to customize each subplot independently.</p>"},{"location":"learning_paths/Step_16/#a-quick-note-on-the-importance-of-clear-labels","title":"A quick note on the importance of clear labels","text":"<p>When creating visualizations, it's crucial to provide clear labels for the axes, titles, and legends. These labels help viewers understand the data being presented and the context of the visualization. Always ensure that your visualizations are labeled appropriately to convey the intended message effectively.</p> <p>Your goal should be for the plot to make sense independent of the context; such that if you were to show a data visualization depicting the relationship between age and reaction time, someone who had never seen the data before could understand what the plot is showing by reading the labels, axes, and title.</p>"},{"location":"learning_paths/Step_16/#coding-exercise-custom-visualizations","title":"Coding Exercise: Custom Visualizations","text":"<p>In this exercise, you\u2019ll work with a dataset generated using <code>numpy</code>. Your goal is to explore different ways to visualize this data and think about what insights each visualization type can reveal. You\u2019ll create at least two different visualizations of the dataset, using different plot types.</p>"},{"location":"learning_paths/Step_16/#a-generate-the-data","title":"A. Generate the Data","text":"<p>Run the code below to generate a synthetic (fake) dataset. This dataset simulates reaction times and accuracy scores from a fictional psychology experiment with 200 participants.</p> <pre><code>import numpy as np\n\n# Setting random seed for reproducibility\nnp.random.seed(42)\n\n# Generate participant IDs (1 through 200)\nparticipant_ids = np.arange(1, 201)\n\n# Generate random reaction times (in milliseconds) with a mean of 500 ms and std deviation of 50 ms\nreaction_times = np.random.normal(loc=500, scale=50, size=200)\n\n# Generate random accuracy scores (out of 100) with a mean of 75 and std deviation of 10\naccuracy_scores = np.random.normal(loc=75, scale=10, size=200)\n\n# Print first few values for each array\nprint(\"Participant IDs:\", participant_ids[:5])\nprint(\"Reaction Times:\", reaction_times[:5])\nprint(\"Accuracy Scores:\", accuracy_scores[:5])\n</code></pre>"},{"location":"learning_paths/Step_16/#b-review-your-data-visualization-options","title":"B. Review your data visualization options","text":"<ol> <li>Line Plot: Consider visualizing reaction times across participants to see how response times vary.</li> <li>Histogram: A histogram of reaction times or accuracy scores can help show the distribution of these values.</li> <li>Scatter Plot: A scatter plot of accuracy vs. reaction time can show any correlation between speed and accuracy.</li> <li>Bar Plot: You could create a bar plot of average reaction times or accuracy for groups of participants (e.g., participants 1\u201350, 51\u2013100).</li> </ol>"},{"location":"learning_paths/Step_16/#c-create-your-visualizations","title":"C. Create Your Visualizations","text":"<p>Using <code>matplotlib</code>, create at least two different visualizations of the data. Use the examples above or come up with your own! Think about:</p> <ul> <li>What insights does each plot type reveal?</li> <li>How can you customize your plots to make them more informative?</li> </ul> Example Starter Code<p>Below is an example of how you might start with a histogram. Remember to create your own additional plot(s) and customize as needed!</p> <pre><code>import matplotlib.pyplot as plt\n\n# Example Histogram for Reaction Times\nplt.hist(reaction_times, bins=20, color=\"skyblue\", edgecolor=\"black\")\nplt.xlabel(\"Reaction Time (ms)\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of Reaction Times\")\nplt.show()\n\n# Continue with your own visualizations!\n</code></pre>"},{"location":"learning_paths/Step_16/#d-reflect","title":"D. Reflect","text":"<p>After creating your visualizations, reflect on the following:</p> <ul> <li>What insights did each visualization reveal about the data?</li> <li>Which visualization do you think was most effective, and\u200b why?</li> </ul>"},{"location":"learning_paths/Step_16/#review","title":"Review","text":"<p>In this step, you learned:</p> <ul> <li>How to create and customize line plots, bar plots, histograms, and scatter plots.</li> <li>Basic customization techniques to make plots more readable and informative.</li> <li>How to use subplots to compare multiple visualizations side-by-side.</li> </ul> <p>Data visualization is a powerful skill that will help you analyze and interpret data effectively in your research and academic work.</p>"},{"location":"learning_paths/Step_17/","title":"Step 17","text":""},{"location":"learning_paths/Step_17/#interactive-data-visualization-with-ipywidgets","title":"Interactive Data Visualization with ipywidgets","text":"<p>In this step, we\u2019ll enhance our data visualizations by adding interactivity using the <code>ipywidgets</code> library. <code>ipywidgets</code> allows us to add interactive controls, such as sliders and dropdowns, that let you modify visualization parameters in real-time.</p>"},{"location":"learning_paths/Step_17/#why-use-ipywidgets","title":"Why Use ipywidgets?","text":"<p>Interactive visualizations are especially useful for exploring data dynamically. Rather than generating a new plot for every change, you can use widgets to modify aspects of the plot\u2014like adjusting data ranges, selecting data subsets, or changing visual elements\u2014right from the notebook.</p> <p>Note - only for Notebooks!</p> <p><code>ipywidgets</code> is designed for use in Jupyter notebooks like Google Colab and VSCode. If you want to develop interactive visualizations for web applications, you might consider using libraries <code>Plotly</code>.</p>"},{"location":"learning_paths/Step_17/#getting-started-with-ipywidgets","title":"Getting Started with ipywidgets","text":"<p>To start, make sure <code>ipywidgets</code> is installed. You can install it by running: <pre><code>!pip install ipywidgets\n</code></pre></p> <p>Then, import the widgets and display functionality: <pre><code>import ipywidgets as widgets\nfrom ipywidgets import interact\nimport matplotlib.pyplot as plt\nimport numpy as np\n</code></pre></p>"},{"location":"learning_paths/Step_17/#1-basic-interactive-plot-with-a-slider","title":"1. Basic Interactive Plot with a Slider","text":"<p>To introduce <code>ipywidgets</code>, let\u2019s create an interactive line plot using a slider. This slider will control the number of data points displayed in the plot.</p>"},{"location":"learning_paths/Step_17/#creating-interactive-line-plot","title":"Creating Interactive Line Plot","text":"<p>We\u2019ll generate data with <code>numpy</code> and then use the <code>interact</code> function to link a slider to the number of data points.</p> <pre><code># Generate data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Define plot function\ndef plot_sine(num_points):\n    plt.plot(x[:num_points], y[:num_points], color=\"blue\")\n    plt.xlabel(\"X-axis\")\n    plt.ylabel(\"Sine of X\")\n    plt.title(f\"Sine Wave with {num_points} Points\")\n    plt.show()\n\n# Create slider with interact\ninteract(plot_sine, \n         num_points=widgets.IntSlider(min=10, \n                                      max=100, \n                                      step=10, \n                                      value=50))\n</code></pre>"},{"location":"learning_paths/Step_17/#explanation","title":"Explanation","text":"<p>The <code>plot_sine</code> function generates the plot, and the <code>interact</code> function links the <code>num_points</code> argument to the slider widget. Now, try moving the slider to see how it affects the plot!</p>"},{"location":"learning_paths/Step_17/#2-creating-interactive-scatter-plots-with-dropdowns","title":"2. Creating Interactive Scatter Plots with Dropdowns","text":"<p>Next, we\u2019ll add more complexity by allowing users to choose between different datasets. For example, this could be useful for comparing the relationship between different experimental variables.</p>"},{"location":"learning_paths/Step_17/#generate-sample-data","title":"Generate Sample Data","text":"<p>We\u2019ll create two sets of data for our scatter plot: a linear relationship and a quadratic relationship.</p> <pre><code># Sample data for two relationships\nx_data = np.linspace(0, 10, 100)\nlinear_y = 2 * x_data + np.random.normal(0, 1, 100)  # Linear relationship\nquadratic_y = x_data**2 + np.random.normal(0, 5, 100)  # Quadratic relationship\n\n# Define plot function\ndef plot_scatter(relation_type):\n    plt.scatter(x_data, linear_y if relation_type == \"Linear\" else quadratic_y, color=\"red\", s=20)\n    plt.xlabel(\"X Variable\")\n    plt.ylabel(\"Y Variable\")\n    plt.title(f\"{relation_type} Relationship\")\n    plt.show()\n\n# Create dropdown with interact\ninteract(plot_scatter, relation_type=widgets.Dropdown(options=[\"Linear\", \"Quadratic\"], value=\"Linear\", description=\"Relationship Type\"))\n</code></pre>"},{"location":"learning_paths/Step_17/#explanation_1","title":"Explanation","text":"<p>The <code>plot_scatter</code> function adjusts the <code>y</code> values depending on the chosen relationship type. The dropdown menu lets users choose between the linear and quadratic datasets, updating the plot accordingly.</p>"},{"location":"learning_paths/Step_17/#3-combining-multiple-widgets-slider-and-dropdown","title":"3. Combining Multiple Widgets: Slider and Dropdown","text":"<p>Now, let\u2019s create an interactive histogram where users can: - Adjust the number of bins with a slider. - Select the dataset to visualize with a dropdown.</p>"},{"location":"learning_paths/Step_17/#creating-data-and-function","title":"Creating Data and Function","text":"<p>We\u2019ll generate two datasets: one with a normal distribution and one with a uniform distribution.</p> <pre><code># Sample datasets\nnormal_data = np.random.normal(0, 1, 1000)\nuniform_data = np.random.uniform(-3, 3, 1000)\n\n# Define histogram plot function\ndef plot_histogram(dist_type, bins):\n    data = normal_data if dist_type == \"Normal\" else uniform_data\n    plt.hist(data, bins=bins, color=\"green\", edgecolor=\"black\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.title(f\"{dist_type} Distribution with {bins} Bins\")\n    plt.show()\n\n# Create interactive widgets\ninteract(plot_histogram, \n         dist_type=widgets.Dropdown(options=[\"Normal\", \"Uniform\"], value=\"Normal\", description=\"Distribution\"),\n         bins=widgets.IntSlider(min=5, max=50, step=5, value=20))\n</code></pre>"},{"location":"learning_paths/Step_17/#explanation_2","title":"Explanation","text":"<p>This function combines a dropdown (for dataset selection) and a slider (for number of bins) to create a more interactive histogram, allowing users to explore both distribution shapes and bin adjustments.</p>"},{"location":"learning_paths/Step_17/#reflect-and-practice","title":"Reflect and Practice","text":"<p>After experimenting with the examples above, create your own interactive visualization:</p> <ol> <li>Choose a dataset: Use <code>numpy</code> to generate a dataset (or modify one of the provided datasets, you can even use the data from <code>Step 16</code>).</li> <li>Select a widget: Decide which widget(s) would be useful to control the data or visualization.</li> <li>Customize: Modify the appearance or functionality to make the visualization more insightful.</li> </ol>"},{"location":"learning_paths/Step_17/#review","title":"Review","text":"<p>In this step, you learned: - How to create interactive plots using <code>ipywidgets</code>. - Basic widgets, like sliders and dropdowns, to control plot parameters. - How to combine multiple widgets to create rich, interactive visualizations.</p> <p>Adding interactivity to data visualization lets you explore data more deeply, helping you to uncover trends and patterns more easily. You can apply these techniques to create interactive visualizations for research and data exploration, making it easier to gain insights from your data.</p>"},{"location":"learning_paths/Step_18/","title":"Step 18","text":"<p>Up until this point, our course has focused on learning Python. While Python absolutely could be used to build an online research study, as we will see in this Step of the learning path, there are tools better suited to conducting online research.</p> <p>In this step, we will explore how behavioral science experiments can be conducted on the web. We\u2019ll look at a few web technologies that make this possible, such as <code>jsPsych</code>, HTML, CSS, and JavaScript, and provide you with code examples you can try out. We will also introduce tools that allow for online research without requiring any coding (Google Forms).</p> <p>Note: This step is meant to conceptually introduce you to a different programming language, specifically JavaScript and web development lanugages (HTML and CSS). We will take a slightly deeper dive into JavaScript in Step 20 when we look at <code>jsPsych</code>!</p>"},{"location":"learning_paths/Step_18/#1-experiments-on-the-web","title":"1. Experiments on the Web","text":"<p>Conducting experiments online allows researchers to reach a broader audience and collect data efficiently. While programming tools like <code>PsychoPy</code> (Python) can be used to design experiments, another accessible tool, <code>jsPsych</code>, simplifies the process of running experiments directly in a web browser.</p>"},{"location":"learning_paths/Step_18/#what-is-jspsych","title":"What is <code>jsPsych</code>?","text":"<p><code>jsPsych</code> is a JavaScript library specifically designed for creating experiments that participants can complete online. It\u2019s flexible, widely used in psychology research, and makes it easier to control and collect data from web-based studies.</p>"},{"location":"learning_paths/Step_18/#what-is-javascript","title":"What is JavaScript?","text":"<p>JavaScript is a programming language used to create interactive elements on web pages. It\u2019s essential for building dynamic websites and web applications. JavaScript can handle user interactions, animations, and data processing in real-time. </p> <p>Have you ever noticed a button change color on a website, or text appear when you hover over an image? These are examples of JavaScript in action!</p> <p>JavaScript is incredibly versitile for all things on the web, and can be used to create interactive elements, animations, and more. One of my favorite uses of JavaScript is called \"ThreeJS\" which is a library that allows you to create 3D graphics in the browser! You can check out some examples here.</p>"},{"location":"learning_paths/Step_18/#2-basics-of-web-development-html-css-and-javascript","title":"2. Basics of Web Development: HTML, CSS, and JavaScript","text":"<p>To understand how <code>jsPsych</code> functions, we\u2019ll cover some core components of web development. Below, we\u2019ll explore HTML, CSS, and JavaScript and provide examples you can try in VSCode.</p> Web Development?<p>Web development can be defined as the process of building websites and web applications. It involves writing code in languages like HTML, CSS, and JavaScript to create interactive and visually appealing web pages. These technologies work together to structure content, style elements, and add interactivity to web pages.</p>"},{"location":"learning_paths/Step_18/#21-install-live-server-in-vscode","title":"2.1. Install Live Server in VSCode","text":"<p>In the Extensions sidebar, search for Live Server and install it. We'll use this extension to run our HTML files in a live server.</p>"},{"location":"learning_paths/Step_18/#22-html-hypertext-markup-language","title":"2.2. HTML (HyperText Markup Language)","text":"<p>HTML is the standard language for creating web pages. It allows you to structure content using \"tags.\" A \"tag\" is a keyword surrounded by angle brackets, like <code>&lt;tag&gt;</code>. Tags are used to define elements such as headings, paragraphs, images, and links. A sample of a common tag is <code>&lt;h1&gt;</code>, which defines a top-level heading. To close a tag, use a forward slash, like <code>&lt;/h1&gt;</code>.</p> <p>Here\u2019s a basic HTML structure:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Experiment&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Experiment!&lt;/h1&gt;\n    &lt;p&gt;This is an experiment example using HTML, CSS, and JavaScript.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Notice the tags like <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;h1&gt;</code>, and <code>&lt;p&gt;</code>. These tags structure the content and define the appearance of the webpage. <code>&lt;h1&gt;</code> is a top-level heading, and <code>&lt;p&gt;</code> is a paragraph.</p> <p>This code creates a basic webpage with a title and heading. Copy and paste this code into a new file with an <code>.html</code> extension, calling the file <code>index.html</code>.</p> <p>You can open this file in VSCode and use the Live Server extension to view it in your browser. To do so, right-click on the HTML file and select Open with Live Server.</p> <p>This will open up a new tab in your browser displaying the HTML content!</p>"},{"location":"learning_paths/Step_18/#23-css-cascading-style-sheets","title":"2.3. CSS (Cascading Style Sheets)","text":"<p>CSS styles your HTML content, making it look visually appealing. You can add color, align elements, and much more.</p> <p>Add the following CSS to your HTML file within a <code>&lt;style&gt;</code> tag in the <code>&lt;head&gt;</code> section:</p> <pre><code>&lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f8ff;\ntext-align: center;\n}\nh1 {\ncolor: #4682b4;\n}\np {\ncolor: #2f4f4f;\n}\n&lt;/style&gt;\n</code></pre> The full HTML file should now look like this:<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Experiment&lt;/title&gt;\n\n    &lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f8ff;\ntext-align: center;\n}\nh1 {\ncolor: #4682b4;\n}\np {\ncolor: #2f4f4f;\n}\n&lt;/style&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Experiment!&lt;/h1&gt;\n    &lt;p&gt;This is an experiment example using HTML, CSS, and JavaScript.&lt;/p&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>This CSS changes the background color, centers the text, and applies colors to the heading and paragraph.</p>"},{"location":"learning_paths/Step_18/#24-javascript","title":"2.4. JavaScript","text":"<p>JavaScript adds interactivity to your webpage, such as reacting to user inputs or displaying alerts.</p> <p>Include this script inside your HTML file\u2019s <code>&lt;body&gt;</code> or <code>&lt;head&gt;</code> tags:</p> <pre><code>&lt;script&gt;\nfunction showAlert() {\nalert(\"Welcome to the experiment!\");\n}\n&lt;/script&gt;\n\n&lt;button onclick=\"showAlert()\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>This code adds a button that, when clicked, shows an alert message.</p> Your full HTML file should now look like this:<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Experiment&lt;/title&gt;\n\n    &lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f8ff;\ntext-align: center;\n}\nh1 {\ncolor: #4682b4;\n}\np {\ncolor: #2f4f4f;\n}\n&lt;/style&gt;\n\n    &lt;script&gt;\nfunction showAlert() {\nalert(\"Welcome to the experiment!\");\n}\n&lt;/script&gt;\n\n    &lt;button onclick=\"showAlert()\"&gt;Click Me&lt;/button&gt;\n\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Experiment!&lt;/h1&gt;\n    &lt;p&gt;This is an experiment example using HTML, CSS, and JavaScript.&lt;/p&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"learning_paths/Step_18/#3-play-with-web-development-tools","title":"3. Play with Web Development Tools","text":"<p>Now that you've seen the basics of HTML, CSS, and JavaScript, let\u2019s practice combining them to create a simple interactive page.</p> <p>Try out the coding exercise below to experiment with web development tools.</p>"},{"location":"learning_paths/Step_18/#31-create-an-html-file-in-vscode-and-add-the-following-code","title":"3.1 Create an HTML file in VSCode and add the following code:","text":"<ul> <li>This code has HTML, CSS, and JavaScript sections, all within the same file.</li> <li>Run the code using Live Server to see the results immediately in your browser.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Interactive Web Page&lt;/title&gt;\n    &lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f3f3f3;\ntext-align: center;\n}\nh1 {\ncolor: #4CAF50;\n}\nbutton {\nbackground-color: #4CAF50;\ncolor: white;\npadding: 10px 20px;\nborder: none;\ncursor: pointer;\n}\nbutton:hover {\nbackground-color: #45a049;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Play with Web Development!&lt;/h1&gt;\n    &lt;p&gt;Click the button to see a message.&lt;/p&gt;\n    &lt;button onclick=\"displayMessage()\"&gt;Click Me!&lt;/button&gt;\n    &lt;p id=\"message\"&gt;&lt;/p&gt;\n\n    &lt;script&gt;\nfunction displayMessage() {\ndocument.getElementById(\"message\").innerHTML = \"Hello, you're interacting with JavaScript!\";\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"learning_paths/Step_18/#32-experiment-by-changing-the-following-elements","title":"3.2 Experiment by changing the following elements:","text":"<ul> <li>CSS Colors: Adjust colors in the CSS styles for <code>h1</code>, <code>body</code>, or <code>button</code>.</li> <li>Message Text: Modify the message text in the JavaScript function <code>displayMessage()</code>.</li> </ul> <p>This gives you a chance to experiment with the main elements of web development in one file. By changing CSS properties, HTML structure, and JavaScript functions, you\u2019ll start to see how these tools work together.</p> <p><code>jsPsych</code> in Step 20</p> <p>When we get to Step 20, we'll take a look of <code>jsPsych</code> - but this is a good enough intro for now!</p>"},{"location":"learning_paths/Step_18/#4-using-non-programming-tools-for-online-research","title":"4. Using Non-Programming Tools for Online Research","text":"<p>For researchers who prefer not to code, tools like Google Forms are useful for creating and distributing online surveys. These tools are widely used in psychological and behavioral research to gather self-report data or feedback from participants.</p>"},{"location":"learning_paths/Step_18/#designing-effective-user-surveys","title":"Designing Effective User Surveys","text":"<p>A user survey is a structured way of gathering data about participants' thoughts, behaviors, or experiences. Well-designed surveys can reveal valuable insights into how people feel or think about a topic.</p> <p>To learn more about designing surveys, visit How to Design a UX Research Survey, which covers practical tips and best practices for creating effective surveys.</p>"},{"location":"learning_paths/Step_18/#summary","title":"Summary","text":"<ul> <li>HTML, CSS, and JavaScript allow us to create and style web-based experiments.</li> <li>Playing with web development tools helps you learn through hands-on practice, experimenting with colors, structure, and interactivity.</li> <li>Google Forms and other no-code tools provide options for collecting data without needing to write code.</li> <li>Survey design is crucial in psychology and UX research to capture reliable and meaningful data from participants.</li> </ul> <p>This step gives you the tools to start exploring web-based research and consider how online experiments can expand your reach and capabilities in behavioral science research.</p>"},{"location":"learning_paths/Step_19/","title":"Step 19","text":"<p>In this step, we\u2019ll explore Pandas, a powerful Python library for data manipulation and analysis. Pandas provides tools to explore, manipulate, and analyze datasets efficiently, which is essential for behavioral scientists working with real-world data.</p> <p>We\u2019ll use a CSV file named <code>happiness correlation data-2.csv</code>, which you can download below. Each row represents data from one participant, with columns capturing various aspects like age, work hours, GPA, life satisfaction, and more.</p>"},{"location":"learning_paths/Step_19/#0-download-the-dataset","title":"0. Download the Dataset","text":"<p>Click this link to download the data</p> <p>Familiar?</p> <p>This data was pulled from Stats 2002, a course at UC. If this data is familiar, it's probably because you've seen this before!</p> <p>IMPORTANT: Make sure to place the downloaded CSV file in the same directory as your notebook or script!</p>"},{"location":"learning_paths/Step_19/#1-getting-started-with-pandas","title":"1. Getting Started with Pandas","text":""},{"location":"learning_paths/Step_19/#installing-and-importing-pandas","title":"Installing and Importing Pandas","text":"<p>To use Pandas, ensure it\u2019s installed in your Python environment. You can install it by running:</p> <pre><code>!pip install pandas\n</code></pre> <p><code>%pip install</code></p> <p>If the code above doesn't work, try using <code>%pip install</code> instead of <code>!pip install</code>.</p> <p>Then, import Pandas at the beginning of your notebook or script:</p> <pre><code>import pandas as pd\n</code></pre>"},{"location":"learning_paths/Step_19/#loading-the-data","title":"Loading the Data","text":"<p>Load the CSV file into a DataFrame, which is Pandas\u2019 primary data structure for handling data tables.</p> <pre><code># Load the data from the your directory\nfile_path = 'happiness correlation data-2.csv'\ndf = pd.read_csv(file_path)\n</code></pre>"},{"location":"learning_paths/Step_19/#viewing-the-data","title":"Viewing the Data","text":"<p>Use <code>head()</code> to see the first few rows and get a feel for the structure.</p> <pre><code>df.head()\n</code></pre>"},{"location":"learning_paths/Step_19/#2-exploring-the-dataset","title":"2. Exploring the Dataset","text":"<p>This dataset has columns capturing the following participant information:</p> <ul> <li>age: Participant's age</li> <li>hours_work_week: Hours worked per week</li> <li>gpa: Participant's GPA</li> <li>life_satisfaction: Self-reported life satisfaction score</li> <li>desire_to_achieve: Self-reported desire to achieve</li> <li>number_drinks: Number of alcoholic drinks consumed per week</li> <li>stress: Self-reported stress level</li> </ul>"},{"location":"learning_paths/Step_19/#basic-data-information","title":"Basic Data Information","text":"<p>To get a quick summary of the dataset, including column names, data types, and any missing values:</p> <pre><code>df.info()\n</code></pre> <p>To get basic descriptive statistics (mean, median, etc.) for each column:</p> <pre><code>df.describe()\n</code></pre>"},{"location":"learning_paths/Step_19/#3-analyzing-specific-columns","title":"3. Analyzing Specific Columns","text":""},{"location":"learning_paths/Step_19/#calculating-the-mean-age-of-participants","title":"Calculating the Mean Age of Participants","text":"<p>Let\u2019s calculate the average age of participants.</p> <pre><code>mean_age = df['age'].mean()\nprint(\"Average Age:\", mean_age)\n</code></pre>"},{"location":"learning_paths/Step_19/#distribution-of-life-satisfaction-scores","title":"Distribution of Life Satisfaction Scores","text":"<p>To understand the distribution of <code>life_satisfaction</code> scores, we can use Pandas to plot a histogram (requires <code>matplotlib</code> library).</p> <pre><code>import matplotlib.pyplot as plt\n\ndf['life_satisfaction'].plot(kind='hist', title='Life Satisfaction Distribution')\nplt.xlabel('Life Satisfaction')\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_19/#exploring-correlations","title":"Exploring Correlations","text":"<p>We may want to see how different variables relate to each other. For example, are work hours correlated with stress?</p> <pre><code>correlation = df[['hours_work_week', 'stress']].corr()\nprint(\"Correlation between hours worked and stress:\\n\", correlation)\n</code></pre>"},{"location":"learning_paths/Step_19/#grouping-data","title":"Grouping Data","text":"<p>We can group data to find insights, such as average Stress level by different levels of <code>desire_to_achieve</code>.</p> <pre><code>avg_stress_by_achievement = df.groupby('desire_to_achieve')['stress'].mean()\nprint(\"Stress by Desire to Achieve:\\n\", avg_stress_by_achievement)\n</code></pre>"},{"location":"learning_paths/Step_19/#4-data-cleaning-and-manipulation","title":"4. Data Cleaning and Manipulation","text":""},{"location":"learning_paths/Step_19/#calculating-letter-grades","title":"Calculating Letter Grades","text":"<p>Add a new column to the dataset that calculates the letter grade for each student's GPA:</p> <pre><code>def calculate_letter_grade(gpa):\n    if gpa &gt;= 3.7:\n        return 'A'\n    elif gpa &gt;= 3.0:\n        return 'B'\n    elif gpa &gt;= 2.0:\n        return 'C'\n    elif gpa &gt;= 1.0:\n        return 'D'\n    else:\n        return 'F'\n\ndf['letter_grade'] = df['gpa'].apply(calculate_letter_grade)\n</code></pre>"},{"location":"learning_paths/Step_19/#create-a-bar-graph-of-letter-grades","title":"Create a Bar Graph of Letter Grades","text":"<p>To visualize the distribution of letter grades, we can create a bar graph:</p> <pre><code>grade_counts = df['letter_grade'].value_counts()\ngrade_counts.plot(kind='bar', title='Letter Grade Distribution')\nplt.xlabel('Letter Grade')\nplt.ylabel('Count')\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_19/#5-saving-processed-data","title":"5. Saving Processed Data","text":"<p>After adding a new column, it\u2019s often useful to save the processed dataset. Here\u2019s how to save it to a new CSV file:</p> <pre><code>df.to_csv('letter_grades_added_happiness_data.csv', index=False)\n</code></pre>"},{"location":"learning_paths/Step_19/#summary","title":"Summary","text":"<p>In this step, you learned:</p> <ul> <li>Loading a CSV file into a Pandas DataFrame</li> <li>Exploring the data using basic summary and statistical methods</li> <li>Analyzing specific columns and relationships between them</li> <li>Cleaning data by handling missing values</li> <li>Saving processed data to a new CSV file</li> </ul> <p>Pandas is a powerful tool for data analysis in Python, allowing you to work with datasets efficiently and discover meaningful insights.</p>"},{"location":"learning_paths/Step_20/","title":"Step 20","text":"<p>In this step, we\u2019ll break down the components of the <code>reaction-time.html</code> file used to create a reaction time experiment that you will participate in for class! Then in step 21, we'll use Pandas to analyze the data we collect.</p> <p>The reaction time experiment is implemented in JavaScript using the jsPsych library, designed to help researchers conduct behavioral science experiments in a web browser.</p> <p>Click this link to download the <code>reaction-time.html</code> file</p> <p>In order to read this file, you'll want to move it to a folder in VSCode, and open it there.</p> <p>Throughout this step, I don't expect you to be learning JavaScript or jsPsych. Instead, I want you to see how the principles you've learned in Python programming apply to other languages and tools. By examining the experiment\u2019s structure and components, you\u2019ll see how programming concepts you\u2019ve learned in Python are used in a different context.</p> <p>We'll also need to cover some basic concepts of experimental design, we'll do that before we dive into the code.</p>"},{"location":"learning_paths/Step_20/#general-principles-of-experimental-design","title":"General Principles of Experimental Design","text":"<p>Let's take a moment to recall (or learn for the first time!) the concepts of the Independent Variable and Dependent Variables in an experiment.</p>"},{"location":"learning_paths/Step_20/#independent-variable-iv","title":"Independent Variable (IV)","text":"<p>The indepdent variable in the experiment is the thing that is being manIpulated - I personally remember this by thinking of the \"I\" in IV. In the reaction time experiement, the independent variable is the color of the circle that is displayed, which requires a specific key press response from the participant depending on the color of the circle.</p>"},{"location":"learning_paths/Step_20/#dependent-variable-dv","title":"Dependent Variable (DV)","text":"<p>The dependent variable in the experiment is the thing that is being measured - in other words, the thing that depends on the manipulated (independent variable). In the reaction time experiment, the dependent variable is the time it takes for the participant to press the correct key after the circle is displayed.</p>"},{"location":"learning_paths/Step_20/#control-variables","title":"Control Variables","text":"<p>Control variables are variables that are kept constant throughout the experiment. In the reaction time experiment, the control variables include the size of the circle, the position of the circle on the screen, and the key press that is required for each color.</p>"},{"location":"learning_paths/Step_20/#data-collection","title":"Data Collection","text":"<p>When programming an experiment, it's critical to think about how you're collecting your data. We'll look at how the data is collected in the reaction time experiment in the code breakdown.</p>"},{"location":"learning_paths/Step_20/#random-and-blocked-designs","title":"Random and Blocked Designs","text":"<p>In the reaction time experiment, there are two different trial types, trials where the circle is blue and trials where the circle is orange. These trials are presented in randomized order, which is a common design in psychology experiments to prevent participants from anticipating the next stimulus.</p> <p>If you wanted to understand how color similarity might make people respond more slowly, you could have an additional \"block\" of trials within the experiment where blue and - let's say, a blue-ish purple - are presented as competing colors. This would allow you to examine the difference in reaction time between the two color pairs of blue and purple, and blue and orange.</p>"},{"location":"learning_paths/Step_20/#jumping-into-the-javascript","title":"Jumping into the JavaScript","text":"<p>Important code blocks will be highlighted in the following sections, but feel free to explore the entire file! If you want to know how the entire code block works, you give the file to ChatGPT or Copilot and ask the chatbot to explain it to you!</p> <p>Many of the decisions for the experiment are made outside of the code. For example, in this experiment, the colors were chosen to be blue and orange. While we will load images into the experiment to show these colors to the participant when we want to display them, the actual color of the circle is not defined in the code. This is a design decision that was made before the experiment was programmed.</p> <p>Similarly, it's not written into the code that the color is the IV, and that reaction time is the DV. These are concepts that are understood by the researcher before the experiment is programmed.</p> <p>Now we'll dive into the pieces of the code that make the experiment run.</p>"},{"location":"learning_paths/Step_20/#test-procedure","title":"Test Procedure","text":"<p>Below is a block of code within the <code>JavaScript</code> called \"<code>test_procedure</code>\", let's break it down:</p> <pre><code>var test_procedure = {\ntimeline: [fixation, test],\ntimeline_variables: test_stimuli,\nrepetitions: 25,\nrandomize_order: true\n};\n</code></pre> <ul> <li><code>timeline</code><ul> <li>The <code>timeline</code> parameter is an array of objects that represent the sequence of events in the experiment. Here, the <code>test_procedure</code> consists of two components: <code>fixation</code> and <code>test</code>. The <code>fixation</code> object displays a fixation cross, while the <code>test</code> object presents the colored circle for the participant to respond to.</li> </ul> </li> <li><code>timeline_variables</code><ul> <li>The <code>timeline_variables</code> parameter specifies the stimuli to be used in the experiment. In this case, <code>test_stimuli</code> is an array of objects containing the color of the circle and the correct response key for each trial.</li> </ul> </li> <li><code>repetitions</code><ul> <li>The <code>repetitions</code> parameter determines how many times the <code>test_procedure</code> is repeated. With 25 repetitions, it tells the experiment to show the orange and blue circles 25 times each, meaning that there will be 50 trials in total.</li> </ul> </li> <li><code>randomize_order</code><ul> <li>The <code>randomize_order</code> parameter specifies whether the order of trials should be randomized. When set to <code>true</code>, the order of trials is randomized to prevent participants from anticipating the next stimulus.</li> </ul> </li> </ul>"},{"location":"learning_paths/Step_20/#loading-images","title":"Loading Images","text":"<p>This experiment uses two images, preloaded at the start to prevent delays during trials. Preloading is crucial when images need to display instantly. Other designs, like experiments requiring many images or complex visuals, may benefit from a more dynamic image-loading approach.</p> <pre><code>var preload = {\ntype: jsPsychPreload,\nimages: ['images/blue.png', 'images/orange.png']\n};\ntimeline.push(preload);\n</code></pre> <p>In simpler terms, this code gets the images ready to be shown at a moment's notice. The <code>jsPsychPreload</code> function is used to preload the images, ensuring they are ready for display when needed.</p>"},{"location":"learning_paths/Step_20/#data-storage-and-csv-export","title":"Data Storage and CSV Export","text":"<p>Data in this experiment is stored in memory by jsPsych, including response accuracy and reaction times. At the experiment\u2019s end, participants see a summary with accuracy and average reaction time. The <code>jsPsych.data.get().csv()</code> method then generates a CSV file of the collected data, downloadable via a button.</p> <pre><code>var jsPsych = initJsPsych({\non_finish: function() {\njsPsych.data.displayData();\ndocument.getElementById('download-csv').style.display = 'block';\ndocument.getElementById('download-csv').onclick = function() {\nvar csv = jsPsych.data.get().csv();\nvar blob = new Blob([csv], { type: 'text/csv' });\nvar url = window.URL.createObjectURL(blob);\nvar a = document.createElement('a');\na.href = url;\na.download = 'reaction_time_data.csv';\na.click();\nwindow.URL.revokeObjectURL(url);\n};\n}\n});\n</code></pre> <p>Let's break down the significant parts of the code block above:</p> <ul> <li><code>jsPsych.data.displayData()</code><ul> <li>This function displays the data collected during the experiment, showing participants their accuracy and average reaction time.</li> </ul> </li> <li><code>var csv = jsPsych.data.get().csv();</code><ul> <li>This line generates a CSV file containing the data collected during the experiment.</li> </ul> </li> <li><code>var blob = new Blob([csv], { type: 'text/csv' });</code><ul> <li>This code block creates a Blob object, which is a file-like object of raw data. In this case, it's a CSV file. A \"Blob\" is a way to store data that can be downloaded as a file.</li> </ul> </li> <li><code>a.download = 'reaction_time_data.csv';</code><ul> <li>This line sets the <code>download</code> attribute of the anchor element to the desired filename for the downloaded CSV file. This allows the participant to download the data as a CSV file named <code>reaction_time_data.csv</code>.</li> </ul> </li> </ul>"},{"location":"learning_paths/Step_20/#connecting-javascript-and-jspsych-to-python-principles","title":"Connecting JavaScript and jsPsych to Python Principles","text":"<p>This experiment may be in JavaScript, but it uses many programming concepts you've learned in Python, let's think through them:</p> <ul> <li>Functions and Initialization: The function <code>initJsPsych()</code> initializes the experiment, just as you've used Python functions to set up programs and prepare data structures.</li> <li>Control Structures (Loops and Conditions): The timeline configuration is structured similarly to Python dictionaries and lists. jsPsych uses objects to store multiple settings (analogous to Python\u2019s dictionaries). Loops and conditional logic, like <code>randomize_order: true</code>, create flexible procedures, just as you\u2019ve seen in Python loops and conditionals.</li> <li>Trial Data Collection: The way trial data is collected and stored in <code>jsPsych.data.get()</code> is similar to Python data management libraries (like <code>Pandas</code>), where you collect, process, and export data. Here, we export as CSV, a format you\u2019ve worked with for storing and analyzing data in Python.</li> <li>Parameter Setting and Modularity: Each <code>timeline</code> component is modular and configured with specific parameters, similar to defining functions with arguments in Python. This modularity in design is essential for scalability and reusability in behavioral science programming.</li> </ul> <p>In summary, although this experiment is in JavaScript, it reinforces core programming concepts: initializing structures, using loops and conditions to control flow, collecting data, and organizing code modularly. </p> <p>These are skills you\u2019ll carry into any programming language, allowing you to adapt tools like jsPsych confidently for experimental design.</p>"},{"location":"learning_paths/Step_20/#looking-for-more","title":"Looking for more?","text":"<p>Check out the jsPSych documentation website to learn more about how to use jsPsych for your own experiments: https://www.jspsych.org/. </p>"},{"location":"learning_paths/Step_21/","title":"Step 21","text":"<p>In this step, we will process and visualize the reaction time data we collected in <code>Step 20</code> using Pandas! We will get this data from a zip file containing many <code>.csv</code> files, where each file contains data from a participant in a reaction time experiment. </p> <p>You will learn to:</p> <ol> <li>Load a zip file of data into Python.</li> <li>Extract and load all <code>.csv</code> files into a single pandas DataFrame.</li> <li>Clean the data to isolate relevant variables. Visualize \"raw\" reaction time data.</li> <li>Aggregate data by participant and analyze mean reaction times.</li> <li>Visualize aggregated data.</li> </ol>"},{"location":"learning_paths/Step_21/#0-download-the-zip-file","title":"0: Download the Zip File","text":"<p>What's a Zip File? A zip file is a compressed folder that contains one or more files. It's a common way to package and share multiple files together.</p> <p>Click here to download the reaction time <code>.zip</code> file</p>"},{"location":"learning_paths/Step_21/#1-load-and-unzip-the-data","title":"1: Load and Unzip the Data","text":"<p>To begin, ensure you have downloaded the zip file. You can unzip it manually or programmatically within Python. Here\u2019s how to do it in Python:</p> <pre><code>import zipfile\nimport os\n\n# Define file paths\nzip_path = 'reaction_time_data.zip' # If you've put your file in the same directory as the notebook you're working in, your path is just the file name. If not, you'll need to include the path to the file.\nextract_path = '.' # This will extract the files to the current directory\n\n# Unzip the file\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    zip_ref.extractall(extract_path)\n</code></pre> <p>After running this code, you should see the extracted <code>.csv</code> files in the specified directory - this will be a lot of files!</p>"},{"location":"learning_paths/Step_21/#2-load-csv-files-into-a-pandas-dataframe","title":"2: Load CSV Files into a Pandas DataFrame","text":"<p>With the files extracted, we can load each <code>.csv</code> file into a DataFrame. Each row in the final DataFrame will represent a trial, with columns for relevant data.</p> <pre><code>import pandas as pd\nimport glob\nimport os\n\n# Path to the directory containing extracted .csv files\ncsv_files = glob.glob(os.path.join(extract_path, '*.csv'))\n\n# Initialize an empty list to store DataFrames\ndfs = []\n\n# Loop through and read each csv file\nfor idx, file in enumerate(csv_files):\n    data = pd.read_csv(file)\n\n    # Extract relevant rows and columns\n    # Filter rows where 'trial_type' is 'response' (indicating a reaction time trial)\n    data = data[data['trial_type'] == 'image-keyboard-response']\n\n    # Select and rename relevant columns\n    df = data[['rt', 'stimulus', 'response', 'correct']].copy()\n    df.rename(columns={\n        'rt': 'reaction_time',\n        'stimulus': 'circle_color',\n        'response': 'key_pressed',\n        'correct': 'accuracy'\n    }, inplace=True)\n\n    # Clean up 'circle_color' to extract only color names\n    df['circle_color'] = df['circle_color'].str.extract(r'images/(\\w+).png')[0]\n\n    # Add subject_id column\n    df['subject_id'] = idx + 1\n\n    # Reorder columns to make 'subject_id' the first column\n    df = df[['subject_id', 'reaction_time', 'circle_color', 'key_pressed', 'accuracy']]\n\n    # Append the processed DataFrame\n    dfs.append(df)\n\n# Concatenate all DataFrames\nall_data = pd.concat(dfs, ignore_index=True)\n</code></pre>"},{"location":"learning_paths/Step_21/#3-clean-and-visualize-reaction-time-data","title":"3: Clean and Visualize Reaction Time Data","text":"<p>Now that we have all trials loaded into a DataFrame, we can start visualizing the reaction time data.</p>"},{"location":"learning_paths/Step_21/#3a-histogram-of-reaction-time-data","title":"3a. Histogram of Reaction Time Data","text":"<p>Use a histogram to explore the distribution of reaction times. Adjust the bin width with an interactive widget.</p> <pre><code>import matplotlib.pyplot as plt\nimport ipywidgets as widgets\n\ndef plot_histogram(bin_width):\n    plt.hist(all_data['reaction_time'].dropna(), bins=bin_width)\n    plt.title('Histogram of Reaction Times')\n    plt.xlabel('Reaction Time (ms)')\n    plt.ylabel('Frequency')\n    plt.show()\n\nwidgets.interactive(plot_histogram, bin_width=widgets.IntSlider(min=5, max=100, step=5, value=20))\n</code></pre>"},{"location":"learning_paths/Step_21/#3b-box-plot-of-mean-reaction-times-by-accuracy","title":"3b. Box Plot of Mean Reaction Times by Accuracy","text":"<p>A box and whisker plot can show differences in reaction times between \"true\" (correct) and \"false\" (incorrect) responses.</p> <p>Seaborn</p> <p>Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. You can install Seaborn using <code>pip install seaborn</code>.</p> <p>In your notebook, you might want to run <code>%pip install seaborn</code> to install Seaborn, instead of the normal pip install.</p> <pre><code>import seaborn as sns\n\n# Plot box and whisker plot for reaction times by accuracy\nsns.boxplot(x='accuracy', y='reaction_time', data=all_data)\nplt.title('Reaction Times by Accuracy')\nplt.xlabel('Accuracy (True or False)')\nplt.ylabel('Reaction Time (ms)')\nplt.show()\n</code></pre> <p>It's great to have a visualization, but it will probably be good to know the means and standard deviation values of these plots as well, let's use Pandas to calculate those!</p> <pre><code>import pandas as pd\n\n# Assuming 'all_data' is your DataFrame\ntrue_responses = all_data[all_data['accuracy'] == True]\nfalse_responses = all_data[all_data['accuracy'] == False]\n\ntrue_mean = true_responses['reaction_time'].mean()\ntrue_sd = true_responses['reaction_time'].std()\n\nfalse_mean = false_responses['reaction_time'].mean()\nfalse_sd = false_responses['reaction_time'].std()\n\n# Print the mean and standard deviation values, and the counts of each group\nprint(f\"True responses - Mean: {true_mean}, SD: {true_sd}, Count: {len(true_responses)}\")\nprint(f\"False responses - Mean: {false_mean}, SD: {false_sd}, Count: {len(false_responses)}\")\n</code></pre>"},{"location":"learning_paths/Step_21/#think-about-the-data","title":"Think about the data","text":"<p>Look at the means and standard deviations. What do you think a paired t-test would show? What problem arrises when we look at the \"Count\" of each data type?</p>"},{"location":"learning_paths/Step_21/#4-aggregate-mean-reaction-times-by-participantsubject","title":"4: Aggregate Mean Reaction Times by Participant/Subject","text":"<p>Next, let\u2019s condense the data to calculate each subject's mean reaction time and the number of \"true\" (correct) trials out of 50.</p> <pre><code># Calculate mean reaction times and true trial counts\nsubject_summary = all_data.groupby('subject_id').agg(\n    mean_reaction_time=('reaction_time', 'mean'),\n    true_count=('accuracy', lambda x: (x == True).sum())\n).reset_index()\n</code></pre>"},{"location":"learning_paths/Step_21/#5-visualize-mean-reaction-time-data","title":"5: Visualize Mean Reaction Time Data","text":""},{"location":"learning_paths/Step_21/#5a-histogram-of-mean-reaction-times","title":"5a. Histogram of Mean Reaction Times","text":"<p>Plot a histogram of mean reaction times for each participant.</p> <pre><code>plt.hist(subject_summary['mean_reaction_time'], bins=20)\nplt.title('Histogram of Mean Reaction Times by subject')\nplt.xlabel('Mean Reaction Time (ms)')\nplt.ylabel('Frequency')\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_21/#5b-scatterplot-of-reaction-time-and-true-responses","title":"5b. Scatterplot of Reaction Time and % \"True\" Responses","text":"<p>Plot a scatterplot to explore the relationship between subjects\u2019 mean reaction times and their accuracy rate.</p> <pre><code># Calculate accuracy percentage\nsubject_summary['true_percentage'] = (subject_summary['true_count'] / 50) * 100\n\n# Scatterplot of mean reaction time vs. true percentage\nplt.scatter(subject_summary['mean_reaction_time'], subject_summary['true_percentage'])\nplt.title('Mean Reaction Time vs. % True Responses')\nplt.xlabel('Mean Reaction Time (ms)')\nplt.ylabel('% True Responses')\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_21/#6-have-fun-with-it","title":"6. Have fun with it!","text":"<p>Take time to play with Seaborn and Matplotlib to create more visualizations and explore the data further. You can also experiment with different data transformations and analysis techniques to gain deeper insights!</p> <p>Dig into the Pandas dataframe, look at the data, and see if you can find any interesting patterns or relationships.</p> <pre><code># Display the first few rows of the DataFrame\nall_data.head()\n</code></pre> <p>You can grab different columns and plot them against each other to see if there are any relationships. For example, you could plot the reaction time against the color of the circle that was shown to the participant.</p>"},{"location":"learning_paths/Step_21/#7-review","title":"7. Review","text":"<p>In this step, you\u2019ve learned how to handle, clean, and visualize reaction time data using pandas, matplotlib, and seaborn. In a future step, we'll look at how to analyze this data statistically to draw meaningful conclusions!</p>"},{"location":"learning_paths/Step_22/","title":"Step 22","text":""},{"location":"learning_paths/Step_22/#basic-statistics","title":"Basic Statistics","text":"<p>In this step, we'll apply statistical methods to the reaction time dataset generated in the previous steps. This dataset includes data related to reaction times for trials where the independent variable (IV) is the color of a circle. Here's what we aim to accomplish:</p>"},{"location":"learning_paths/Step_22/#objectives","title":"Objectives","text":"<ol> <li>Establish the dataset.</li> <li>Compute basic descriptives and create plots suitable for a paired samples t-test.</li> <li>Perform and interpret a paired samples t-test.</li> <li>Manipulate the dataset to add an additional variable, previous circle color.</li> <li>Set up and run a two-way ANOVA to investigate interactions between the current circle color and the previous circle color.</li> </ol>"},{"location":"learning_paths/Step_22/#1-establish-the-dataset","title":"1: Establish the Dataset","text":"<p>We will start with the <code>all_data</code> dataset generated in Step 21. This dataset contains reaction times for trials where the circle color is the independent variable.</p> <p>Go back to Step 21 to get the <code>all_data</code> dataframe, when you do you should be able to run the code below and get the following result.</p> <p>Code:</p> <pre><code>all_data.head()\n</code></pre> <p>Result: <pre><code>    subject_id  reaction_time   circle_color    key_pressed accuracy\n0       1           445.0           orange          j          True\n1       1           386.0           blue            f          True\n2       1           366.0           blue            f          True\n3       1           374.0           orange          j          True\n4       1           409.0           orange          j          True\n</code></pre></p>"},{"location":"learning_paths/Step_22/#2-descriptives-and-paired-samples-t-test-preparation","title":"2: Descriptives and Paired Samples T-Test Preparation","text":"<p>To prepare for the paired samples t-test: - Compute summary statistics for each circle color. - Visualize the data with plots to check assumptions like normality.</p> <pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group by circle color and calculate summary statistics\ndescriptives = all_data.groupby('circle_color')['reaction_time'].describe()\n\n# Boxplot to visualize reaction times by circle color\nsns.boxplot(x='circle_color', y='reaction_time', data=all_data)\nplt.title('Reaction Times by Circle Color')\nplt.show()\n\n# Print descriptive statistics\nprint(descriptives)\n</code></pre>"},{"location":"learning_paths/Step_22/#3-perform-the-paired-samples-t-test","title":"3: Perform the Paired Samples T-Test","text":"<p>A paired samples t-test compares reaction times between two conditions.</p> <p>pip install <code>scipy</code></p> <p>At this point you'll most likely need to install the <code>scipy</code> package. You can do this by running <code>%pip install scipy</code> in your notebook.</p> <p>What's <code>scipy</code>? Think of it as \"scientific Python\" - it's a library that provides many user-friendly and efficient numerical routines andf functions that are commonly used in scientific and engineering applications.</p> <pre><code>from scipy.stats import ttest_rel\n\n# Perform paired t-test\ngroup1 = all_data[all_data['circle_color'] == 'orange']['reaction_time'] # Orange circle\ngroup2 = all_data[all_data['circle_color'] == 'blue']['reaction_time'] # Blue circle\n\nt_stat, p_value = ttest_rel(group1, group2)\n\n# Display results\nprint(f\"Paired Samples T-Test:\\nT-Statistic = {t_stat}, p-value = {p_value}\")\n</code></pre> <p>Interpretation: Based on the p-value, determine if there is a significant difference between reaction times for orange and blue circles.</p> Check your results<p>If you ran it correctly, you should get the following output: <pre><code># Paired Samples T-Test:\n# T-Statistic = -0.2520879211177987, p-value = 0.8010674499745879\n</code></pre> The p-value is greater than 0.05, indicating that there is no significant difference between reaction times for orange and blue circles.</p> <p>Is this surprising? No not really! The data didn't appear to be significantly different in the boxplot, and we don't have a good reason to think that the color of the circle alone would affect reaction times.</p>"},{"location":"learning_paths/Step_22/#4-add-previous-circle-color-variable","title":"4: Add Previous Circle Color Variable","text":"<p>To explore potential effects of previous circle color, add this column to the dataset. The first trial is excluded as it lacks a \"previous\" circle.</p> <pre><code># Shift the 'circle_color' column to create the 'previous_circle_color' column\nall_data['previous_circle_color'] = all_data['circle_color'].shift(1)\n\n# Remove the first trial or row of data from every subject\nall_data = all_data.groupby('subject_id').apply(lambda x: x.iloc[1:]).reset_index(drop=True)\n\n# Display the updated dataset\nprint(all_data.head())\n</code></pre> <p>Lambda Functions</p> <p>In the code above, we used a lambda function to remove the first trial or row of data from every subject. Lambda functions are small, anonymous functions that can have any number of arguments but only one expression. They are often used in situations where a function is needed for a short period of time.</p> <p>Be on the lookout for a \"Side Quest\" where you can learn more about lambda functions!</p> <p>I have a hypothesis; if the previous circle color was the same as the current circle color, the reaction time will be faster. Let's see if this is true!</p> <p>To make our live's easier, we'll create a new column to include a new variable, <code>repeat_color</code>, which will be <code>True</code> if the previous circle color is the same as the current circle color, and <code>False</code> otherwise.</p> <pre><code># Create a new column 'same_color' to indicate if the previous circle color is the same as the current circle color\nall_data['repeat_color'] = all_data['circle_color'] == all_data['previous_circle_color']\nall_data.head()\n</code></pre> <p>In the next part, we'll perform an additional t-test to see if there is a significant difference in reaction times between trials where the previous circle color is the same as the current circle color and trials where it is different.</p>"},{"location":"learning_paths/Step_22/#5-another-paired-samples-t-test","title":"5: Another Paired Samples T-Test","text":"<p>Based on the code in part 3, I'd like for you to look at the code and then think about how you'd set it up yourself. After you think/test it, continue reading below.</p>"},{"location":"learning_paths/Step_22/#some-snags-in-the-plan","title":"Some Snags in the Plan","text":"<p>A problem arrises if you simply group the data by <code>repeat_color</code> and then run the t-test. The issue is that we no longer have equal sample sizes for each group, this is because, randomly, we ended up with 250 trials where the previous circle color was the same as the current circle color, and 828 trials where they were different.</p> <p>Run the following code and you'll get an <code>ValueError: unequal length arrays</code> error.</p> <pre><code># Perform paired t-test\ngroup1 = all_data[all_data['repeat_color'] == True]['reaction_time']  # Repeat color is True\ngroup2 = all_data[all_data['repeat_color'] == False]['reaction_time']  # Repeat color is False\n\nt_stat, p_value = ttest_rel(group1, group2)\n\n# Display results\nprint(f\"Paired Samples T-Test:\\nT-Statistic = {t_stat}, p-value = {p_value}\")\n\n# Boxplot visualization\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='repeat_color', y='reaction_time', data=all_data)\nplt.title('Reaction Time by Repeat Color')\nplt.xlabel('Repeat Color')\nplt.ylabel('Reaction Time')\nplt.show()\n</code></pre> <p>We can run this block of code below to demonstrate that the two arrays are indeed unequal lengths:</p> <pre><code>import numpy as np\n\nnp.shape(group1), np.shape(group2)\n</code></pre>"},{"location":"learning_paths/Step_22/#fixing-the-issue","title":"Fixing the Issue","text":"<p>One way to fix the problem (an imperfect, but fine way for quick data visualization and exploration) is to randomly sample 250 trials from the <code>repeat_color == False</code> group. This way, we'll have equal sample sizes for both groups.</p> <p>Let's do that below, and then perform the t-test and plot the results.</p> <pre><code># Randomly sample 250 trials from the 'repeat_color' == False group\n\ngroup2_sample = all_data[all_data['repeat_color'] == False].sample(n=250, random_state=1)['reaction_time']\n\nt_stat, p_value = ttest_rel(group1, group2_sample)\n\n# Display results\nprint(f\"Paired Samples T-Test:\\nT-Statistic = {t_stat}, p-value = {p_value}\")\n\n# Get descriptive statistics\ngroup1_desc = group1.describe()\ngroup2_desc = group2_sample.describe()\n\nprint(\"\\nDescriptive Statistics for Group 1 (Repeat Color is True):\")\nprint(group1_desc)\n\nprint(\"\\nDescriptive Statistics for Group 2 (Repeat Color is False):\")\nprint(group2_desc)\n\n# Boxplot visualization\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='repeat_color', y='reaction_time', data=all_data)\nplt.title('Reaction Time by Repeat Color')\nplt.xlabel('Repeat Color')\nplt.ylabel('Reaction Time')\nplt.show()\n</code></pre> <p>By making the random_state equal to 1, we ensure that the random sample is the same every time we run the code. This way, we can reproduce the results and compare them across different runs.</p> <p>This should also mean you see the same result that I do: it looks like there is no significant difference between reaction times when the previous circle color is the same as the current circle color compared to when they are different. It was a cool idea though, right?!</p>"},{"location":"learning_paths/Step_22/#6-two-way-anova","title":"6: Two-Way ANOVA","text":"<p>There's one more thing that I'd like for us to explore: the possible effect and interaction between subjects...</p> <p>We can set up a two-way ANOVA to investigate the effects of the current circle color, the previous circle color, and their interaction on reaction times.</p> <p>%pip install statsmodels</p> <p>To run the two-way ANOVA, you'll need to install the <code>statsmodels</code> package. You can do this by running <code>%pip install statsmodels</code> in your notebook.</p> <pre><code>import statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Fit the two-way ANOVA model\nmodel = ols('reaction_time ~ C(subject_id) + C(circle_color) + C(subject_id):C(circle_color)', data=all_data).fit()\nanova_table = sm.stats.anova_lm(model, typ=2)\n\n# Display the ANOVA table\nprint(anova_table)\n\n# Boxplot visualization\nplt.figure(figsize=(12, 8))\nsns.boxplot(x='circle_color', y='reaction_time', hue='subject_id', data=all_data)\nplt.title('Reaction Time by Circle Color and Subject ID')\nplt.xlabel('Circle Color')\nplt.ylabel('Reaction Time')\nplt.legend(title='Subject ID', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n</code></pre> <p>If everything has gone smoothly, your resulting ANOVA table should look like this: <pre><code>                                     sum_sq      df          F        PR(&gt;F)\nC(subject_id)                  3.327539e+06    21.0  11.095641  1.533542e-33\nC(circle_color)                1.209871e+03     1.0   0.084720  7.710580e-01\nC(subject_id):C(circle_color)  2.686349e+05    21.0   0.895760  5.971599e-01\nResidual                       1.476631e+07  1034.0        NaN           NaN\n</code></pre></p> <p>The last column is your p-value in scientific notation; we can see that the only significant effect is the subject ID. This is not surprising, as we would expect that different subjects would have different reaction times.</p> <p>What does this mean? It means that the color of the circle and the interaction between the color of the circle and the subject ID do not have a significant effect on reaction times, but different people do have different reaction times.</p> <p>Now you've run a two-way ANOVA in Python! This is a powerful tool for analyzing the effects of multiple factors on a dependent variable.</p>"},{"location":"learning_paths/Step_22/#conclusion","title":"Conclusion","text":"<p>In this step, we:</p> <ul> <li>Established the reaction time dataset and computed basic statistics.</li> <li>Conducted a paired samples t-test to evaluate differences between orange and blue circles.</li> <li>Introduced a new variable (same circle color), and randomly sampled to ensure equal sample sizes for a second t-test.</li> <li>Performed a two-way ANOVA and visualized all of the data.</li> </ul> <p>What are some things we didn't do?</p> <ul> <li>We didn't check for normality or homogeneity of variance in the t-tests or ANOVA.</li> <li>We didn't explore other statistical tests or models that could be applied to this dataset (Logistic Regression would be great, for example).</li> <li>We didn't remove outliers, this could have changed the results of the t-tests and ANOVA.</li> </ul> <p>Take a moment to think about what else you'd like to explore with this dataset. What other statistical tests or models could be applied? What additional variables could be included to enhance the analysis? If you're brave enough, try to implement some of these ideas!</p>"},{"location":"learning_paths/Step_23/","title":"Step 23","text":""},{"location":"learning_paths/Step_23/#data-dive-i-finding-data","title":"Data Dive I: Finding Data","text":"<p>Your journey into data analysis starts with finding an interesting dataset. For this step, you can either:</p> <ol> <li> <p>Search for Open Datasets: Explore open-source datasets available on platforms like Kaggle, Data.gov, or Google Dataset Search.</p> </li> <li> <p>Download Personal Data: Many services allow you to download your personal data (e.g., Instagram, Spotify, or Google). Make sure the downloaded data is in a workable format such as <code>json</code>, <code>csv</code>, or <code>txt</code>. If you want to work with your own data, Google how to download it from the respective service.</p> </li> </ol>"},{"location":"learning_paths/Step_23/#preparing-for-import","title":"Preparing for Import","text":"<p>Once you have your data:</p> <ul> <li>Ensure the dataset is saved locally in a known file path.</li> <li>Check the file format (e.g., <code>.csv</code>, <code>.json</code>, <code>.txt</code>) as it will guide how you load it into Python.</li> </ul>"},{"location":"learning_paths/Step_23/#using-ai-to-help-format-your-data","title":"Using AI to Help Format Your Data","text":"<p>Organizing raw data can be challenging, especially if the dataset has many columns or uses inconsistent formatting. AI tools like ChatGPT, Claude, and Microsoft Copilot can help you write Python code to clean and organize your data.</p>"},{"location":"learning_paths/Step_23/#best-practices-when-using-ai-tools","title":"Best Practices When Using AI Tools","text":"<ol> <li>Feed Your Datafile: Many AI tools allow you to upload your dataset directly for analysis. Uploading your file can help the AI better understand your data structure.</li> <li>Provide Context: Clearly describe what you're trying to achieve, such as renaming columns, handling missing values, or filtering rows.</li> <li>Iterate: If the AI-generated code doesn\u2019t work perfectly, provide feedback and ask for adjustments.</li> </ol>"},{"location":"learning_paths/Step_23/#example-prompts-for-using-ai","title":"Example Prompts for Using AI","text":"<p>Here are some sample prompts to get you started:</p>"},{"location":"learning_paths/Step_23/#prompt-1-general-formatting","title":"Prompt 1: General Formatting","text":"<p>\"I have a dataset in CSV format with inconsistent column names. Here's a sample of the data: [paste or upload your dataset]. Could you help me write Python code using Pandas to clean the column names (e.g., make them lowercase and replace spaces with underscores) and handle missing values by filling them with 0?\"</p>"},{"location":"learning_paths/Step_23/#prompt-2-renaming-columns","title":"Prompt 2: Renaming Columns","text":"<p>\"Here\u2019s my dataset: [paste or upload]. I want to rename the column <code>Old Column Name</code> to <code>new_column_name</code>. Could you provide the Pandas code to do this?\"</p>"},{"location":"learning_paths/Step_23/#prompt-3-filtering-rows","title":"Prompt 3: Filtering Rows","text":"<p>\"My dataset has a column called <code>age</code>. Could you write Python code using Pandas to filter out rows where the age is less than 18? Here\u2019s the data: [paste or upload].\"</p>"},{"location":"learning_paths/Step_23/#prompt-4-creating-new-columns","title":"Prompt 4: Creating New Columns","text":"<p>\"I have this dataset: [paste or upload]. I\u2019d like to create a new column that calculates the ratio of <code>sales</code> to <code>profit</code>. Could you help me write the code for that in Pandas?\"</p>"},{"location":"learning_paths/Step_23/#prompt-5-data-structure-insights","title":"Prompt 5: Data Structure Insights","text":"<p>\"Here\u2019s my dataset: [paste or upload]. Could you provide a summary of the dataset, including column data types and a preview of the first few rows? Also, suggest any obvious cleaning steps that might be necessary.\"</p>"},{"location":"learning_paths/Step_23/#why-use-ai","title":"Why Use AI?","text":"<p>AI tools can speed up your workflow, reduce errors, and give you creative ideas for working with your data. However, it's essential to understand the basics of Pandas so you can verify and tweak the code generated by the AI.</p> <p>How do you get the basics of Pandas down? By practicing and looking things up! In previous learning steps, we've used Pandas to do a variety of tasks, such as filtering data, creating new columns, and summarizing data. Go back and look at what we did, look up function names in the Pandas documentation (linked here), and practice using Pandas on your own data.</p>"},{"location":"learning_paths/Step_23/#importing-data-into-pandas","title":"Importing Data into Pandas","text":"<p>Follow these steps to import and organize your data into a Pandas DataFrame:</p>"},{"location":"learning_paths/Step_23/#1-setting-up","title":"1. Setting Up","text":"<p>Start by importing the necessary libraries.</p> <pre><code>import pandas as pd\nimport json  # Only if your dataset is in JSON format\n\n# Add more libraries if needed (e.g., os for file management)\n</code></pre>"},{"location":"learning_paths/Step_23/#2-loading-data-based-on-file-type","title":"2. Loading Data Based on File Type","text":""},{"location":"learning_paths/Step_23/#for-csv-files","title":"For CSV Files:","text":"<pre><code># Replace 'your_dataset.csv' with your file's name\nfile_path = 'your_dataset.csv'\ndata = pd.read_csv(file_path)\n\n# Preview the first few rows\nprint(data.head())\n</code></pre>"},{"location":"learning_paths/Step_23/#for-json-files","title":"For JSON Files:","text":"<pre><code># Replace 'your_dataset.json' with your file's name\nfile_path = 'your_dataset.json'\nwith open(file_path, 'r') as file:\n    data = json.load(file)\n\n# Convert JSON data into a DataFrame\ndf = pd.DataFrame(data)\nprint(df.head())\n</code></pre>"},{"location":"learning_paths/Step_23/#for-txt-files-delimited","title":"For TXT Files (Delimited):","text":"<pre><code># Replace 'your_dataset.txt' with your file's name and delimiter (e.g., '\\t' for tab-delimited)\nfile_path = 'your_dataset.txt'\ndata = pd.read_csv(file_path, delimiter='\\t')\n\n# Preview the first few rows\nprint(data.head())\n</code></pre>"},{"location":"learning_paths/Step_23/#3-cleaning-and-organizing-the-dataframe","title":"3. Cleaning and Organizing the DataFrame","text":"<p>Once your data is loaded, ensure it's organized and meaningful:</p> <p>Keep looking at your DataFrame</p> <p>As you clean and organize your data, keep checking the DataFrame to ensure it's structured the way you want. Use <code>print(data.head())</code> to preview the first few rows and <code>print(data.info())</code> to get an overview of the columns and data types.</p> <ul> <li> <p>Inspect the structure:   <pre><code>print(data.info())  # Overview of columns and data types\n</code></pre></p> </li> <li> <p>Rename columns if needed:   <pre><code>data.rename(columns={'old_column_name': 'new_column_name'}, inplace=True)\n</code></pre></p> </li> <li> <p>Filter unnecessary rows/columns:   <pre><code># Dropping a column\ndata.drop(columns=['unnecessary_column'], inplace=True)\n\n# Keeping specific rows\ndata = data[data['column_name'] &gt; threshold_value]\n</code></pre></p> </li> <li> <p>Handle missing values:   <pre><code>data.fillna(value=default_value, inplace=True)  # Fill missing values\ndata.dropna(inplace=True)  # Optionally drop rows with missing values\n</code></pre></p> </li> </ul>"},{"location":"learning_paths/Step_23/#conclusion","title":"Conclusion","text":"<p>At this stage, you should have:</p> <ul> <li>Located and downloaded an interesting dataset.</li> <li>Used AI tools (optional but highly recommended!) to assist in formatting and organizing your data.</li> <li>Imported it into Python using Pandas.</li> <li>Organized the dataset to ensure meaningful rows and columns.</li> </ul> <p>Once you're comfortable with the structure of your data, you're ready to dive into visualizations in Step 24!</p>"},{"location":"learning_paths/Step_24/","title":"Step 24","text":"<p>In this step, we explore fine-tuning Matplotlib visualizations for enhanced customizability. We'll use the <code>all_data</code> dataset generated in Step 21 to create overlapping histograms with Probability Density Functions (PDFs) and legends. Along the way, we'll explain specific parts of the code you'll modify or customize in each section.</p>"},{"location":"learning_paths/Step_24/#1-setting-up-our-data","title":"1. Setting Up Our Data","text":"<p>We start by filtering the <code>all_data</code> dataframe to create two datasets based on <code>circle_color</code>. These will serve as the reaction time data for the two groups (orange and blue).</p> <p>Dataset Setup:</p> <ul> <li><code>orange_reactiontime_df</code>: Contains reaction times for trials where <code>circle_color</code> is <code>'orange'</code>.</li> <li><code>blue_reactiontime_df</code>: Contains reaction times for trials where <code>circle_color</code> is <code>'blue'</code>.</li> </ul> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Assuming all_data is already loaded\n# If you do not have it yet, go back to Step 21 and load it as instructed\nall_data = pd.read_csv('reaction_time_data.csv')  # Replace with actual file path\n# If you've already got `all_data` loaded, you can skip this step by commenting it out\n\n# Create datasets for the two groups\norange_reactiontime_df = all_data[all_data['circle_color'] == 'orange']['reaction_time']\nblue_reactiontime_df = all_data[all_data['circle_color'] == 'blue']['reaction_time']\n\n# Preview the datasets\nprint(\"Orange Reaction Times:\\n\", orange_reactiontime_df.head())\nprint(\"Blue Reaction Times:\\n\", blue_reactiontime_df.head())\n</code></pre> <p>Key Parts to Check:</p> <ul> <li>Ensure <code>all_data</code> is loaded correctly and contains the expected columns (<code>reaction_time</code>, <code>circle_color</code>).</li> <li>Replace <code>'reaction_time_data.csv'</code> with the actual file name/path if needed.</li> </ul>"},{"location":"learning_paths/Step_24/#2-creating-independent-histograms","title":"2. Creating Independent Histograms","text":"<p>Now that we have two different dataframes, lSet's create histograms for the orange and blue reaction times individually.</p> <pre><code># Orange Reaction Time Histogram\nplt.figure(figsize=(8, 6))\nplt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.6, label='Orange')\nplt.title('Histogram of Reaction Times: Orange')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Frequency')\nplt.show()\n\n# Blue Reaction Time Histogram\nplt.figure(figsize=(8, 6))\nplt.hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.6, label='Blue')\nplt.title('Histogram of Reaction Times: Blue')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Frequency')\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li><code>bins=20</code>: Adjust the number of bins (granularity) if needed.</li> <li><code>color='orange'</code> and <code>color='blue'</code>: Customize colors as desired.</li> <li><code>alpha=0.6</code>: Adjust transparency (range: 0 to 1).</li> </ul> <p>IpyWidget to Play with <code>alpha</code> value</p> <p>You can use an IpyWidget to interactively adjust the <code>alpha</code> value and see the visual effect it has on the histogram. </p> <p>This will be cooler to do when we overlap our histograms later, but for now here's an example:</p> <pre><code>from ipywidgets import interact\n\n@interact(alpha=(0, 1, 0.05))\ndef plot_histogram(alpha=0.6):\n    plt.figure(figsize=(8, 6))\n    plt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=alpha, label='Orange')\n    plt.title('Histogram of Reaction Times: Orange')\n    plt.xlabel('Reaction Time (ms)')\n    plt.ylabel('Frequency')\n    plt.show()\n</code></pre> <p>This code snippet creates an interactive slider for the <code>alpha</code> value, allowing you to see the histogram change in real-time.</p> <p>What other ways could you use an IpyWidgets to interact with your data?</p>"},{"location":"learning_paths/Step_24/#3-combining-into-a-two-paneled-plot","title":"3. Combining into a Two-Paneled Plot","text":"<p>Two histograms are cool, but it would be nice if they were attached/connected in some way. We can create a side-by-side comparison of the two histograms using subplots!</p> <p>To do this, we'll set up a <code>fig</code> figure object with a corresponding <code>axs</code> array to hold the two subplots and then plot the histograms for orange and blue reaction times in each panel.</p> <pre><code>fig, axs = plt.subplots(1, 2, figsize=(12, 6), constrained_layout=True)\n\n# Panel 1: Orange\naxs[0].hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.6, label='Orange')\naxs[0].set_title('Orange Reaction Times')\naxs[0].set_xlabel('Reaction Time (ms)')\naxs[0].set_ylabel('Frequency')\n\n# Panel 2: Blue\naxs[1].hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.6, label='Blue')\naxs[1].set_title('Blue Reaction Times')\naxs[1].set_xlabel('Reaction Time (ms)')\n\nplt.suptitle('Reaction Times by Circle Color')\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li><code>figsize=(12, 6)</code>: Change plot size if necessary.</li> <li>Customize subplot titles and labels as needed.</li> </ul> <p>figure fun</p> <p>You can also use the <code>fig</code> object to save your figure to a file. For example, <code>fig.savefig('reaction_time_histograms.png')</code> will save the figure as a PNG file in the current directory.</p> <p>You can also adjust the layout using <code>fig.tight_layout()</code>, or set a global title with <code>fig.suptitle('Overall Title')</code>.</p>"},{"location":"learning_paths/Step_24/#4-overlapping-histograms-with-pdfs","title":"4. Overlapping Histograms with PDFs","text":"<p>One of my favorite ways to display/compare histograms is to combine the two datasets into a single plot, overlaying histograms. We can then calculate and plot probability density function for each dataset to visualize the distribution more clearly.</p> <p>What's a Probability Density Function (PDF)?</p> <p>A Probability Density Function (PDF) is a statistical function that describes the likelihood of a continuous random variable falling within a particular range. In this case, we're using the normal distribution PDF to model the reaction time data.</p> <p>The <code>norm.pdf()</code> function from <code>scipy.stats</code> calculates the PDF of a normal distribution given a set of values, mean, and standard deviation.</p> <p>The normal curve helps us visualize how the data is distributed around the mean and how likely certain values are.</p> <pre><code>plt.figure(figsize=(10, 6))\n\n# Orange Histogram and Curve\nplt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.4, label='Orange', density=True)\nplt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    label='Orange PDF',\n)\n\n# Blue Histogram and Curve\nplt.hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.4, label='Blue', density=True)\nplt.plot(\n    np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n        np.mean(blue_reactiontime_df),\n        np.std(blue_reactiontime_df),\n    ),\n    color='blue',\n    linestyle='-',\n    linewidth=2,\n    label='Blue PDF',\n)\n\nplt.title('Overlapping Reaction Time Histograms with PDF Curves')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Density')\nplt.legend()\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li>Adjust the <code>np.linspace</code> range to fit the specific dataset more tightly.</li> <li>Modify <code>linestyle='--'</code> or <code>linewidth=2</code> for the curves as needed.</li> </ul>"},{"location":"learning_paths/Step_24/#breaking-down-the-pdf-calculation","title":"Breaking down the PDF Calculation:","text":"<p>The following code snippet is what calculates the PDF line for the orange histogram:</p> <pre><code>plt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    label='Orange PDF Curve',\n)\n</code></pre> <p>Let's break it down piece by piece:</p> <ul> <li><code>np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500)</code>: This creates 500 evenly spaced points between the minimum and maximum reaction times in the orange dataset. This range is used to calculate the PDF values.</li> <li><code>norm.pdf(...)</code>: This calculates the PDF values for the given range using the mean and standard deviation of the orange dataset.</li> <li><code>np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500)</code>: This is the range of x-values for the PDF curve, we repeat it here to ensure the x-values match the PDF values.</li> <li><code>np.mean(orange_reactiontime_df)</code>: The mean of the orange reaction times. This is used as the center of the normal distribution.</li> <li><code>np.std(orange_reactiontime_df)</code>: The standard deviation of the orange reaction times. This controls the spread of the normal distribution.</li> <li>color, linestyle, linewidth, label: These are used to customize the appearance of the PDF curve and how it appears in the legend (respectively).</li> </ul>"},{"location":"learning_paths/Step_24/#5-fine-tuning-and-customizing","title":"5. Fine-Tuning and Customizing","text":"<p>Add legends, gridlines, and vertical lines indicating mean reaction times.</p> <pre><code>plt.figure(figsize=(10, 6))\n\n# Histograms\nplt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.5, label='Orange', density=True)\nplt.hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.5, label='Blue', density=True)\n\n# PDFs\nplt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    label='Orange PDF Curve',\n)\nplt.plot(\n    np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n        np.mean(blue_reactiontime_df),\n        np.std(blue_reactiontime_df),\n    ),\n    color='blue',\n    linestyle='-',\n    linewidth=2,\n    label='Blue PDF Curve',\n)\n\n# Customizations\nplt.title('Customized Reaction Time Histograms')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Density')\nplt.grid(visible=True, which='both', linestyle='--', alpha=0.6)\nplt.axvline(np.mean(orange_reactiontime_df), color='orange', linestyle='-', label='Mean Orange')\nplt.axvline(np.mean(blue_reactiontime_df), color='blue', linestyle='-', label='Mean Blue')\nplt.legend(loc='upper right', frameon=True, fontsize=10)\n\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li>Adjust <code>plt.grid(...)</code> for appearance.</li> <li>Add or adjust vertical lines (<code>plt.axvline(...)</code>) for additional statistical markers.</li> </ul>"},{"location":"learning_paths/Step_24/#6-cleaning-up-your-figure","title":"6. Cleaning Up Your Figure","text":"<p>One thing you might notice is that at this point, our figure is pretty bloated. We really don't need all that information hanging out in the legend, for example.</p> <p>We can spend some time going back into our figure and cleaning up the code to make it appear a bit nicer, and more publication-ready. We can...</p> <ul> <li>Remove unnecessary labels from the legend.</li> <li>Adjust the font size of the legend so that they're all legible.</li> <li>Remove the gridlines if they're not necessary.</li> <li>Adjust the bin size of the histograms so that they're the same width for both groups.</li> <li>Remove tick marks on the y-axis to clean up the figure.</li> </ul>"},{"location":"learning_paths/Step_24/#first-were-going-to-calculate-bin-sizes-for-the-histograms-so-that-theyre-the-same-width-for-both-groups","title":"First, we're going to calculate bin sizes for the histograms so that they're the same width for both groups.","text":"<pre><code># Define bin size\nbin_size = 50  # for example, 50 ms\n\n# Calculate bin edges\norange_bins = np.arange(min(orange_reactiontime_df), max(orange_reactiontime_df) + bin_size, bin_size)\nblue_bins = np.arange(min(blue_reactiontime_df), max(blue_reactiontime_df) + bin_size, bin_size)\n</code></pre>"},{"location":"learning_paths/Step_24/#now-well-implement-these-bin-sizes-in-our-histograms","title":"Now, we'll implement these bin sizes in our histograms.","text":"<pre><code>plt.figure(figsize=(10, 6))\n\n# Histograms\nplt.hist(orange_reactiontime_df, bins=orange_bins, color='orange', alpha=0.5, label='Orange', density=True)\nplt.hist(blue_reactiontime_df, bins=blue_bins, color='blue', alpha=0.5, label='Blue', density=True)\n\n# PDFs\nplt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    # remove unnecessary legend label; orange = color orange, blue = blue.\n)\nplt.plot(\n    np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n        np.mean(blue_reactiontime_df),\n        np.std(blue_reactiontime_df),\n    ),\n    color='blue',\n    linestyle='-',\n    linewidth=2,\n)\n\n# Customizations\nplt.title('Customized Reaction Time Histograms', fontsize=20)\nplt.xlabel('Reaction Time (ms)', fontsize=16)\nplt.ylabel('Density', fontsize=16)\nplt.grid(visible=True, which='both', linestyle='-', alpha=0.6) # Change linestyle to '-'\nplt.axvline(np.mean(orange_reactiontime_df), color='orange', linestyle='-')\nplt.axvline(np.mean(blue_reactiontime_df), color='blue', linestyle='-')\n\n# Clean up the legend\nplt.legend(loc='upper right', frameon=True, fontsize=12) # Increase font size\nplt.tick_params(axis='both', which='both', length=0) # Hide tick marks on the edge\n\nplt.show()\n</code></pre>"},{"location":"learning_paths/Step_24/#other-things-to-consider","title":"Other things to consider","text":"<p>There are more ways you could customize this plot...</p> <ul> <li>You could add texture to the bars of the histogram to make them more visually distinct</li> <li>You could make sure your histograms start at the same value so that the bins are perfectly aligned</li> <li>... and more!</li> </ul>"},{"location":"learning_paths/Step_24/#summary","title":"Summary","text":"<p>In this final step of our learning path, we've explored fine-tuning Matplotlib visualizations to create publication-quality figures. By layering histograms, PDFs, and annotations, we've enhanced the clarity and visual appeal of our data representations. These techniques can be applied to a wide range of datasets and research questions, allowing you to create compelling visualizations that effectively communicate your findings.</p> <p>Now you should have everything you need to create a publication-quality figure in Python!</p>"},{"location":"learning_paths/Step_25/","title":"Step 25 - What Next?","text":"<p>By now, you should have completed your programming journey and the content of this course!</p> <p>Take a moment to congratulate yourself on your hard work and dedication. You have learned a lot and should be proud of your accomplishments!</p>"},{"location":"learning_paths/Step_25/#first-thank-you","title":"First, Thank you","text":"<p>Being able to build and share this course material with you means a lot to me - the journey of learning to enjoy programming is exciting for me! A special thanks to the students who signed up for my first 3010 class. Without you, this wouldn't exist.</p> <p>I don't expect all of you to fall in love with programming like I have, but I hope that at least you've learned about and have grown to appreciate the role that programming plays in your life.</p>"},{"location":"learning_paths/Step_25/#looking-for-more","title":"Looking for more?","text":"<p>There will be likely those among you who have experienced the \"spark\" of programming - that feeling of excitement when you build something that works. If you're one of those people, I want to encourage you to keep learning and growing as a programmer. This can be self-directed, and as fast or slow as you want it to be!</p> <p>The feeling like you can build anything is incredibly exciting. In the sections below, I'm sharing the resources for learning I've found over the years. I've only been able to use a small fraction of them, but all of these places are there for you to go, learn, and dream!</p>"},{"location":"learning_paths/Step_25/#javascript","title":"JavaScript","text":"<p>You might want to dig into JavaScript if you like the idea of building something awesome that lives on the web. JavaScript is the language of the web, and it's a great place to start if you want to build websites, web apps, or even mobile apps.</p> <p>To learn about JavaScript, I'd recommend you first go to Mozilla's Developer Network (MDN) and check out their JavaScript Guide. It's a fantastic place to start.</p> <p>If you get the hang of JavaScript, you might want to check out React, a JavaScript library for building user interfaces. It's a great way to build interactive web apps - and many of the apps you've used run on React.</p>"},{"location":"learning_paths/Step_25/#more-python","title":"More Python","text":"<p>If you want to keep learning Python, I'd recommend you check out the Python documentation. It's a great place to learn more about the language and its features.</p> <p>There are really great libraries you can dig into as well for diving into some interesting topics in Python - one of which is Django, a web framework for building web applications. You can check out the Django documentation to learn more. </p>"},{"location":"learning_paths/Step_25/#data-science","title":"Data Science","text":"<p>If you're interested in data science, you might want to check out Kaggle. It's a great place to learn about data science and machine learning, and they have a lot of great resources to help you get started.</p>"},{"location":"learning_paths/Step_25/#machine-learning","title":"Machine Learning","text":"<p>Related to Data Science, if you're interested in machine learning, you might want to check out TensorFlow. It's a great library for building machine learning models, and they have a lot of great resources to help you get started.</p> <p>For something a bit more \"wild west\", check out any of the following links:</p> <ul> <li>OpenAI's API</li> <li>Hugging Face</li> <li>Fast.ai</li> <li>OpenCV </li> </ul>"},{"location":"learning_paths/Step_25/#game-development","title":"Game Development","text":"<p>If you're interested in game development, you might want to check out Unity. It's a great platform for building games, and they have a lot of great resources to help you get started - I've used and coached students through their tutorials and they're fantastic, check those out here: Unity Learn.</p> <p>If you're interested in a slightly more difficult game development platform, you might want to check out Unreal Engine. It's a great platform for building games, and they have a lot of great resources to help you get started.</p>"},{"location":"learning_paths/Step_25/#mobile-apps-with-flutter","title":"Mobile Apps with Flutter","text":"<p>If you're interested in building mobile apps, you might want to check out Flutter. It's a great platform for building mobile apps, and they have a lot of great resources to help you get started.</p> <p>Flutter runs on the Dart programming language, a python-like language that's easy to learn, developed by Google. You can check out the Dart documentation to learn more.</p>"},{"location":"learning_paths/Step_25/#take-on-the-universe-with-rust","title":"Take on the Universe with Rust","text":"<p>If you're interested in a language that's a bit more challenging, you might want to check out Rust. It's a great language for building systems software, and it's designed to be safe, concurrent, and practical.</p> <p>Rust is absolutely one of the most important programming languages of the future, and if you're really excited about coding, I'd definitely recommend you check it out!</p> <p>If you want to dive into learning, check out the book. </p>"},{"location":"learning_paths/Step_25/#finally-free-and-open-source","title":"Finally: Free and Open Source","text":"<p>A final thought I want to leave you with is the power of free and open source software. The programming community - the world - is built on top of free and open source software. It's a powerful idea that anyone can use, modify, and distribute software for free.</p> <p>Check out the GNU Operating System's Philosophy page and the GNU GPL 3 license \"why\" page. These both provide detailed and practical explanations of why free and open source software is so important.</p> <p>The story of working in the open source space is fascinating to me, if it sounds interesting to you, I highly recommend checking out this book, Working in Public. </p> <p>If you want to contribute to the open source community, check out GitHub.</p>"},{"location":"learning_paths/all_steps/","title":"Step 1","text":""},{"location":"learning_paths/all_steps/#some-basic-concepts","title":"Some Basic Concepts","text":""},{"location":"learning_paths/all_steps/#what-is-a-computer","title":"What is a Computer?","text":"<p>If you think about it, you computer is a magic rock (aren't we all?)! It's a rock that can do math, remember things, and even talk to other rocks!</p> <p>Your computer is composed of two main components: Hardware and Software.</p> <p>The hardware is the physical parts of the computer - the things you can touch and see. This includes things like the monitor, keyboard, mouse, and the computer itself.</p> <p>The software is the programs that run on the computer. This includes things like the operating system (Windows, Mac OS, Linux), web browsers, and the programs you use to do things like write documents, create spreadsheets, and play games.</p> <p>In order for software to operate, it needs to know where to find the data it needs to run. This is where the file system comes in.</p> <p>The file system is the way that data is stored on your computer. Think of the filing system like addresses on a street. Each file on your computer has an address, and the file system is the way that the computer knows where to find the data it needs.</p> <p>To further understand the basics of the file system, we need to know what a \"directory\" and a \"file\" are.</p>"},{"location":"learning_paths/all_steps/#what-is-a-directory","title":"What is a \"Directory\"?","text":"<p>A directory is a place where files are stored. Think of a directory like a folder on your computer (for all intents and purposes, directory == folder). A directory can contain other directories, as well as files.</p> <p>Directories are important because this allows us to provide distinct and organized \"addresses\" for our files. Keeping files organized, particularly for programming projects, is very important for scalability, and reproducability.</p> <p>Scientific Programming</p> <p>File cleanliness and organization is particularly important in scientific programming. This is because we often need to share our code with others, or come back to it after a long period of time. If our code is not organized, it can be very difficult for us - or anyone else! - to understand what is going on.</p>"},{"location":"learning_paths/all_steps/#what-is-a-file-and-file-extension","title":"What is a \"File\" and \"File Extension\"?","text":"<p>A file is a collection of data that is stored on your computer. Files can contain text, images, videos, or any other type of data. Files are stored in directories, and each file has a name that is unique within the directory.</p> <p>Files can be combined to create applications - think \"apps\". Applications are made up of many files that work together to provide specific functions. Examples of applications include web browsers, word processors, and games.</p> <p>A file extension is a series of characters that are added to the end of a file name to indicate what type of file it is. For example, a file with the extension \" <code>.txt</code>\" is a text file, while a file with the extension \"<code>.jpg</code>\" is an image file. File extensions are important because they tell the computer what type of data is in the file, and how to open it. </p> <p>I'm a huge fan of the <code>.md</code> file extension, which is a markdown file - it's a great, non-proprietary way to write and format text.</p> Markdown<p>Markdown is a lightweight markup language that you can use to format text. It is often used to write documentation, README files, and other types of text that need to be formatted. Markdown is easy to learn, and you can use it to create headings, lists, links, and other types of formatting. </p> <p>You can learn more about Markdown here.</p>"},{"location":"learning_paths/all_steps/#tools-well-be-using-throughout-this-learning-path","title":"Tools we'll be using throughout this learning path:","text":""},{"location":"learning_paths/all_steps/#google-colab","title":"Google Colab","text":"<p>Google Colab, or \"Colab Notebooks\" is a completely free tool that allows you to write and execute Python code in your web browser. It is a great tool for learning Python, as it allows you to write and run code without having to install anything on your computer. It is also a great tool for sharing code with others, as you can easily share a link to your notebook with others, and they can view and run your code without having to install anything on their computer.</p> <p>For a lot of the work we will be doing in our class, we will be using Google Colab. You can access Google Colab here, and assignments will often be shared with you as a link to a Google Colab notebook.</p>"},{"location":"learning_paths/all_steps/#vscode","title":"VSCode","text":"<p>Visual Studio Code (very often referred to as \"VSCode\") is a free code editor that is available for Windows, Mac, and Linux. It built and supported by Microsoft, and is a very powerful tool that can be customized to fit your needs. For the purposes of our class, we will most often be using Google Colab, but having VSCode installed on your machine will enable you to work on your code locally - this will be an optional path that you can take if you want to work on your code outside of Google Colab!</p> <p>You can download VSCode here.</p> <p>Note: You do not want to download Visual Studio, which is a different product. Make sure you are downloading Visual Studio Code (VSCode).</p>"},{"location":"learning_paths/all_steps/#github","title":"GitHub","text":"<p>GitHub is a website that allows you to store and share your code with others. It is a great tool for collaborating on code with others, and for sharing your code with the world.</p> <p>The primary reason I'd like us to have access to GitHub - in the long term - is the integration of VSCode with their AI tool, GitHub Copilot. In my testing, I've found that GitHub Copilot is one of the best available coding AI tools out there - and as students at UC (or any other University), you have access to it for free!</p>"},{"location":"learning_paths/all_steps/#exercises","title":"Exercises","text":"<ol> <li>Install VSCode on your computer (follow the link above in the <code>VSCode</code> section). We wont use this immediately, but we'll use it later!</li> <li>Open and walk through your first Google Colab Notebook to get a taste of programming in Python!.<ul> <li>In this excercise you will:<ul> <li>learn how to run code in a Google Colab Notebook.</li> <li>run your first \"Hello World\" program using a Colab Cell.</li> <li>learn about comments and why they're important, especially for scientific programming.</li> <li>be introduced to the concept of \"variables\" in programming.</li> </ul> </li> </ul> </li> </ol>"},{"location":"learning_paths/all_steps/#step-2","title":"Step 2","text":"<p>In step 2, we have two objectives:</p> <ol> <li>Get familiar with the VSCode interface, including the file explorer, terminal, and editor.</li> <li>Introduce ourselves to the building blocks of Python, including environments, libraries, syntax, and programming terminology.</li> </ol>"},{"location":"learning_paths/all_steps/#exercise-intro-to-vscode","title":"Exercise: Intro to VSCode","text":""},{"location":"learning_paths/all_steps/#visually-navigating-vscode","title":"Visually navigating VSCode","text":"<p>Visual Studio Code (VSCode) is a powerful code editor. If you didn't install it yet, go back to <code>Step 1</code> and follow the instructions.</p> <p>Here's a quick overview of its main components:</p> <ul> <li>Activity Bar: Located on the far left, it lets you switch between views and gives you access to different features.</li> <li>Side Bar: Shows different views like the Explorer, Search, Source Control, etc.</li> <li>Editor: The main area where you edit your files.</li> <li>Panel: Located at the bottom, it shows output, terminal, problems, etc.</li> <li>Status Bar: Displays information about the opened project and the current file.</li> </ul>"},{"location":"learning_paths/all_steps/#open-up-a-new-terminal","title":"Open up a new terminal","text":"<ol> <li> <p>Open the Terminal: </p> <ul> <li>Go to the top menu and select <code>Terminal &gt; New Terminal</code>.</li> <li>In the future, you can use the shortcut that is shown near <code>New Terminal</code>. Shortcuts are great!</li> <li>If you toggle open the pannel (using the pannel button in the top right corner of the terminal), you can also create a new terminal from there by pushing the big <code>+</code> button.</li> </ul> </li> <li> <p>Print your current directory path: Use the <code>pwd</code> command to print the path of your current directory:      <pre><code>pwd\n</code></pre> This will show you the path to your current directory, remember this is like the \"address\" of where you are in your computer. When we create files and folders (new directories!) we will be doing so in this location.</p> </li> </ol> <p>Code Blocks</p> <p>Above, you'll notice a gray box with text inside. This is a code block. You can copy the text inside the block with the \"copy\" button on the far right of the box, and paste it into your terminal to run the command.</p> <ol> <li> <p>Get to know your directory structure in the terminal: Use the <code>ls</code> command to list the contents of your current directory:      <pre><code>ls\n</code></pre></p> </li> <li> <p>Create a new directory called <code>a_folder_is_a_directory</code>: Use the <code>mkdir</code> command:      <pre><code>mkdir a_folder_is_a_directory\n</code></pre></p> <p><code>mkdir</code> stands for \"make directory\" and is used to create new directories (or, \"folders\").</p> </li> <li> <p>Create a new directory called <code>a_folder_is_a_directory/this_is_a_directory_within_a_directory</code>: Use the <code>mkdir</code> command again:      <pre><code>mkdir a_folder_is_a_directory/this_is_a_directory_within_a_directory\n</code></pre></p> <p>This creates a directory within a directory, also known as a subdirectory.</p> </li> <li> <p>Create a file called <code>test_1.md</code> in the <code>this_is_a_directory_within_a_directory</code> directory: Use the <code>New-Item</code> command:      <pre><code>New-Item -Name \"test_1.md\" -ItemType File\n</code></pre></p> <p><code>New-Item</code> is a command that tells the computer we want to make a new file. <code>-Name</code> and <code>-ItemType</code> are both parameters that you need to feed the <code>New-Item</code> command in order for it to work. In this case, we feed each parameter an \"argument\" in the space after it is presented, where \"test_1.md\" is the argument for the parameter <code>-Name</code> that specifies the file name.</p> <p>By default, this will create the file in your current directory. You can add an input parameter called \"<code>-Path</code>\" if you want to create a file in a particular location, like this: -Path <code>\"C:\\Users\\wirthtd\\downloads\"</code> </p> </li> </ol>"},{"location":"learning_paths/all_steps/#navigate-to-the-a_folder_is_a_directory-directory-in-the-vscode-file-explorer","title":"Navigate to the <code>a_folder_is_a_directory</code> directory in the VSCode file explorer","text":"<ol> <li>Open the Explorer:</li> </ol> <p>You should be able to see the directory/folder structure in the file explorer on the left side of the VSCode window. If you can't see it:</p> <ul> <li> <p>Click on the Explorer icon in the Activity Bar (double-page icon in the top left of VSCode) or use the shortcut: <code>Ctrl + Shift + E</code> (<code>Cmd + Shift + E</code> on Mac).</p> </li> <li> <p>Navigate to the directory:</p> <ul> <li>Click on the <code>a_folder_is_a_directory</code> folder to expand it.</li> <li>Then, click on the <code>this_is_a_directory_within_a_directory</code>. <p>Note: because there is only one directory within <code>a_folder_is_a_directory</code>, the two directories might appear stacked on a single line. If we added more content to <code>a_folder_is_a_directory</code>, it would open up in a way that appears more \"normal\". There are settings to change this behavior, but we won't worry about that right now.</p> </li> </ul> </li> </ul>"},{"location":"learning_paths/all_steps/#open-the-test_1md-file-in-the-vscode-editor","title":"Open the <code>test_1.md</code> file in the VSCode editor","text":"<ol> <li>Open the file:</li> <li>Double-click on <code>test_1.md</code> to open it in the editor.</li> <li>This is a markdown (<code>.md</code>) file, you can learn more about markdown here</li> </ol>"},{"location":"learning_paths/all_steps/#intro-to-python","title":"Intro to Python","text":"<p>Python is a high-level, interpreted programming language known for its readability and versatility. It's widely used in various fields, including web development, data analysis, artificial intelligence, and scientific computing.</p>"},{"location":"learning_paths/all_steps/#python-environment","title":"Python Environment","text":"<p>A Python environment is a setup that includes the Python interpreter, libraries, and other tools necessary to run Python scripts. Understanding and setting up a Python environment is crucial for ensuring that your Python projects run smoothly and are well-organized.</p>"},{"location":"learning_paths/all_steps/#components-of-a-python-environment","title":"Components of a Python Environment","text":"<ol> <li>Python Interpreter: The core component that reads and executes Python code, telling your hardware what to do.</li> <li>Libraries and Packages: Collections of pre-written code that perform common tasks, such as NumPy for numerical operations and Pandas for data manipulation. Think of these as special-purpose tools that you can use to build your projects. We'll go over some examples of libraries further down.</li> <li>Virtual Environment: A self-contained directory that includes a specific version of Python and a set of libraries. This helps isolate projects from each other, preventing conflicts between dependencies.</li> </ol>"},{"location":"learning_paths/all_steps/#benefits-of-using-a-python-environment","title":"Benefits of Using a Python Environment","text":"<ul> <li>Isolation: Each project can have its own dependencies, avoiding conflicts with other projects.</li> <li>Reproducibility: Ensures that the code runs consistently across different machines.</li> <li>Organization: Keeps projects clean and manageable.</li> </ul> <p>Using Python Environments on a project-to-project basis is a good practice to get into early on, and it is a critical concept in scientific software development!</p> <p>Reflect: Why might this be important in scientific software development?</p>"},{"location":"learning_paths/all_steps/#python-libraries","title":"Python \"Libraries\"","text":"<p>Python has a rich ecosystem of \"libraries\" that extend its capabilities - this is one of the greatest advantages of Python, and is a result of it being the largest free and open source programming language in the world. </p> <p>Remember, a library is a collection of pre-written code that performs common tasks. Libraries are a critical component of your Python environment.</p> <p>Here are some Python Libraries that are particularly common in scientific computing:</p>"},{"location":"learning_paths/all_steps/#numpy","title":"NumPy","text":"<p>NumPy is a library for numerical computing in Python. It provides support for arrays, matrices, and many mathematical functions.</p>"},{"location":"learning_paths/all_steps/#pandas","title":"Pandas","text":"<p>Pandas is a library for data manipulation and analysis. It provides data structures like DataFrames, which are essential for handling structured data.</p>"},{"location":"learning_paths/all_steps/#matplotlib","title":"Matplotlib","text":"<p>Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python.</p>"},{"location":"learning_paths/all_steps/#some-more-basic-programming-terminology","title":"Some more basic programming terminology","text":""},{"location":"learning_paths/all_steps/#syntax","title":"Syntax","text":"<p>Syntax refers to the set of rules that define the structure of a programming language - in other words, syntax tells you the necessary rules for writing code. </p> <p>In Python, syntax is designed to be readable and straightforward.</p>"},{"location":"learning_paths/all_steps/#variables","title":"Variables","text":"<p>Variables are used to store data that can be referenced and manipulated in a program. You got a taste of variables in Exercise 1.</p> <p>In Python, you can create a variable by assigning a value to it:</p> <pre><code>x = 10\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise","title":"Exercise","text":"<p>Go to this Google Colab Notebook and work through importing a Python library, and exploring some Python syntax &amp; variables.</p>"},{"location":"learning_paths/all_steps/#bonus","title":"Bonus","text":"Setting Up a Python Environment <p>This is a bit advanced - we'll do this together eventually, but if you want to play around with environment set up you should go ahead!!</p> <ol> <li> <p>Install Python: Download and install Python from the official website.</p> </li> <li> <p>Create a Virtual Environment:</p> <ul> <li>Open your terminal or command prompt.</li> <li>Navigate to your project directory.</li> <li>Run <code>python -m venv env</code> (where <code>env</code> is the name of your environment).</li> </ul> </li> <li> <p>Activate the Virtual Environment:</p> <ul> <li>On Windows: <code>.\\env\\Scripts\\activate</code></li> <li>On macOS/Linux: <code>source env/bin/activate</code></li> </ul> </li> <li> <p>Install Libraries: Use <code>pip install &lt;library_name&gt;</code> to add necessary libraries.</p> </li> </ol> <p>Example</p> <pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment\nsource myenv/bin/activate  # On macOS/Linux\n.\\myenv\\Scripts\\activate  # On Windows\n\n# Install a library\npip install numpy\n</code></pre>"},{"location":"learning_paths/all_steps/#step-3","title":"Step 3","text":""},{"location":"learning_paths/all_steps/#getting-python-set-up-in-vs-code","title":"Getting Python Set up in VS Code","text":"<p>Note: If you haven't installed VSCode yet, go back to Step 1.</p> <p>With VSCode installed, getting Python set up is fairly straight forward. </p> <ul> <li>Open VSCode</li> <li>Click on the Extensions icon on the left side of the window (it looks like a square with a few smaller squares in it)</li> <li>Search for \"Python\" in the search bar</li> <li>Click the green \"Install\" button on the Python extension by Microsoft</li> <li>Once the extension is installed, click the green \"Reload\" button to activate the extension</li> </ul>"},{"location":"learning_paths/all_steps/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>You've already used a Jupyter Notebook without realizing it; all Google Colab Notebooks are Jupyter Notebooks! Jupyter Notebooks are a great way to write and run Python code in a more interactive way than a traditional script.</p> <p>Jupyter compartments your code into \"cells\" that can be run independently of one another. This is great for debugging and testing code, as you can run a single cell to see if it works as expected.</p> <p>There are many ways to create a new Jupyter Notebook file in VSCode, one of the easiest ways is to click <code>File &gt; New File</code> and then either save the file with a <code>.ipynb</code> extension or <code>Jupyter Notebook</code> in the file type dropdown that pops up.</p> <p>Note: Any time you are prompted by VSCode to install a new package or extension relating to Python or Jupyter Notebooks, you should do so. These packages and extensions are what make Python and Jupyter Notebooks work in VSCode.</p>"},{"location":"learning_paths/all_steps/#introduction-to-python-data-types","title":"Introduction to Python Data Types","text":"<p>Python has several built-in data types that are used to store different kinds of information. Here are some of the most common data types:</p> <ul> <li>Integers: Whole numbers, e.g., <code>1</code>, <code>42</code>, <code>-7</code></li> <li>Floats: Decimal numbers, e.g., <code>3.14</code>, <code>0.001</code>, <code>-2.5</code></li> <li>Strings: Text, e.g., <code>\"hello\"</code>, <code>\"Python\"</code>, <code>\"123\"</code></li> <li>Booleans: True or False values, e.g., <code>True</code>, <code>False</code></li> </ul>"},{"location":"learning_paths/all_steps/#examples-of-data-types","title":"Examples of Data Types","text":"<pre><code># Integer\na = 10\n\n# Float\nb = 3.14\n\n# String\nc = \"Hello, Python!\"\n\n# Boolean\nd = True\n</code></pre>"},{"location":"learning_paths/all_steps/#variables-in-python","title":"Variables in Python","text":"<p>Variables are used to store data that can be referenced and manipulated in a program. They act as containers for values.</p>"},{"location":"learning_paths/all_steps/#variable-naming-conventions","title":"Variable Naming Conventions","text":"<ul> <li>Variable names must start with a letter or an underscore (<code>_</code>), such as <code>_myVar</code> or <code>myVar</code>.</li> <li>The rest of the name can contain letters, numbers, or underscores, examples: <code>myVar</code>, <code>my_var</code>, <code>myVar123</code>.</li> <li>Variable names are case-sensitive (e.g., <code>myVar</code> and <code>myvar</code> are different).</li> </ul> <p>Consistency is Key</p> <p>When you start a project, try to pick a variable naming style and stick to that style throughout your code. This will make your code more readable and maintainable. There are a few styles commonly used in Python:</p> <ul> <li>Snake Case: <code>my_variable_name</code> (recommended for Python, where all letters are lower case and spaces are replaced with underscores)</li> <li>Camel Case: <code>myVariableName</code> (the first word is lowercase, and the subsequent words are capitalized, no spaces. This is commonly used in JavaScript and C#)</li> <li>Pascal Case: <code>MyVariableName</code> (the first letter of each word is capitalized, no spaces. This is commonly used in C# and Java)</li> </ul> <p>If you choose to use something other than snake case for python, that's fine! But remember to be consistent.</p>"},{"location":"learning_paths/all_steps/#assigning-values-to-variables","title":"Assigning Values to Variables","text":"<p>You can assign values to variables using the assignment operator (<code>=</code>).</p>"},{"location":"learning_paths/all_steps/#examples-of-variable-assignments","title":"Examples of Variable Assignments","text":"<pre><code># Assigning values to variables\nx = 5\ny = 10.5\nname = \"Alice\"\nis_student = True\n</code></pre> <p>Variable Reassignment</p> <p>You can reassign a variable to a different value at any time. The new value can be of the same or a different data type - be careful when reassigning variables to avoid confusion!</p>"},{"location":"learning_paths/all_steps/#type-checking","title":"Type Checking","text":"<p>You can check the data type of a variable using the <code>type()</code> function.</p> <pre><code># Check the data type of a variable\nx = 5\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre> <p>If you run the code snippet above, you will see that the output is <code>&lt;class 'int'&gt;</code>, indicating that the variable <code>x</code> is an integer.</p> <p>Note: \"class\" here is a Python term that refers to the data type of the variable. Data classes are important, and we will learn more about them in the future.</p> <p>Here are the different outputs for the different types we've covered in today's Path Step:</p> <ul> <li><code>int</code> for integers</li> <li><code>float</code> for floats</li> <li><code>str</code> for strings</li> <li><code>bool</code> for booleans</li> </ul> <p>Try it out!</p> <p>Open up a new Collab Notebook and create a variable assigment. Then, in a subsequent cell, use the <code>type()</code> function to check the data type of the variable. Did it work the way you thought?</p>"},{"location":"learning_paths/all_steps/#reflect","title":"Reflect","text":"<p>Why might there be different data types in programs? (Answer below)</p> Answer<p>There are a lot of reasons! But here are a few that I can come up with from the perspective of a scientific programmer:</p> <ol> <li>As scientists, we work with lots of different types of data - often at the same time. We might want to construct pipelines specifically designed for a particular data type; later on in our class we'll create functions. Some functions can be are type-specific, meaning they will only work if we supply that function with the correct data type. This is a good thing, because it means we can be sure that our functions are doing what we expect them to do.</li> <li>Different data types have different properties. For example, you can't add a string to an integer in the same way you can add two integers. This can be useful for controlling the flow of your program and ensuring that you're not doing something you didn't intend to do.</li> <li>Different properties allow you to control the flow of your program in different and nuanced ways. For example, you can use booleans to control whether or not a particular block of code is executed. This can be useful for debugging (fixing your code), or for ensuring that your code is running as expected - we will talk more about program flow in Step 5!</li> </ol>"},{"location":"learning_paths/all_steps/#review","title":"Review","text":"<p>In this step, we learned about different data types in Python and how to work with variables. Understanding data types and variables is essential for writing code in Python. Here's a quick recap:</p> <ul> <li>Data Types: Python has several built-in data types, including integers, floats, strings, and booleans.</li> <li>Variables: Variables are used to store data in a program. They act as containers for values.</li> <li>Variable Naming Conventions: Follow naming conventions to make your code more readable and maintainable.</li> <li>Type Checking: You can check the data type of a variable using the <code>type()</code> function.</li> </ul>"},{"location":"learning_paths/all_steps/#colab-exercise","title":"Colab Exercise","text":"<p>Now that you've learned about data types and variables, it's time to practice! </p> <p>Open up this Colab Notebook and work through the exercises to reinforce your understanding.</p>"},{"location":"learning_paths/all_steps/#step-4","title":"Step 4","text":"<p>In Step 4, we will dive into operators and expressions in Python. Operators allow us to perform various operations on data, and expressions combine variables and operators to produce new values. Understanding these concepts is crucial for writing effective and efficient code.</p>"},{"location":"learning_paths/all_steps/#operators-in-python","title":"Operators in Python","text":"<p>Python provides several types of operators that you can use to perform different operations on data. Here are the main types of operators:</p>"},{"location":"learning_paths/all_steps/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are used to perform mathematical operations.</p> <ul> <li>Addition (<code>+</code>): Adds two numbers.</li> <li>Subtraction (<code>-</code>): Subtracts the second number from the first.</li> <li>Multiplication (<code>*</code>): Multiplies two numbers.</li> <li>Division (<code>/</code>): Divides the first number by the second.</li> <li>Modulus (<code>%</code>): Returns the remainder of the division.</li> <li>Exponentiation (<code>**</code>): Raises the first number to the power of the second.</li> </ul>"},{"location":"learning_paths/all_steps/#examples-of-arithmetic-operators","title":"Examples of Arithmetic Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> What's an <code>.ipynb</code>?<p>An <code>.ipynb</code> file is a \"Jupyter Notebook\" file that allows you to run Python code in a cell-by-cell format. You've already been working with these in Google Colab! You can create a new <code>.ipynb</code> file in VSCode by clicking on the <code>New File</code> button in the file explorer and selecting <code>Python 3</code> as the kernel. If you want to try this out, go for it! Ask a chatbot or your professor if you get confused.</p> <pre><code># Addition\nresult = 5 + 3\nprint(\"5 + 3 =\", result)\n\n# Subtraction\nresult = 10 - 4\nprint(\"10 - 4 =\", result)\n\n# Multiplication\nresult = 7 * 2\nprint(\"7 * 2 =\", result)\n\n# Division\nresult = 15 / 3\nprint(\"15 / 3 =\", result)\n\n# Modulus\nresult = 10 % 3\nprint(\"10 % 3 =\", result)\n\n# Exponentiation\nresult = 2 ** 3\nprint(\"2 ** 3 =\", result)\n</code></pre>"},{"location":"learning_paths/all_steps/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values and return a boolean result (<code>True</code> or <code>False</code>).</p> <ul> <li>Equal to (<code>==</code>): Checks if two values are equal.</li> <li>Not equal to (<code>!=</code>): Checks if two values are not equal.</li> <li>Greater than (<code>&gt;</code>): Checks if the first value is greater than the second.</li> <li>Less than (<code>&lt;</code>): Checks if the first value is less than the second.</li> <li>Greater than or equal to (<code>&gt;=</code>): Checks if the first value is greater than or equal to the second.</li> <li>Less than or equal to (<code>&lt;=</code>): Checks if the first value is less than or equal to the second.</li> </ul>"},{"location":"learning_paths/all_steps/#examples-of-comparison-operators","title":"Examples of Comparison Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># Equal to\nprint(5 == 5)  # True\n\n# Not equal to\nprint(5 != 3)  # True\n\n# Greater than\nprint(7 &gt; 4)  # True\n\n# Less than\nprint(3 &lt; 8)  # True\n\n# Greater than or equal to\nprint(6 &gt;= 6)  # True\n\n# Less than or equal to\nprint(2 &lt;= 5)  # True\n</code></pre>"},{"location":"learning_paths/all_steps/#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to combine conditional statements.</p> <ul> <li>AND (<code>and</code>): Returns <code>True</code> if both statements are true.</li> <li>OR (<code>or</code>): Returns <code>True</code> if at least one statement is true.</li> <li>NOT (<code>not</code>): Reverses the result, returns <code>False</code> if the result is true.</li> </ul>"},{"location":"learning_paths/all_steps/#examples-of-logical-operators","title":"Examples of Logical Operators","text":"<p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># AND\nprint(True and True)  # True\nprint(True and False)  # False\n\n# OR\nprint(True or False)  # True\nprint(False or False)  # False\n\n# NOT\nprint(not True)  # False\nprint(not False)  # True\n</code></pre>"},{"location":"learning_paths/all_steps/#expressions-in-python","title":"Expressions in Python","text":"<p>Expressions are combinations of variables, operators, and values that produce a result. They are the building blocks of any Python program.</p>"},{"location":"learning_paths/all_steps/#combining-variables-and-operators","title":"Combining Variables and Operators","text":"<p>You can combine variables and operators to create expressions. Here are some examples:</p> <p>You can run any of these examples in an <code>.ipynb</code> inside of VSCode, or in a Colab notebook.</p> <pre><code># Arithmetic expression\nx = 5\ny = 3\nresult = x + y\nprint(\"x + y =\", result)\n\n# Comparison expression\nis_greater = x &gt; y\nprint(\"x &gt; y:\", is_greater)\n\n# Logical expression\nis_true = (x &gt; y) and (y &gt; 0)\nprint(\"(x &gt; y) and (y &gt; 0):\", is_true)\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-working-with-operators-and-expressions","title":"Exercise: Working with Operators and Expressions","text":"<p>Now it's time to practice using operators and creating expressions. You can do this your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode (we haven't done this last one yet - if you'd like to try,ask a chatbot or your professor!).</p> <p>Try the following exercises:</p>"},{"location":"learning_paths/all_steps/#exercise-1-arithmetic-operators","title":"Exercise 1: Arithmetic Operators","text":"<p>Write a Python program that performs the following operations and prints the results:</p> <ol> <li>Add two numbers.</li> <li>Subtract one number from another.</li> <li>Multiply two numbers.</li> <li>Divide one number by another.</li> <li>Find the remainder of the division of two numbers.</li> <li>Raise one number to the power of another.</li> </ol>"},{"location":"learning_paths/all_steps/#exercise-2-comparison-operators","title":"Exercise 2: Comparison Operators","text":"<p>Write a Python program that compares two numbers using each of the comparison operators and prints the results.</p>"},{"location":"learning_paths/all_steps/#exercise-3-logical-operators","title":"Exercise 3: Logical Operators","text":"<p>Write a Python program that uses logical operators to combine multiple conditions and prints the results.</p>"},{"location":"learning_paths/all_steps/#exercise-4-creating-expressions","title":"Exercise 4: Creating Expressions","text":"<p>Write a Python program that combines variables and operators to create expressions. Use arithmetic, comparison, and logical operators in your expressions.</p>"},{"location":"learning_paths/all_steps/#reflect_1","title":"Reflect","text":"<p>Think about the different types of operators and expressions you've learned. How might you use them in your own programs? What are some real-world scenarios where these concepts might be useful?</p>"},{"location":"learning_paths/all_steps/#review_1","title":"Review","text":"<p>In this step, we learned about different types of operators and expressions in Python. Here's a quick recap:</p> <ul> <li>Arithmetic Operators: Used to perform mathematical operations.</li> <li>Comparison Operators: Used to compare two values and return a boolean result.</li> <li>Logical Operators: Used to combine conditional statements.</li> <li>Expressions: Combinations of variables, operators, and values that produce a result.</li> </ul> <p>Understanding these concepts is essential for writing effective and efficient code in Python.</p>"},{"location":"learning_paths/all_steps/#step-5","title":"Step 5","text":"<p>In Step 5, we will explore control structures in Python, specifically focusing on making decisions using conditional statements. Control structures allow us to control the flow of our programs, making them more dynamic and responsive to different inputs and conditions.</p> <p>Write as you Go</p> <p>As you work through this step, try writing code snippets in your own Notebook either in VSCode or Google Colab. This will help you practice and reinforce what you're learning.</p>"},{"location":"learning_paths/all_steps/#indentations-in-python","title":"Indentations in Python","text":"<p>Indentation is a crucial aspect of Python syntax. Unlike many other programming languages that use braces <code>{}</code> to define code blocks, Python uses indentation to determine the grouping of statements. This means that the level of indentation (spaces or tabs) is used to define the structure and flow of your code.</p> <p>How to make an indentation?</p> <p>In VSCode and Google Colab, you can create an indentation by pressing the <code>Tab</code> key on your keyboard. You can also use the <code>Shift</code> + <code>Tab</code> key to remove/reverse an indentation.</p> <p>Weirdly, in Python, the \"prefered\" way to indent is to use 4 spaces. This is because it is easier to read and is more consistent across different editors and platforms - because typically, when you press <code>Tab</code>, it creates a character <code>\\t</code>. HOWEVER, most IDEs like VSCode will automatically convert tabs to 4 spaces for you - for the purposes of this class, you should be fine to use the <code>Tab</code> key.</p>"},{"location":"learning_paths/all_steps/#why-indentation-matters","title":"Why Indentation Matters","text":"<p>Indentation is not just for readability; it is a fundamental part of Python's syntax (remember, \"syntax\" is a way of saying \"the way the program is written to be understood by the machine\"). Incorrect indentation can lead to syntax errors or unexpected behavior in your code.</p>"},{"location":"learning_paths/all_steps/#rules-for-indentation","title":"Rules for Indentation","text":"<ol> <li>Consistent Indentation: Use the same number of spaces or tabs for each level of indentation. Mixing spaces and tabs can cause errors. Most </li> <li>Standard Practice: The standard practice is to use 4 spaces for each level of indentation. Most Python editors and IDEs (like VSCode) are configured to use 4 spaces by default.</li> <li>Indentation Levels: Each level of indentation represents a new block of code. For example, the code inside an <code>if</code> statement or a loop must be indented.</li> </ol>"},{"location":"learning_paths/all_steps/#example","title":"Example","text":"<p>We will learn about <code>if</code> statements in the next section below, but here's an example to illustrate the importance of indentation. This might make more sense after you learn what an <code>if</code> statement is, but for now think of an <code>if</code> statement as a way to check if a condition is true or false.</p> <pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n    if x &gt; 8:\n        print(\"x is also greater than 8\")\nprint(\"This line is outside the if statement\")\n</code></pre> <p>In this example:</p> <ul> <li>The first <code>print</code> statement is indented once, so it is part of the <code>if x &gt; 5</code> block.</li> <li>The second <code>print</code> statement is indented twice, so it is part of the <code>if x &gt; 8</code> block, which is nested inside the first <code>if</code> block.</li> <li>The final <code>print</code> statement is not indented, so it is outside of the <code>if</code> block and will always be executed.</li> </ul> <p>So, remember to pay attention to your indentation when writing Python code! It changes the way the code will be executed. Now, onto more fun things!</p>"},{"location":"learning_paths/all_steps/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements are used to perform different actions based on different conditions. The most common conditional statements in Python are <code>if</code>, <code>elif</code>, and <code>else</code>.</p>"},{"location":"learning_paths/all_steps/#the-if-statement","title":"The <code>if</code> Statement","text":"<p>The <code>if</code> statement is used to test a condition. If the condition is true, the code block inside the <code>if</code> statement is executed.</p> <p>Recall: Boolean Operators</p> <p>Remember that conditional statements rely on boolean expressions to determine whether a condition is true or false. We went over boolean operators in Step 4, but here's a quick refresher:</p> <p>A boolean expression is an expression that evaluates to either <code>True</code> or <code>False</code>. We can make the variable <code>condition</code> in the <code>if</code> statement is a boolean expression by setting it equal to to either <code>True</code> or <code>False</code> before we run the code. You can experiment with this in your own Notebook, printing out a value within the conditional statement to see how it changes.</p>"},{"location":"learning_paths/all_steps/#syntax_1","title":"Syntax","text":"<pre><code>if condition:\n    # code block to be executed if the condition is true\n</code></pre>"},{"location":"learning_paths/all_steps/#example_1","title":"Example","text":"<pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n</code></pre>"},{"location":"learning_paths/all_steps/#the-elif-statement","title":"The <code>elif</code> Statement","text":"<p>The <code>elif</code> statement is short for \"else if\". It allows us to check multiple conditions.</p>"},{"location":"learning_paths/all_steps/#syntax_2","title":"Syntax","text":"<pre><code>if condition1:\n    # code block to be executed if condition1 is true\nelif condition2:\n    # code block to be executed if condition2 is true\n</code></pre>"},{"location":"learning_paths/all_steps/#example_2","title":"Example","text":"<pre><code>x = 10\nif x &gt; 15:\n    print(\"x is greater than 15\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but less than or equal to 15\")\n</code></pre>"},{"location":"learning_paths/all_steps/#the-else-statement","title":"The <code>else</code> Statement","text":"<p>The <code>else</code> statement catches anything that isn't caught by the preceding conditions.</p>"},{"location":"learning_paths/all_steps/#syntax_3","title":"Syntax","text":"<pre><code>if condition1:\n    # code block to be executed if condition1 is true\nelif condition2:\n    # code block to be executed if condition2 is true\nelse:\n    # code block to be executed if none of the conditions are true\n</code></pre>"},{"location":"learning_paths/all_steps/#example_3","title":"Example","text":"<pre><code>x = 10\nif x &gt; 15:\n    print(\"x is greater than 15\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but less than or equal to 15\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre> <p>Play with it!</p> <p>In a notebook, copy and paste the code above. Then try changing the value of <code>x</code> in the example above to see how the output changes based on the conditions.</p>"},{"location":"learning_paths/all_steps/#exercise-making-decisions-with-conditional-statements","title":"Exercise: Making Decisions with Conditional Statements","text":"<p>Now it's time to practice using conditional statements. You can do this in your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode.</p>"},{"location":"learning_paths/all_steps/#exercise-1-basic-if-statement","title":"Exercise 1: Basic <code>if</code> Statement","text":"<p>Write a Python program that checks if a number is positive, negative, or zero and prints the result.</p> Solution<p>Here's a simple solution to the basic <code>if</code> statement problem:</p> <pre><code>x = 10\nif x &gt; 0:\n    print(\"x is positive\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelse:\n    print(\"x is zero\")\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-2-using-elif-and-else","title":"Exercise 2: Using <code>elif</code> and <code>else</code>","text":"<p>Write a Python program that checks the grade of a student based on their score and prints the corresponding grade (A, B, C, D, or F).</p> Solution<p>Here's a simple solution to the grade-checking problem:</p> <pre><code>score = 85\nif score &gt;= 90:\n    print(\"A\")\nelif score &gt;= 80:\n    print(\"B\")\nelif score &gt;= 70:\n    print(\"C\")\nelif score &gt;= 60:\n    print(\"D\")\nelse:\n    print(\"F\")\n</code></pre>"},{"location":"learning_paths/all_steps/#reflect_2","title":"Reflect","text":"<p>Think about how conditional statements can be used to control the flow of a program. What are some real-world scenarios where these concepts might be useful?</p> Sorting Data<p>Conditional statements can be used to sort data, filter out unwanted information, or make decisions based on specific criteria. For example, you might use conditional statements to categorize products based on their price, filter out invalid user inputs, or determine the eligibility of a customer for a discount.</p>"},{"location":"learning_paths/all_steps/#review_2","title":"Review","text":"<p>In this step, we learned about conditional statements in Python. Here's a quick recap:</p> <ul> <li><code>if</code> Statement: Used to test a condition and execute a code block if the condition is true.</li> <li><code>elif</code> Statement: Allows us to check multiple conditions.</li> <li><code>else</code> Statement: Catches anything that isn't caught by the preceding conditions.</li> </ul> <p>Understanding these concepts is essential for writing dynamic and responsive programs in Python.</p>"},{"location":"learning_paths/all_steps/#step-6","title":"Step 6","text":"<p>In Step 6, we will focus on problem-solving using control structures. This step will build on the concepts of conditional statements and introduce loops, which are essential for creating dynamic and efficient programs.</p>"},{"location":"learning_paths/all_steps/#problem-solving-with-control-structures","title":"Problem-Solving with Control Structures","text":"<p>Control structures allow us to control the flow of our programs, making them more dynamic and responsive to different inputs and conditions. In this step, we will explore how to use control structures to solve problems.</p>"},{"location":"learning_paths/all_steps/#loops-in-python","title":"Loops in Python","text":"<p>Loops are used to execute a block of code repeatedly. Python provides two types of loops: <code>for</code> loops and <code>while</code> loops.</p>"},{"location":"learning_paths/all_steps/#the-for-loop","title":"The <code>for</code> Loop","text":"<p>The <code>for</code> loop is used to iterate over a sequence of numbers and execute a block of code for each number.</p> <p><code>list</code>s in Python</p> <p>A <code>list</code> is a collection of items that can be of different types. You can create a list by placing the items inside square brackets <code>[]</code>, separated by commas. For example:</p> <pre><code>numbers_list = [1, 2, 3, 4, 5]\n</code></pre> <p>Lists are iterable, meaning you can loop over the items in a list using a <code>for</code> loop. Python makes great use of lists and other iterable objects to simplify programming tasks!</p>"},{"location":"learning_paths/all_steps/#syntax_4","title":"Syntax","text":"<pre><code>numbers_list = [1, 2, 3, 4, 5]\n\nfor number in numbers_list:\n    # code block to be executed for each number in the list\n</code></pre>"},{"location":"learning_paths/all_steps/#example_4","title":"Example","text":"<pre><code>numbers_list = [1, 2, 3, 4, 5]\nfor number in numbers_list:\n    print(number)\n</code></pre> The <code>range()</code> Function<p>The <code>range()</code> function is commonly used with <code>for</code> loops to generate a sequence of numbers. It takes three arguments: <code>start</code>, <code>stop</code>, and <code>step</code>. For example, <code>range(1, 6, 2)</code> generates the sequence <code>1, 3, 5</code>.</p> <p>You can also use <code>range()</code> with a single argument to generate a sequence starting from 0. For example, <code>range(5)</code> generates the sequence <code>0, 1, 2, 3, 4</code>. </p> <p>You can use the <code>range()</code> function to iterate over a specific range of numbers in a <code>for</code> loop, like this: </p> <pre><code>for i in range(1, 6):\n    print(i)\n</code></pre>"},{"location":"learning_paths/all_steps/#another-example","title":"Another Example","text":"<p>Just like you can loop over a list of numbers, you can loop over a string in Python. When you feed in a string to a <code>for</code> loop, it will iterate over each character in the string.</p> <pre><code>for character in \"This will print vertically\":\n    print(character)\n</code></pre>"},{"location":"learning_paths/all_steps/#the-while-loop","title":"The <code>while</code> Loop","text":"<p>The <code>while</code> loop is used to execute a block of code as long as a condition is true.</p>"},{"location":"learning_paths/all_steps/#syntax_5","title":"Syntax","text":"<pre><code>while condition:\n    # code block to be executed as long as the condition is true\n</code></pre>"},{"location":"learning_paths/all_steps/#example_5","title":"Example","text":"<pre><code>count = 0\nwhile count &lt; 3:\n    print(count)\n    count += 1\n</code></pre> <p>The <code>+=</code> Operator</p> <p>The <code>+=</code> operator is used to increment (add) the value of a variable. This is a shorter way to write  <pre><code>variable = variable + 1\n</code></pre></p> <p><code>-=</code> can be used to decrement (subtract) the value of a variable, as well as <code>*=</code>, <code>/=</code>, and <code>**=</code> for multiplication, division, and exponentiation, respectively.</p>"},{"location":"learning_paths/all_steps/#combining-loops-and-conditional-statements","title":"Combining Loops and Conditional Statements","text":"<p>You can combine loops and conditional statements to create more complex control structures.</p>"},{"location":"learning_paths/all_steps/#example_6","title":"Example","text":"<pre><code>numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfor i in numbers_list:\n    if i % 2 == 0:\n        print(f\"{i} is even\")\n    else:\n        print(f\"{i} is odd\")\n</code></pre> <p>What the f?</p> <p>The <code>f</code> before the string in the print statement indicates that it is an f-string. F-strings allow you to embed expressions inside string literals, using curly braces <code>{}</code>. This makes it easy to format strings with variable values.</p> <p>For example, <code>f\"{i} is even\"</code> will replace <code>{i}</code> with the value of <code>i</code> when printing.</p> <p>We'll talk more about f-strings in <code>Step 9</code> because they're very useful for Debugging -- the focus of <code>Step 9</code>.</p>"},{"location":"learning_paths/all_steps/#using-print-statements-to-understand-control-flow","title":"Using Print Statements to Understand Control Flow","text":"<p>You might have noticed above that we used print statements to understand how our code is working. Print statements are a simple yet powerful tool to track the flow of your program and understand how variables change over time.</p>"},{"location":"learning_paths/all_steps/#example-tracking-a-number","title":"Example: Tracking a Number","text":"<p>Let's start with a simple example where we print a number, perform an operation on it, and then print it again to see the output.</p>"},{"location":"learning_paths/all_steps/#example-code","title":"Example Code","text":"<pre><code>number = 10\nprint(\"Initial number:\", number)\n\n# Perform an operation\nnumber += 5\nprint(\"After adding 5:\", number)\n\n# Perform another operation\nnumber *= 2\nprint(\"After multiplying by 2:\", number)\n</code></pre>"},{"location":"learning_paths/all_steps/#reflection","title":"Reflection","text":"<ul> <li>What did the output look like?</li> <li>Did you see how the number changed after each operation?</li> </ul>"},{"location":"learning_paths/all_steps/#exercise-problem-solving-with-control-structures","title":"Exercise: Problem-Solving with Control Structures","text":"<p>Now it's time to practice using loops and conditional statements to solve problems. You can do this in your own Colab Notebook, in an <code>.ipynb</code> file in VSCode, or in a Python file in VSCode.</p>"},{"location":"learning_paths/all_steps/#exercise-1-simple-loops","title":"Exercise 1: Simple Loops","text":"<p>Write a Python program that prints the numbers from 1 to 5 using a <code>for</code> loop, then do it again for a <code>while</code> loop.</p> Solution<p>Here's a simple solution to the simple loops problem:</p> <pre><code># Using a for loop\nnumbers_list = [1, 2, 3, 4, 5]\nfor i in numbers_list:\n    print(i)\n</code></pre> <pre><code># Using a while loop\ncount = 1\nwhile count &lt; 6:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-2-sum-of-numbers","title":"Exercise 2: Sum of Numbers","text":"<p>Write a Python program that calculates the sum of numbers from 1 to 10.</p> Hint<p>You can use a <code>for</code> loop combined with the <code>range()</code> function to iterate over the numbers from 1 to 10 and calculate the sum. You could also implement the <code>+=</code> operator to increment the sum for each number.</p> Solution<p>Here's a simple solution to the sum of numbers problem:</p> <pre><code>total = 0\nfor i in range(1, 11):\n    total += i\nprint(f\"The sum of numbers from 1 to 10 is: {total}\")\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-3-fizzbuzz","title":"Exercise 3: FizzBuzz","text":"<p>Write a Python program that prints the numbers from 1 to 20. For multiples of three, print \"Fizz\" instead of the number, and for the multiples of five, print \"Buzz\". For numbers which are multiples of both three and five, print \"FizzBuzz\".</p> Solution<p>Here's a simple solution to the FizzBuzz problem:</p> <pre><code>for i in range(1, 21):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-4-counting-vowels","title":"Exercise 4: Counting Vowels","text":"<p>Write a Python program that counts the number of vowels in a given string.</p> Hint<p>You can use a for loop to iterate over each character in the string and a conditional statement to check if the character is a vowel.</p> Solution<p>Here is one solution to the problem: <pre><code>string = \"This is a sample string\"\nvowels = \"aeiouAEIOU\"\ncount = 0\nfor char in string:\n    if char in vowels:\n        count += 1\nprint(f\"The number of vowels in the string is: {count}\")\n</code></pre></p>"},{"location":"learning_paths/all_steps/#exercise-5-reverse-a-string","title":"Exercise 5: Reverse a String","text":"<p>Write a Python program that reverses a given string using a for loop.</p> Hint<p>You can use a for loop to iterate over the string in reverse order and build a new string.</p> Solution<p>Here's a possible solution: <pre><code>string = \"Hello, World!\"\nreversed_string = \"\"\nfor char in string:\n    reversed_string = char + reversed_string\nprint(f\"The reversed string is: {reversed_string}\")\n</code></pre></p> <p>Think: Why does this solution work?</p>"},{"location":"learning_paths/all_steps/#exercise-6-multiplication-table-with-f-strings","title":"Exercise 6: Multiplication Table with F-Strings","text":"<p>Write a Python program that generates a multiplication table for numbers 1-5, using f-strings.</p> Hint<p>You can use nested <code>for</code> loops to generate the multiplication table for numbers 1-5.</p> Solution<p>Here's a possible solution: <pre><code>for i in range(1, 6):\n    for j in range(1, 6):\n        print(f\"{i} x {j} = {i * j}\") # Print a new line after each row\n</code></pre></p> <p>This solution uses nested <code>for</code> loops to generate the multiplication table for numbers 1-5. The outer loop iterates over the numbers 1-5 for the first multiplier, and the inner loop iterates over the numbers 1-5 again for the second number, generating a table of all multiplication results.</p>"},{"location":"learning_paths/all_steps/#reflect_3","title":"Reflect","text":"<p>Think about how loops and conditional statements can be used to solve problems. What are some real-world scenarios where these concepts might be useful?</p> Automating Repetitive Tasks<p>Loops and conditional statements are essential for automating repetitive tasks and handling different conditions in programs. For example, you can use loops to process large datasets, iterate over files in a directory, or perform calculations based on specific conditions. Conditional statements can be used to control the flow of a program, handle user inputs, or make decisions based on certain criteria.</p> <p>Another tool, <code>functions</code>, can also be used to automate repetitive tasks. We'll learn about functions in the next step!</p>"},{"location":"learning_paths/all_steps/#review_3","title":"Review","text":"<p>In this step, we learned about loops and how to use them in combination with conditional statements to solve problems. Here's a quick recap:</p> <ul> <li><code>for</code> Loop: Used to iterate over a sequence of numbers and execute a block of code for each number.</li> <li><code>while</code> Loop: Used to execute a block of code as long as a condition is true.</li> <li>Combining Loops and Conditional Statements: Allows for more complex control structures and problem-solving.</li> </ul> <p>Understanding these concepts is essential for writing dynamic and efficient programs in Python.</p>"},{"location":"learning_paths/all_steps/#step-7","title":"Step 7","text":"<p>In Step 7, we will explore functions in Python. Functions are reusable blocks of code that perform a specific task. They help us organize our code, make it more readable, and avoid repetition.</p>"},{"location":"learning_paths/all_steps/#defining-functions","title":"Defining Functions","text":"<p>To define a function in Python, we use the <code>def</code> keyword (short for \"define\") followed by the function name and parentheses <code>()</code>. </p> <p>Inside the parentheses, we can specify parameters, or \"inputs\", that the function can accept. The function body is indented and contains the code that will be executed when the function is called.</p>"},{"location":"learning_paths/all_steps/#syntax_6","title":"Syntax","text":"<pre><code>def function_name(parameters):\n    # code block to be executed\n</code></pre>"},{"location":"learning_paths/all_steps/#example_7","title":"Example","text":"<pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n</code></pre> <p>In this example, <code>greet</code> is the function name, and <code>name</code> is a parameter. The function prints a greeting message using the provided name.</p>"},{"location":"learning_paths/all_steps/#calling-functions","title":"Calling Functions","text":"<p>To call a function, we use the function name followed by parentheses <code>()</code>. If the function accepts parameters, we pass the arguments inside the parentheses.</p>"},{"location":"learning_paths/all_steps/#example_8","title":"Example","text":"<pre><code>greet(\"Alice\")\n</code></pre> <p>This will output:</p> <pre><code>Hello, Alice!\n</code></pre>"},{"location":"learning_paths/all_steps/#return-statement","title":"Return Statement","text":"<p>Functions can return a value using the <code>return</code> statement. This allows us to capture the result of a function and use it in other parts of our code.</p>"},{"location":"learning_paths/all_steps/#example_9","title":"Example","text":"<pre><code>def add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>This will output:</p> <pre><code>8\n</code></pre>"},{"location":"learning_paths/all_steps/#default-parameters","title":"Default Parameters","text":"<p>We can define default values for parameters in a function. If an argument is not provided when the function is called, the default value will be used.</p>"},{"location":"learning_paths/all_steps/#example_10","title":"Example","text":"<pre><code>def greet(name=\"World\"):\n    print(f\"Hello, {name}!\")\n\ngreet()\n</code></pre> <p>This will output:</p> <pre><code>Hello, World!\n</code></pre> <p>by default, the function uses \"World\" as the name. If we call the function without providing a name, it will use the default value, like this:</p> <pre><code>def greet(name=\"World\"):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\n</code></pre> <p>This will output:</p> <pre><code>Hello, Alice!\n</code></pre> <p>Try it yourself!</p>"},{"location":"learning_paths/all_steps/#keyword-arguments","title":"Keyword Arguments","text":"<p>We can more flexibly use functions by telling the function what we want to use as input when we call that function.</p> <p>Let's imagine a scenario where we have a \"describe_pet\" function that takes two parameters: \"animal_type\" and \"pet_name\", the function might look like this:</p> <pre><code>def describe_pet(animal_type, pet_name):\n    print(f\"I have a {animal_type} named {pet_name}.\")\n</code></pre> <p>We can specify the inputs, or \"arguments\", when we call the function by setting them equal to the parameter names. </p> <p>Parameters &amp; Arguments</p> <p>The parameter is the name we give to the input in the function definition, and the argument is the actual value we pass to the function.</p> <p>Here is an example of specifying that I have a dog named Rufus: <pre><code>describe_pet(animal_type=\"dog\", pet_name=\"Rufus\")\n</code></pre></p> <p>Note that when I specify the arguments (inputs), I can change the order and the function will work just fine:</p> <pre><code>describe_pet(pet_name=\"Django\", animal_type=\"dog\")\n</code></pre> <p>So, in the code below, I can define the function and use the function twice in a row, changing the order of the arguments:</p> <pre><code>def describe_pet(animal_type, pet_name):\n    print(f\"I have a {animal_type} named {pet_name}.\")\n\ndescribe_pet(animal_type=\"dog\", pet_name=\"Sherlock\")\ndescribe_pet(pet_name=\"Watson\", animal_type=\"cat\")\n</code></pre> <p>This will output:</p> <pre><code>I have a dog named Sherlock. I have a cat named Watson.\n</code></pre>"},{"location":"learning_paths/all_steps/#exercises_1","title":"Exercises","text":"<ol> <li> <p>Define a Function: Write a function called <code>square</code> that takes a number as a parameter and returns its square.</p> Solution<pre><code>def square(number):\n    return number * number\n\nresult = square(5)\nprint(result)\n</code></pre> </li> <li> <p>Call a Function: Write a function called <code>multiply</code> that takes two numbers as parameters and returns their product. Call the function with different arguments and print the results.</p> Solution<pre><code>def multiply(a, b):\n    return a * b\n\nresult1 = multiply(3, 4)\nresult2 = multiply(5, 2)\nprint(result1)\nprint(result2)\n</code></pre> </li> <li> <p>Default Parameters: Write a function called <code>greet_user</code> that takes a name as a parameter and prints a greeting message. If no name is provided, it should use \"User\" as the default name.</p> Solution<pre><code>def greet_user(name=\"User\"):\n    print(f\"Hello, {name}!\")\n\ngreet_user(\"Alice\")\ngreet_user()\n</code></pre> </li> <li> <p>Keyword Arguments: Write a function called <code>make_sandwich</code> that takes a list of ingredients and prints a message describing the sandwich. Call the function using keyword arguments to specify the ingredients in different orders.</p> Solution<pre><code>def make_sandwich(ingredients):\n    print(\"Sandwich with:\")\n    for ingredient in ingredients:\n        print(f\"- {ingredient}\")\n\nmake_sandwich(ingredients=[\"bread\", \"cheese\", \"tomato\"])\nmake_sandwich(ingredients=[\"tomato\", \"bread\", \"cheese\"])\n</code></pre> </li> </ol>"},{"location":"learning_paths/all_steps/#reflect_4","title":"Reflect","text":"<p>Think about how functions can help you organize your code and make it more reusable. What are some real-world scenarios where you might use functions?</p>"},{"location":"learning_paths/all_steps/#review_4","title":"Review","text":"<p>In this step, we learned about functions in Python. Here's a quick recap:</p> <ul> <li>Defining Functions: Use the <code>def</code> keyword to define a function.</li> <li>Calling Functions: Use the function name followed by parentheses to call a function.</li> <li>Return Statement: Use the <code>return</code> statement to return a value from a function.</li> <li>Default Parameters: Define default values for parameters in a function.</li> <li>Keyword Arguments: Specify arguments using parameter names when calling a function.</li> </ul> <p>Understanding these concepts is essential for writing organized and reusable code in Python.</p>"},{"location":"learning_paths/all_steps/#step-8","title":"Step 8","text":"<p>In Step 8, we will reinforce our understanding of functions by combining them with loops, conditionals, and type hints. This step will provide opportunities to practice and see how these concepts work together.</p>"},{"location":"learning_paths/all_steps/#simple-function","title":"Simple Function","text":"<p>Let's start with a simple function that adds two numbers.</p> <pre><code>def add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>In this example, <code>add</code> is a function that takes two parameters <code>a</code> and <code>b</code>, and returns their sum.</p>"},{"location":"learning_paths/all_steps/#using-a-function-in-a-loop","title":"Using a Function in a Loop","text":"<p>Now, let's see how we can use this function in a loop to add numbers from a list.</p> <pre><code>def add(a, b):\n    return a + b\n\nnumbers = [1, 2, 3, 4, 5]\ntotal = 0\nfor number in numbers:\n    total = add(total, number)\n\nprint(total)\n</code></pre> <p>In this example, we use the <code>add</code> function in a <code>for</code> loop to sum all the numbers in the list.</p>"},{"location":"learning_paths/all_steps/#functions-with-various-data-types","title":"Functions with Various Data Types","text":"<p>Functions can work with different data types and return various outputs. Let's see some examples.</p>"},{"location":"learning_paths/all_steps/#example-1-concatenating-strings","title":"Example 1: Concatenating Strings","text":"<pre><code>def concatenate(str1, str2):\n    return str1 + \" \" + str2\n\nresult = concatenate(\"Hello\", \"World\")\nprint(result)\n</code></pre>"},{"location":"learning_paths/all_steps/#example-2-checking-even-or-odd","title":"Example 2: Checking Even or Odd","text":"<pre><code>def is_even(number):\n    if number == 0:\n        return False # Zero is not considered even or odd, it is an \"edge case\"\n                     # so we'll take care of it first.\n    else:\n        return number % 2 == 0 # Now that zero is taken care of, \n                               # this will work fine.\n\nresult = is_even(4)\nprint(result)\n</code></pre>"},{"location":"learning_paths/all_steps/#example-3-finding-the-maximum-value","title":"Example 3: Finding the Maximum Value","text":"<pre><code>def find_max(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\n\nresult = find_max(10, 20)\nprint(result)\n</code></pre>"},{"location":"learning_paths/all_steps/#introducing-type-hints","title":"Introducing Type Hints","text":"<p>Type hints allow you to specify the expected data types of function parameters and return values. They do not enforce the types but provide useful information for code readability. </p>"},{"location":"learning_paths/all_steps/#syntax_7","title":"Syntax","text":"<p>Below is a template for how a functino with type hints would work, note, these are not real types:</p> <pre><code>def function_name(parameter: type) -&gt; return_type:\n    # code block\n</code></pre> Why Type Hints are Important<p>Type hints improve code readability and help others understand what types of arguments a function expects and what it returns. They also assist in catching type-related errors during development.</p> <p>Note, we are not changing anything about the function here. All we're doing is being more communicative about how the function should be used.</p> <p>Below are some examples of functions with type hints.</p>"},{"location":"learning_paths/all_steps/#example-1-adding-integers","title":"Example 1: Adding Integers","text":"<pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n\nresult = add(3, 5)\nprint(result)\n</code></pre> <p>This function is pretty simple, it takes two integers, adds them together, and returns an integer.</p>"},{"location":"learning_paths/all_steps/#example-2-concatenating-strings","title":"Example 2: Concatenating Strings","text":"<pre><code>def concatenate(str1: str, str2: str) -&gt; str:\n    return str1 + \" \" + str2\n\nresult = concatenate(\"Hello\", \"World\")\nprint(result)\n</code></pre> <p>\"Concatenate\" means to join two things together. In this case, two strings.</p> <p>This function takes two strings and returns a new string that is the concatenation of the two input strings.</p> String Concatenation<p>You can follow this link to see more about string concatenation in Python.</p>"},{"location":"learning_paths/all_steps/#example-3-checking-even-or-odd","title":"Example 3: Checking Even or Odd","text":"<p><pre><code>def is_even(number: int) -&gt; bool:\n    if number == 0:\n        return False \n    else:\n        return number % 2 == 0\n\nresult = is_even(4)\nprint(result)\n</code></pre> Note, we used this function before, all we've changes is that we now have type hints!</p>"},{"location":"learning_paths/all_steps/#what-when-we-feed-a-function-the-wrong-type","title":"What when we feed a function the wrong type?","text":"<pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n\nresult = add(\"3\", 5)  # This will produce an error...\n</code></pre> <p>This will raise a <code>TypeError</code> because we are trying to add a string and an integer, which is not allowed based on the type hints. In this case, it will also functionally break the code.</p> <p>The type error will look like this: <pre><code>TypeError: can only concatenate str (not \"int\") to str\n</code></pre></p> <p>Note, if you fed the <code>add()</code> function a float, even though it breaks the Type Hint, the code will still run. This is because Python is a \"dynamically typed language\", and it will try to do the operation you're asking it to do and only break if it can't.</p> <p>So, Type Hints are not a \"hard rule\" in Python, but they are a great idea to follow because code is read more often than it is written.</p>"},{"location":"learning_paths/all_steps/#using-a-loop-within-a-function","title":"Using a Loop within a Function","text":"<p>You can use loops within functions to perform repetitive tasks.</p>"},{"location":"learning_paths/all_steps/#example-summing-numbers","title":"Example: Summing Numbers","text":"<pre><code>def sum_numbers(n: int) -&gt; int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\nresult = sum_numbers(10)\nprint(result)\n</code></pre> <p>The example above takes in an integer <code>n</code> and returns the sum of all numbers from 1 to <code>n</code>. It uses the range function to generate a sequence of numbers from 1 to <code>n</code> - remember that range doesn't include the last number, so we add 1 to <code>n</code> + 1 so that we include <code>n</code> in the sum.</p>"},{"location":"learning_paths/all_steps/#combining-functions-with-conditionals","title":"Combining Functions with Conditionals","text":"<p>You can combine functions with conditionals to perform different actions based on conditions.</p>"},{"location":"learning_paths/all_steps/#example-filtering-even-numbers","title":"Example: Filtering Even Numbers","text":"<p>NOTE: For the function below, <code>is_even</code> is a function that we defined earlier in this document. That means if you've run the <code>is_even</code> function in your <code>.ipynb</code> already, then this code will work just fine. If you haven't, you'll need to run the code block containing <code>is_even</code> function before you run this code.</p> <pre><code>def filter_even(numbers: list[int]) -&gt; list[int]:\n    even_numbers = []\n    for number in numbers:\n        if is_even(number):\n            even_numbers.append(number)\n    return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even(numbers)\nprint(result)\n</code></pre> <p>This above function is great! It contains a loop that iterates over a list of numbers and uses the <code>is_even</code> function to check if each number is even. If the number is even (here, we use a conditional!), it is added to a new list called <code>even_numbers</code>, which is then returned.</p> <p>This function combines a lot of what we've learned so far!</p>"},{"location":"learning_paths/all_steps/#review_5","title":"Review","text":"<p>In this step, we reinforced our understanding of functions by exploring:</p> <ul> <li>Simple Function: Creating and using a basic function.</li> <li>Using a Function in a Loop: Applying a function within a loop.</li> <li>Functions with Various Data Types: Working with different data types and return values.</li> <li>Introducing Type Hints: Specifying expected data types for function parameters and return values.</li> <li>Using a Loop within a Function: Performing repetitive tasks within a function.</li> <li>Combining Functions with Conditionals: Using conditionals within functions to perform different actions.</li> </ul> <p>Understanding these concepts is essential for writing robust and flexible code in Python.</p>"},{"location":"learning_paths/all_steps/#exercises_2","title":"Exercises","text":"<p>Rememeber: The solutions I provide are only one way to solve the problem. There are many ways to solve most coding problems! You should feel free to experiment and try different approaches.</p> <ol> <li> <p>Type Hints: Write a function called <code>concat</code> that takes two strings as parameters and returns their concatenation. Use type hints to specify the parameter and return types.</p> Solution<pre><code>def concat(str1: str, str2: str) -&gt; str:\n    return str1 + \" \" + str2\n\nresult = concat(\"Hello\", \"World\")\nprint(result)\n</code></pre> </li> <li> <p>Sum of Squares: Write a function called <code>sum_of_squares</code> that takes an integer <code>n</code> and returns the sum of the squares of all numbers from 1 to <code>n</code>.</p> Solution<pre><code>def sum_of_squares(n: int) -&gt; int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 2\n    return total\n\nresult = sum_of_squares(5)\nprint(result)\n</code></pre> </li> <li> <p>Count Vowels: Write a function called <code>count_vowels</code> that takes a string as a parameter and returns the number of vowels in the string. Use a loop to iterate over the string and count the vowels.</p> Solution<pre><code>def count_vowels(s: str) -&gt; int:\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nresult = count_vowels(\"Hello, World!\")\nprint(result)\n</code></pre> </li> <li> <p>Find Minimum: Write a function called <code>find_min</code> that takes a list of integers and returns the smallest number in the list. Use a loop to iterate over the list and find the minimum value.</p> Solution<pre><code>def find_min(numbers: list[int]) -&gt; int:\n    min_number = numbers[0]\n    for number in numbers:\n        if number &lt; min_number:\n            min_number = number\n    return min_number\n\nnumbers = [5, 3, 8, 1, 9, 2]\nresult = find_min(numbers)\nprint(result)\n</code></pre> </li> <li> <p>Palindrome Check: Write a function called <code>is_palindrome</code> that takes a string and returns <code>True</code> if the string is a palindrome (reads the same forwards and backwards) and <code>False</code> otherwise. Use a loop to check the characters.</p> Solution<pre><code>def is_palindrome(input_string: str) -&gt; bool:\n    input_string = input_string.lower() # This line makes it so we don't have to worry about capital letters.\n    reversed_input_string = input_string[::-1]\n    return input_string == reversed_input_string\n\nresult1 = is_palindrome(\"radar\")\nresult2 = is_palindrome(\"hello\")\nprint(result1)\nprint(result2)\n</code></pre> </li> </ol>"},{"location":"learning_paths/all_steps/#bonus-lambda-functions-one-line-functions","title":"Bonus: Lambda Functions (One-Line Functions)","text":"<p>Lambda functions are small functions defined using the <code>lambda</code> keyword. They are often used for short, simple operations.</p> <p>These are called \"anonymous functions\" because they don't have a name, we don't define (\"<code>def</code>\") them. They are useful when you need a simple function for a short period of time.</p>"},{"location":"learning_paths/all_steps/#syntax_8","title":"Syntax","text":"<p>Note, the text below is a template, not real code: <pre><code>lambda parameters: expression\n</code></pre></p>"},{"location":"learning_paths/all_steps/#example-squaring-a-number","title":"Example: Squaring a Number","text":"<pre><code>square = lambda x: x * x\nprint(square(5))\n</code></pre>"},{"location":"learning_paths/all_steps/#example-using-lambda-with-filter","title":"Example: Using Lambda with <code>filter</code>","text":"<p><pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)\n</code></pre> of course, the above code has the 0 edge case... but hopefully this gives you an idea.</p>"},{"location":"learning_paths/all_steps/#bonus-excercise-using-lambda-functions","title":"Bonus Excercise: Using Lambda Functions","text":"<ol> <li> <p>Filtering Odd Numbers: Use a lambda function with the <code>filter</code> function to filter out odd numbers from a list of integers.</p> Solution<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = list(filter(lambda x: x % 2 != 0, numbers))\nprint(odd_numbers)\n</code></pre> </li> <li> <p>Adding \"1\": With a super simple lambda function, add 1 to a number.</p> Solution<pre><code>add_one = lambda x: x + 1\nprint(add_one(5))\n</code></pre> </li> </ol>"},{"location":"learning_paths/all_steps/#step-9","title":"Step 9","text":"<p>In Step 9, we will focus on debugging Python code using Visual Studio Code (VSCode) and Jupyter Notebooks (<code>.ipynb</code> files). Debugging is an essential skill for any programmer, as it helps identify and fix errors in the code.</p> <p>Note: This is the kind of thing that it really helps to watch someone demonstrate what debugging looks like. I've done my best to include images, but attending class and asking questions is uniquely important for this Step.</p>"},{"location":"learning_paths/all_steps/#introduction-to-debugging","title":"Introduction to Debugging","text":"<p>Debugging is the process of finding and fixing errors or \"bugs\" in your code. Bugs can be syntax errors, runtime errors, or logical errors. Understanding how to debug effectively will save you time and frustration.</p> Why \"bug\"?<p>The term \"bug\" originated in the early days of computing when an actual insect (a moth) caused a malfunction in a computer. Since then, the term has been used to describe any unexpected behavior in software.</p>"},{"location":"learning_paths/all_steps/#types-of-errors","title":"Types of Errors","text":"<ol> <li>Syntax Errors: These occur when the code is not written correctly according to the language's rules. For example, missing a colon at the end of an <code>if</code> statement (Trent does this all the time...).</li> <li>Runtime Errors: These occur when the code is executed and something goes wrong, such as dividing by zero.</li> <li>Logical Errors: These occur when the code runs without crashing - in other words, telling you that something is wrong - but produces incorrect results. These are often the hardest to find.</li> </ol>"},{"location":"learning_paths/all_steps/#debugging-in-vscode","title":"Debugging in VSCode","text":"<p>VSCode provides powerful tools for debugging Python code, including support for Jupyter Notebooks. Here are the steps to debug a <code>.ipynb</code> file in VSCode.</p>"},{"location":"learning_paths/all_steps/#setting-up-the-debugger","title":"Setting Up the Debugger","text":"<ol> <li>Open VSCode: Make sure you have VSCode installed and open it.</li> <li>Install Python Extension: If you haven't already, install the Python extension for VSCode.</li> <li>Open Your Notebook: Open the <code>.ipynb</code> file you want to debug.</li> </ol>"},{"location":"learning_paths/all_steps/#using-breakpoints","title":"Using Breakpoints","text":"<p>Breakpoints allow you to pause the execution of your code at specific lines, so you can inspect the state of your program.</p> <ol> <li> <p>Set a Breakpoint: Click in the gutter (the space to the left of the line numbers) next to the line where you want to set a breakpoint. A red dot will appear.</p> <ul> <li> <p>The \"Gutter\" is the region to the left of the line numbers in the editor. </p> </li> <li> <p>Hover your mouse over the gutter to see the breakpoint icon. </p> </li> <li> <p>Click the dimmed breakpoint icon to set a breakpoint. </p> </li> <li> <p>Click the down arrow near the play button for the cell, and you will see the option to \"Debug Cell\" </p> </li> <li> <p>When you see the line highlighted in yellow, you have successfully set a breakpoint and you're now in debug mode! </p> </li> </ul> </li> <li> <p>Start Debugging: Now, you can walk through your code line by line. You can use the buttons in the debug toolbar to continue, step into, over, out, restart, or disconnect the debugger (symbols from left to right in image above).</p> <ul> <li>The \"Continue\" button will run the code until the next breakpoint.</li> <li>The \"Step Over\" button will run the next line of code.</li> <li>The \"Step Into\" button will go into the next function call.</li> <li>The \"Step Out\" button will run until the current function returns.</li> <li>The \"Restart\" button will restart the debugger.</li> <li>The \"Disconnect\" button will stop the debugger.</li> </ul> </li> <li> <p>Inspect Variables: When the code execution pauses at a breakpoint, you can hover over variables to see their current values or use the Variables pane to inspect them.</p> <ul> <li>To the left of the notebook, you will see the \"Variables\" tab. Click on it to see the variables in the current scope.</li> <li> <p>Note: in a Jupyter Notebook, the first time you run through the cell, your variables wont be identified yet, but they will be after the first run through. This means that if your code relies on a variable that is defined in a specific sequence, you'll need to restart the kernel and run the cell again. </p> </li> <li> <p>You can also check variables and test code in the debug console (located at the bottom of VSCode). This is a great and useful way to test code without having to run the entire cell again or update your notebook. </p> </li> </ul> </li> </ol>"},{"location":"learning_paths/all_steps/#reading-error-outputs","title":"Reading Error Outputs","text":"<p>When an error occurs, VSCode will display an error message in the terminal or output pane. Understanding these messages is crucial for debugging.</p> <ol> <li>Error Message: The error message will tell you what went wrong and where it happened. For example, <code>ZeroDivisionError: division by zero</code> indicates that you tried to divide a number by zero.</li> <li>Traceback: The traceback shows the sequence of function calls that led to the error. This can help you pinpoint where the error occurred in your code.</li> </ol>"},{"location":"learning_paths/all_steps/#using-f-strings","title":"Using F-Strings","text":"<p>While Debugging, \"F-strings\" (formatted string literals) are a more readable and concise way to include variable values in your print statements. They were introduced in Python 3.6 and have become a popular way to format strings.</p>"},{"location":"learning_paths/all_steps/#example-using-f-strings","title":"Example: Using F-Strings","text":"<p>Let's rewrite the previous example using f-strings.</p>"},{"location":"learning_paths/all_steps/#example-code_1","title":"Example Code","text":"<pre><code>number = 10\nprint(f\"Initial number: {number}\")\n\n# Perform an operation\nnumber += 5\nprint(f\"After adding 5: {number}\")\n\n# Perform another operation\nnumber *= 2\nprint(f\"After multiplying by 2: {number}\")\n</code></pre>"},{"location":"learning_paths/all_steps/#reflection_1","title":"Reflection","text":"<ul> <li>How does the use of f-strings improve the readability of the code?</li> <li>Did you find it easier to understand the output with f-strings?</li> </ul>"},{"location":"learning_paths/all_steps/#exercises_3","title":"Exercises","text":"<p>Now, let's practice debugging with some exercises. Each exercise contains code with intentional errors. Your task is to find and fix the errors.</p>"},{"location":"learning_paths/all_steps/#exercise-1-syntax-error","title":"Exercise 1: Syntax Error","text":"<p>Goal: Find and fix the syntax error.</p> <pre><code>def greet(name)\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\n</code></pre> Hint<p>Look for missing punctuation.</p>"},{"location":"learning_paths/all_steps/#exercise-2-runtime-error","title":"Exercise 2: Runtime Error","text":"<p>Goal: Read and understand the error.</p> <pre><code>def divide(a, b):\n    return a / b\n\nresult = divide(10, 0)\nprint(result)\n</code></pre> Hint<p>Think about what happens when you divide by zero.</p>"},{"location":"learning_paths/all_steps/#exercise-3-logical-error","title":"Exercise 3: Logical Error","text":"<p>Goal: Fix the logical error in the code.</p> <pre><code>def is_even(number):\n    return number % 2 == 1\n\nresult = is_even(4)\nprint(f\"Is 4 even? {result}\")\n</code></pre> Hint<p>This code functions, but isn't working properly. </p> <p>Check the logic used to determine if a number is even - does this make sense?</p>"},{"location":"learning_paths/all_steps/#exercise-4-using-breakpoints","title":"Exercise 4: Using Breakpoints","text":"<p>Goal: Practice setting breakpoints and inspecting variables.</p> <pre><code>def sum_list(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = sum_list(numbers)\nprint(f\"The sum of the list is: {result}\")\n</code></pre> Hint<p>Set a breakpoint inside the loop and inspect the value of <code>total</code> at each iteration.</p> <p>You've likely funtionally done this with print statements before, but this is a more efficient and less permanent way to do it.</p> <p>If you want to get a little fancy, try adding an f-string after the <code>total += number</code> line to print the value of the total -- notice how you can get similar information without having to set a breakpoint.</p>"},{"location":"learning_paths/all_steps/#exercise-5-reading-error-outputs","title":"Exercise 5: Reading Error Outputs","text":"<p>Goal: Read, understand, and fix the (new) error.</p> <pre><code>def get_item(lst, index):\n    return lst[index]\n\nmy_list = [1, 2, 3]\nresult = get_item(my_list, 5)\nprint(result)\n</code></pre> Hint<p>Carefully read the error message and traceback to understand what went wrong. If you don't understand the error, try asking Microsoft Copilot what the error means :) If that doesn't help, ask the professor!</p>"},{"location":"learning_paths/all_steps/#reflect_5","title":"Reflect","text":"<p>Think about how debugging can help you understand your code better and improve your problem-solving skills. What strategies can you use to debug more effectively?</p>"},{"location":"learning_paths/all_steps/#review_6","title":"Review","text":"<p>In this step, we learned about:</p> <ul> <li>Different types of errors: syntax, runtime, and logical errors.</li> <li>Setting up the debugger in VSCode.</li> <li>Using breakpoints to pause code execution and inspect variables.</li> <li>Reading and understanding error outputs.</li> </ul> <p>Understanding these concepts is essential for becoming a proficient programmer and writing reliable code.</p>"},{"location":"learning_paths/all_steps/#bonus_1","title":"Bonus","text":"<p>Because of time pressure, we can only spend on class day focused on debugging. I've created a bonus coding assignment that you can work on to practice - this will not be graded but you can ask me questions about it.</p> <p>You can download the file following this link: Debugging Bonus Assignment</p>"},{"location":"learning_paths/all_steps/#step-10-oop-introduction-to-classes-and-objects","title":"Step 10: OOP - Introduction to Classes and Objects","text":"<p>Welcome to Step 10, where we take a significant conceptual leap into Object-Oriented Programming (OOP). So far, you've been learning how to write Python code using variables, functions, loops, and control structures. Now, we will explore a new way of organizing and structuring your code: by using classes and objects.</p>"},{"location":"learning_paths/all_steps/#what-is-object-oriented-programming-oop","title":"What is Object-Oriented Programming (OOP)?","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm (a style or way of programming) based on the concept of \"objects.\" An object is an instance of a class, and a class defines the blueprint for that object.</p> <p>OOP focuses on using objects that have both data (also called attributes) and behaviors (also called methods). This is different from procedural programming, where you write sequences of instructions for the computer to follow.</p> <p>What is an instance?</p> <p>An instance is an individual object created from a class. When you define a class, you're creating a blueprint, but when you create an instance, you're making an actual object based on that blueprint.</p> <p>Instancing also happens when you define a variable, or a function. So when you assign a namespace to a class, you're creating an instance of that class.</p>"},{"location":"learning_paths/all_steps/#why-oop","title":"Why OOP?","text":"<p>OOP allows us to:</p> <ul> <li>Model real-world entities: You can represent things like students, books, or even psychology experiments as objects in your code.</li> <li>Organize and reuse code: Classes let us write modular and reusable code. Once you write a class, you can create multiple objects from it, each with its own unique data.</li> <li>Structure complex systems: As projects grow larger, OOP makes it easier to manage and structure the code.</li> </ul>"},{"location":"learning_paths/all_steps/#the-key-concepts-of-oop","title":"The Key Concepts of OOP","text":"<p>There are four fundamental concepts in OOP:</p> <ol> <li>Classes: A blueprint for creating objects. It defines a set of attributes and methods that the objects created from the class will have.</li> <li>Objects: An instance of a class. Each object can have its own data (attributes) and can perform actions (methods).</li> <li>Attributes: Data stored in an object. Think of these as characteristics of the object.</li> <li>Methods: Functions that belong to a class. These are actions the object can perform.</li> </ol> <p>Louder for the people in the back, what are Methods?</p> <p>It's written above - but methods are simply class specific functions. This is useful because you might want functions that reference attributes of the class. There will be demonstrations of this later on.</p>"},{"location":"learning_paths/all_steps/#classes-and-objects-in-python","title":"Classes and Objects in Python","text":"<p>In Python, you define a class using the <code>class</code> keyword, and you create objects from that class by calling it like a function. Let\u2019s take a look at an example:</p>"},{"location":"learning_paths/all_steps/#defining-a-class-and-creating-an-object","title":"Defining a Class and Creating an Object","text":"<pre><code># Defining a simple class called 'Person'\nclass Person:\n    # Constructor method (__init__) to initialize attributes\n    def __init__(self, name, age):\n        self.name = name  # Attribute\n        self.age = age  # Attribute\n\n    # Method to display information about the person\n    def introduce(self):\n        print(f\"Hi, my name is {self.name} and I am {self.age} years old.\")\n\n# Creating an object of the Person class\nperson1 = Person(\"Alice\", 30)\n\n# Using the object\u2019s method\nperson1.introduce()\n</code></pre>"},{"location":"learning_paths/all_steps/#whats-happening-in-the-code","title":"What\u2019s Happening in the Code?","text":"<ul> <li>class Person: This defines a new class called <code>Person</code>.</li> <li>__init__ method: This is a special method (also called a constructor) that runs when a new object is created. It initializes the object\u2019s attributes (<code>name</code> and <code>age</code>).</li> <li>self: Refers to the current instance of the class. It allows the object to reference its own attributes and methods.</li> <li>person1 = Person(\"Alice\", 30): This creates an object (an instance) of the <code>Person</code> class with the name \"Alice\" and age 30.</li> <li>person1.introduce(): Calls the method <code>introduce()</code> on the <code>person1</code> object, which prints out a message.</li> </ul>"},{"location":"learning_paths/all_steps/#key-concepts-in-oop-attributes-and-methods","title":"Key Concepts in OOP: Attributes and Methods","text":""},{"location":"learning_paths/all_steps/#attributes","title":"Attributes","text":"<p>Attributes are variables that belong to an object. They hold information about the object, and each object can have different values for its attributes.</p> <p>In the previous example, <code>name</code> and <code>age</code> are attributes of the <code>Person</code> class.</p>"},{"location":"learning_paths/all_steps/#methods","title":"Methods","text":"<p>Methods are functions that belong to an object. They define the behaviors of the object. For example, the <code>introduce</code> method is a behavior of the <code>Person</code> class, which allows the object to introduce itself.</p>"},{"location":"learning_paths/all_steps/#lets-build-more-complex-classes","title":"Let\u2019s Build More Complex Classes","text":""},{"location":"learning_paths/all_steps/#adding-more-attributes-and-methods","title":"Adding More Attributes and Methods","text":"<p>Let\u2019s create a class that represents a Car, with attributes for its brand, model, and year, and methods to start and stop the car.</p> <pre><code># Defining a Car class\nclass Car:\n    # Constructor method to initialize attributes\n    def __init__(self, brand, model, year):\n        self.brand = brand  # Attribute\n        self.model = model  # Attribute\n        self.year = year  # Attribute\n        self.is_running = False  # Attribute to track if the car is running\n\n    # Method to start the car\n    def start(self):\n        self.is_running = True\n        print(f\"The {self.year} {self.brand} {self.model} has started.\")\n\n    # Method to stop the car\n    def stop(self):\n        self.is_running = False\n        print(f\"The {self.year} {self.brand} {self.model} has stopped.\")\n\n# Creating an object of the Car class\nmy_car = Car(\"Toyota\", \"Camry\", 2020)\n\n# Starting the car\nmy_car.start()\n\n# Stopping the car\nmy_car.stop()\n</code></pre>"},{"location":"learning_paths/all_steps/#practice-create-your-own-class","title":"Practice: Create Your Own Class","text":"<p>Now it\u2019s your turn! Create a class to represent something from your daily life. It could be a Book, Laptop, or even a Pet. Your class should have:</p> <ul> <li>At least 3 attributes</li> <li>At least 2 methods</li> </ul>"},{"location":"learning_paths/all_steps/#example-exercise","title":"Example Exercise:","text":"<ol> <li>Define a class <code>Book</code> with attributes for title, author, and year.</li> <li>Add methods to display information about the book and check if it\u2019s available.</li> </ol> <p>Here\u2019s a starting point:</p> <pre><code># Your Task: Define a Book class and create objects from it\n\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.is_available = True\n\n    def display_info(self):\n        print(f\"'{self.title}' by {self.author} ({self.year})\")\n\n    def check_out(self):\n        if self.is_available:\n            self.is_available = False\n            print(f\"'{self.title}' has been checked out.\")\n        else:\n            print(f\"'{self.title}' is not available.\")\n\n    def return_book(self):\n        self.is_available = True\n        print(f\"'{self.title}' has been returned.\")\n\n# Example usage:\nbook1 = Book(\"1984\", \"George Orwell\", 1949)\nbook1.display_info()\nbook1.check_out()\nbook1.return_book()\n</code></pre>"},{"location":"learning_paths/all_steps/#reflection-why-oop-matters","title":"Reflection: Why OOP Matters","text":"<p>OOP is a powerful way to write code that models real-world objects and systems. It makes your code more modular, easier to maintain, and helps you think in terms of objects and actions rather than just sequences of instructions.</p> <p>As you move forward, keep practicing by identifying real-world objects you can model with classes and objects. This will help you internalize the concepts of OOP and become more comfortable with this new way of thinking about code!</p>"},{"location":"learning_paths/all_steps/#review_7","title":"Review","text":"<ul> <li>Classes are blueprints for creating objects.</li> <li>Objects are instances of classes.</li> <li>Attributes are characteristics of objects, while methods are actions that objects can perform.</li> <li>OOP helps model real-world entities and organize code more effectively.</li> </ul>"},{"location":"learning_paths/all_steps/#step-11","title":"Step 11","text":"<p>Welcome back! In Step 10, we introduced the fundamental concepts of Object-Oriented Programming (OOP) with Python classes and objects. In Step 11, we will dive deeper into these concepts to solidify your understanding and practical skills in OOP.</p>"},{"location":"learning_paths/all_steps/#review-of-python-classes-and-objects","title":"Review of Python Classes and Objects","text":""},{"location":"learning_paths/all_steps/#revisiting-the-__init__-method","title":"Revisiting the <code>__init__</code> Method","text":"<p>The <code>__init__</code> method is crucial in Python as it serves as the constructor for a class. It initializes the instance of the class with specific attributes. Let's revisit how to use <code>__init__</code> with different attributes.</p> <pre><code>class Person:\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n</code></pre>"},{"location":"learning_paths/all_steps/#practical-exercises","title":"Practical Exercises","text":""},{"location":"learning_paths/all_steps/#exercise-1-creating-a-person-class","title":"Exercise 1: Creating a Person Class","text":"<p>Create a <code>Person</code> class with attributes <code>name</code>, <code>age</code>, and <code>location</code>. Initialize these attributes using the <code>__init__</code> method.</p>"},{"location":"learning_paths/all_steps/#exercise-2-adding-methods-to-the-person-class","title":"Exercise 2: Adding Methods to the Person Class","text":"<p>Enhance the <code>Person</code> class by adding a method <code>update_location</code> to change the person's location and a method <code>display_profile</code> to print the person's information.</p> Solution<pre><code>class Person:\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n\n    def update_location(self, new_location):\n        self.location = new_location\n\n    def display_profile(self):\n        print(f\"Name: {self.name}, Age: {self.age}, Location: {self.location}\")\n</code></pre>"},{"location":"learning_paths/all_steps/#understanding-and-managing-class-and-instance-attributes","title":"Understanding and Managing Class and Instance Attributes","text":"<p>Let's discuss the difference between class attributes, which are shared across all instances, and instance attributes, which are unique to each instance.</p>"},{"location":"learning_paths/all_steps/#exercise-3-class-attribute-example","title":"Exercise 3: Class Attribute Example","text":"<p>Add a class attribute <code>population</code> to the <code>Person</code> class to keep count of all person instances created.</p> Solution<pre><code>class Person:\n    population = 0\n\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n        Person.population += 1\n</code></pre>"},{"location":"learning_paths/all_steps/#simple-methods-in-classes","title":"Simple Methods in Classes","text":"<p>Instance methods are functions defined inside a class and are used to define the behaviors of an instance.</p>"},{"location":"learning_paths/all_steps/#exercise-4-writing-an-instance-method","title":"Exercise 4: Writing an Instance Method","text":"<p>Write an instance method in the <code>Person</code> class that increments the person's age by one to celebrate their birthday (a <code>celebrate_birthday</code> method).</p> Solution<pre><code>class Person:\n    def __init__(self, name, age, location):\n        self.name = name\n        self.age = age\n        self.location = location\n\n    def celebrate_birthday(self):\n        self.age += 1\n        print(f\"Happy Birthday {self.name}, you are now {self.age}!\")\n</code></pre> <p>You would call the <code>celebrate_birthday</code> method on a <code>Person</code> object to increment their age, like so:</p> <pre><code># Create a Person object\nalice = Person(\"Candice\", 25, \"Cincinnati Ohio\")\n\n# Celebrate Alice's birthday\nalice.celebrate_birthday()\n</code></pre>"},{"location":"learning_paths/all_steps/#introduction-to-simple-exception-handling-within-methods","title":"Introduction to Simple Exception Handling within Methods","text":"<p>Proper error handling is essential to prevent and manage exceptions in Python programs effectively.</p> <p>You can handle errors using the <code>try</code> and <code>except</code> blocks to catch exceptions and provide appropriate responses.</p> <p>Example in a \"toy\" function:</p> <pre><code>def divide(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print(\"Error: Division by zero is not allowed.\")\n    else:\n        print(f\"The result of the division is: {result}\")\n</code></pre> <p><code>try</code> and <code>except</code> blocks are used to catch exceptions. If an exception occurs within the <code>try</code> block, the code within the <code>except</code> block is executed. Implementing exception handling in class methods is similar to the example above, and we'll practice that in the exercise below.</p>"},{"location":"learning_paths/all_steps/#exercise-5-exception-handling-in-method","title":"Exercise 5: Exception Handling in Method","text":"<p>Implement a method in the <code>Person</code> class to set the person's age, which handles exceptions if a non-integer value is passed.</p> Potential Solution<pre><code>class Person:\n    def set_age(self, age):\n        try:\n            self.age = int(age)\n        except ValueError:\n            print(\"Please enter a valid integer for age.\")\n</code></pre>"},{"location":"learning_paths/all_steps/#class-composition","title":"Class Composition","text":""},{"location":"learning_paths/all_steps/#what-is-class-composition","title":"What is Class Composition?","text":"<p>Class composition is a fundamental concept in Object-Oriented Programming where a class is formed using references to one or more objects of other classes in order to build more complex functionalities. This is often described as a \u201chas-a\u201d relationship between the composite class and the component class. For example, a <code>Library</code> has a list of <code>Books</code>.</p>"},{"location":"learning_paths/all_steps/#why-use-class-composition","title":"Why Use Class Composition?","text":"<p>Using class composition allows you to combine simple objects to create more complex structures. It\u2019s a powerful method to manage complexity by breaking down problems into smaller, more manageable parts. Composition also helps in reusing code and keeping changes localized, as updating the behavior of composed objects can be done independently.</p>"},{"location":"learning_paths/all_steps/#exercise-6-creating-a-family-class-using-composition","title":"Exercise 6: Creating a Family Class Using Composition","text":"<p>Now that you understand what class composition involves, let\u2019s put this into practice. You will create a <code>Family</code> class that demonstrates class composition by including multiple <code>Person</code> objects. Think of a family as a group of people; this is the relationship you\u2019ll model where a <code>Family</code> object will contain several <code>Person</code> objects.</p>"},{"location":"learning_paths/all_steps/#task-description","title":"Task Description","text":"<ul> <li>Person Class</li> <li>Attributes: <code>name</code>, <code>age</code></li> <li>Methods:<ul> <li>A method to display person's details.</li> </ul> </li> </ul> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display_info(self):\n        print(f\"Name: {self.name}, Age: {self.age}\")\n</code></pre> <ul> <li>Family Class</li> <li>Attributes: <code>members</code> (a list that will store instances of the <code>Person</code> class)</li> <li>Methods:<ul> <li><code>add_member</code>: Adds a new person to the family.</li> <li><code>display_family</code>: Shows the information of all family members.</li> </ul> </li> </ul> <p>Your task is to define the <code>Family</code> class using the <code>Person</code> class as described above. Here\u2019s how you might start:</p> <pre><code>class Family:\n    def __init__(self):\n        self.members = []\n\n    def add_member(self, person):\n        self.members.append(person)\n        print(f\"Added: {person.display_info()}\")\n\n    def display_family(self):\n        print(\"Family Members:\")\n        for member in self.members:\n            member.display_info()\n</code></pre>"},{"location":"learning_paths/all_steps/#explanation","title":"Explanation","text":"<ul> <li>Person Class: This class represents an individual person with basic attributes like <code>name</code> and <code>age</code>.</li> <li>Family Class: This class uses composition by having a list of <code>Person</code> objects. It represents a family where each member is a <code>Person</code> instance. You can add members to the family and display all members' details.</li> </ul> <p>This exercise will help you understand how to use class composition to structure your Python code effectively, representing real-world relationships within your programs.</p>"},{"location":"learning_paths/all_steps/#wrap-up-and-review","title":"Wrap-Up and Review","text":"<p>We've covered a lot today! From enhancing our understanding of the <code>__init__</code> method to handling exceptions within class methods. It's crucial to get comfortable with these OOP basics as they form the foundation of more complex software development concepts.</p>"},{"location":"learning_paths/all_steps/#reflect_6","title":"Reflect","text":"<p>Consider how these OOP principles can be applied to other programming tasks. Perhaps think about a small project where you could use classes to organize your code better.</p>"},{"location":"learning_paths/all_steps/#further-reading-and-resources","title":"Further Reading and Resources","text":"<p>Look for online resources or books that delve deeper into Python OOP to expand your understanding and skills.</p> <p>Thank you for participating in today's session. Keep practicing, and don't hesitate to reach out with any questions as you continue your journey in Python programming!</p>"},{"location":"learning_paths/all_steps/#step-12","title":"Step 12","text":"<p>In Step 12, we will dive into two essential programming concepts: Modular Programming and File I/O (Input/Output). These concepts allow you to break down your code into manageable pieces and interact with files, which are crucial in scientific programming for saving and loading data.</p> <p>Up until now, we've focused on writing code in a single file. However, as your programs grow in complexity, it becomes challenging to manage everything in one place. Modular programming helps you organize your code into separate modules, making it easier to maintain and reuse.</p> <p>Using a <code>.py</code> File</p> <p>Up until this point, we've been using python of \"Jupyter\" Notebooks (<code>.ipynb</code>), however, most python code is written inside of a file without predefined code blocks. Notebooks with codeblocks are incredibly useful for learning how to program and learn how functions work; it is a tool that you will always want in your belt! However, when you are writing a program that you want to run on its own (without you \"pressing play\"), you will want to write it in a <code>.py</code> file.</p>"},{"location":"learning_paths/all_steps/#modular-programming","title":"Modular Programming","text":"<p>Modular programming refers to breaking down your code into smaller, reusable pieces called modules. This makes your code more organized, easier to maintain, and promotes reusability.</p>"},{"location":"learning_paths/all_steps/#why-use-modular-programming","title":"Why Use Modular Programming?","text":"<ul> <li>Code Reusability: Instead of writing the same code multiple times, you can write a function or a class once and use it across multiple programs or modules.</li> <li>Maintainability: By dividing the code into separate modules, it becomes easier to locate and fix bugs or add new features without affecting the entire program.</li> <li>Readability: Modular code is generally more readable and easier to follow, especially in large projects.</li> </ul>"},{"location":"learning_paths/all_steps/#creating-and-using-modules","title":"Creating and Using Modules","text":"<p>In Python, a module is simply a file that contains Python code. You can create a module by saving functions, classes, or variables in a <code>.py</code> file and then importing it into another file. </p> <p>To be clear, this is not in a Jupyter Notebook, but in a <code>.py</code> file - you can create a new file in VSCode and save it as <code>math_operations.py</code> and then write your functions in that file, below.</p>"},{"location":"learning_paths/all_steps/#example-creating-and-importing-a-module","title":"Example: Creating and Importing a Module","text":"<p>Let's create a simple module called <code>math_operations.py</code> that contains a few basic mathematical functions.</p> <p><code>math_operations.py</code>: <pre><code># This is a module that contains mathematical operations\n\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return \"Cannot divide by zero\"\n</code></pre></p> <p>Now, create a new python file in the same directory (folder). You can then import the <code>math_operations.py</code> module into this new Python file and use its functions:</p> <p>Using the <code>math_operations</code> module: <pre><code>import math_operations\n\nresult_add = math_operations.add(10, 5)\nresult_divide = math_operations.divide(10, 2)\n\nprint(f\"Addition Result: {result_add}\")\nprint(f\"Division Result: {result_divide}\")\n</code></pre></p>"},{"location":"learning_paths/all_steps/#importing-specific-functions","title":"Importing Specific Functions","text":"<p>You can also import specific functions from a module instead of the whole module.</p> <pre><code>from math_operations import add, divide\n\nresult_add = add(10, 5)\nresult_divide = divide(10, 2)\n\nprint(f\"Addition Result: {result_add}\")\nprint(f\"Division Result: {result_divide}\")\n</code></pre>"},{"location":"learning_paths/all_steps/#exercises-create-and-import-modules","title":"Exercises: Create and Import Modules","text":"<ol> <li>Create a <code>string_operations.py</code> module: <ul> <li>Define functions like <code>count_vowels</code> and <code>reverse_string</code>.</li> </ul> </li> <li>Import and use the module:<ul> <li>Write a Python script to use the functions from <code>string_operations.py</code> to process some input text.</li> </ul> </li> </ol>"},{"location":"learning_paths/all_steps/#file-io-input-and-output","title":"File I/O (Input and Output)","text":"<p>File I/O refers to the process of reading from and writing to files. In Python, file handling is done using built-in functions like <code>open()</code>, <code>read()</code>, and <code>write()</code>.</p>"},{"location":"learning_paths/all_steps/#working-with-files","title":"Working with Files","text":"<p>Python makes it easy to work with files using the <code>open()</code> function. When you open a file, you can choose different modes like: - 'r': Read mode (default) \u2013 Opens a file for reading. - 'w': Write mode \u2013 Opens a file for writing (creates a new file or overwrites an existing file). - 'a': Append mode \u2013 Opens a file for appending (adds new data at the end of the file). - 'r+': Read and write mode \u2013 Opens a file for both reading and writing.</p>"},{"location":"learning_paths/all_steps/#reading-from-a-file","title":"Reading from a File","text":"<p>The <code>read()</code> method reads the entire content of a file, and <code>readline()</code> reads one line at a time.</p>"},{"location":"learning_paths/all_steps/#example-reading-from-a-file","title":"Example: Reading from a File","text":"<p>Suppose we have a file called <code>data.txt</code> with the following content:</p> <p><code>data.txt</code>: <pre><code>Hello, this is a sample file.\nIt contains multiple lines.\nEach line has some text.\n</code></pre></p> <p>We can read this file using Python:</p> <p>Check your Directory</p> <p>Make sure the file you are trying to read is in the same directory as your Python script.</p> <pre><code># Open the file in read mode\nfile = open(\"data.txt\", \"r\")\n\n# Read the entire file\ncontent = file.read()\n\n# Close the file\nfile.close()\n\nprint(content)\n</code></pre>"},{"location":"learning_paths/all_steps/#writing-to-a-file","title":"Writing to a File","text":"<p>The <code>write()</code> method allows you to write content to a file. Be careful when using the write mode (<code>'w'</code>) as it will overwrite any existing content in the file.</p>"},{"location":"learning_paths/all_steps/#example-writing-to-a-file","title":"Example: Writing to a File","text":"<pre><code># Open the file in write mode\nfile = open(\"output.txt\", \"w\")\n\n# Write to the file\nfile.write(\"This is the first line.\\n\")\nfile.write(\"This is the second line.\\n\")\n\n# Close the file\nfile.close()\n</code></pre>"},{"location":"learning_paths/all_steps/#appending-to-a-file","title":"Appending to a File","text":"<p>The append mode (<code>'a'</code>) allows you to add content to the end of the file without overwriting the existing content.</p>"},{"location":"learning_paths/all_steps/#example-appending-to-a-file","title":"Example: Appending to a File","text":"<pre><code># Open the file in append mode\nfile = open(\"output.txt\", \"a\")\n\n# Append to the file\nfile.write(\"This is an appended line.\\n\")\n\n# Close the file\nfile.close()\n</code></pre>"},{"location":"learning_paths/all_steps/#using-with-to-handle-files","title":"Using <code>with</code> to Handle Files","text":"<p>It's a good practice to use the <code>with</code> statement when working with files. This automatically closes the file after the block of code is executed, even if an error occurs.</p>"},{"location":"learning_paths/all_steps/#example-using-with","title":"Example: Using <code>with</code>","text":"<pre><code># Using 'with' to open and read a file\nwith open(\"data.txt\", \"r\") as file:\n    content = file.read()\n\nprint(content)\n</code></pre> <p>The file will be automatically closed after the block of code inside <code>with</code> is executed.</p>"},{"location":"learning_paths/all_steps/#exercises-working-with-files","title":"Exercises: Working with Files","text":"<ol> <li>Read a file: Create a file called <code>my_data.txt</code> and write a Python script to read and print its contents.</li> <li>Write to a file: Write a Python script that writes user input to a file called <code>user_data.txt</code>.</li> <li>Append to a file: Modify the script to append new user input to <code>user_data.txt</code> without overwriting the existing content.</li> </ol>"},{"location":"learning_paths/all_steps/#reflect_7","title":"Reflect","text":"<p>Think about how modular programming and file I/O can help in scientific programming. Why might you want to break your code into modules? How could file I/O be useful in experiments or data analysis?</p>"},{"location":"learning_paths/all_steps/#review_8","title":"Review","text":"<p>In this step, we covered two important topics:</p> <ul> <li>Modular Programming: Breaking down code into reusable modules and importing them into other files.</li> <li>File I/O: Reading from and writing to files in Python.</li> </ul> <p>These concepts are essential for organizing your code and handling data efficiently in larger programming projects.</p>"},{"location":"learning_paths/all_steps/#step-13","title":"Step 13","text":"<p>In step 12, you were introduced to modular programming and file I/O (input/output) operations. In Step 13, we will continue to explore Modules and File Operations by combining them in a cohesive manner. We\u2019ll expand our knowledge of file handling, delve into advanced file operations, and use Python's built-in modules to work with both CSV and JSON formats. You\u2019ll also learn how to handle errors that may occur during file processing, ensuring your programs run smoothly.</p>"},{"location":"learning_paths/all_steps/#1-introduction-to-modules-and-file-operations","title":"1. Introduction to Modules and File Operations","text":"<p>In behavioral science and psychology, data collection is key. Working with datasets efficiently requires tools that let you organize and manage your code and data. Modules allow you to break down your code into reusable components, and File Operations enable you to save, retrieve, and process data stored in files.</p> <p>In this step, we\u2019ll combine modular programming with file operations, ensuring that your programs are well-structured and can handle data in multiple formats, such as CSV and JSON.</p>"},{"location":"learning_paths/all_steps/#2-importing-built-in-modules","title":"2. Importing Built-in Modules","text":"<p>Python provides various built-in modules that simplify tasks like interacting with files and directories. Let\u2019s start with the <code>os</code> module for working with your system\u2019s file structure.</p>"},{"location":"learning_paths/all_steps/#the-os-module","title":"The <code>os</code> Module","text":"<p>The <code>os</code> module provides functions for interacting with the operating system. You can use it to navigate directories, check if files exist, and even remove or rename files.</p>"},{"location":"learning_paths/all_steps/#example-using-os-to-work-with-files-and-directories","title":"Example: Using <code>os</code> to Work with Files and Directories","text":"<p>Here\u2019s how you can use the <code>os</code> module to interact with files and directories:</p> <pre><code>import os\n\n# Get the current working directory\ncurrent_directory = os.getcwd()\nprint(f\"Current Directory: {current_directory}\")\n\n# List all files in the current directory\nfiles = os.listdir(current_directory)\nprint(f\"Files: {files}\")\n\n# Check if a file exists\nif os.path.exists(\"data.txt\"):\n    print(\"The file 'data.txt' exists.\")\nelse:\n    print(\"The file 'data.txt' does not exist.\")\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-use-os-to-check-if-a-file-exists","title":"Exercise: Use <code>os</code> to Check if a File Exists","text":"<ul> <li>Write a Python script that checks if a file called <code>experiment_data.txt</code> exists in the current directory. If the file exists, read its contents; if not, print a message saying the file is missing.</li> </ul>"},{"location":"learning_paths/all_steps/#3-working-with-csv-files","title":"3. Working with CSV Files","text":"<p>In the behavioral sciences, data often comes in CSV (Comma Separated Values) format. The <code>csv</code> module in Python makes it easy to write (create) and read (work with) CSV files. </p> <p>CSV files are often used because they are simple, human-readable, and compatible with many data processing tools, such as Excel.</p>"},{"location":"learning_paths/all_steps/#writing-to-a-csv-file","title":"Writing to a CSV File","text":"<p>You can write data to a CSV file using the <code>csv.writer()</code> method. Here\u2019s how:</p> <pre><code>import csv\n\n# Data to write\ndata = [\n    ['Name', 'Age', 'Occupation'],\n    ['Alice', '29', 'Therapist'],\n    ['Bob', '34', 'Psychologist']\n]\n\n# Open a CSV file for writing\nwith open('occupation_data.csv', mode='w', newline='') as file:\n    csv_writer = csv.writer(file)\n\n    # Write each row to the CSV file\n    csv_writer.writerows(data)\n</code></pre>"},{"location":"learning_paths/all_steps/#reading-from-a-csv-file","title":"Reading from a CSV File","text":"<p>To read data from a CSV file, use the <code>csv.reader()</code> function:</p> <pre><code>import csv\n\n# Open the CSV file\nwith open('occupation_data.csv', mode='r') as file:\n    csv_reader = csv.reader(file)\n\n    # Loop through the rows in the CSV\n    for row in csv_reader:\n        print(row)\n</code></pre>"},{"location":"learning_paths/all_steps/#4-working-with-json-files","title":"4. Working with JSON Files","text":"<p>JSON (JavaScript Object Notation) is another popular format for storing structured data. It\u2019s easy to read and write, and closely resembles Python dictionaries. JSON is commonly used for storing data in web applications and APIs.</p>"},{"location":"learning_paths/all_steps/#writing-and-reading-json-files","title":"Writing and Reading JSON Files","text":"<p>You can use the <code>json</code> module to write and read JSON files.</p>"},{"location":"learning_paths/all_steps/#example-writing-and-reading-json","title":"Example: Writing and Reading JSON","text":"<pre><code>import json\n\n# Writing to a JSON file\ndata = {\"name\": \"Alice\", \"age\": 30, \"occupation\": \"Therapist\"}\nwith open(\"data.json\", \"w\") as file:\n    json.dump(data, file)\n\n# Reading from a JSON file\nwith open(\"data.json\", \"r\") as file:\n    data_loaded = json.load(file)\n    print(data_loaded)\n</code></pre>"},{"location":"learning_paths/all_steps/#5-handling-file-exceptions","title":"5. Handling File Exceptions","text":"<p>When working with files, errors such as a missing file or permission issues can occur. It\u2019s important to handle these exceptions to prevent your code from crashing.</p>"},{"location":"learning_paths/all_steps/#example-handling-file-errors","title":"Example: Handling File Errors","text":"<pre><code>try:\n    with open(\"nonexistent_file.txt\", \"r\") as file:\n        content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found.\")\nexcept PermissionError:\n    print(\"Error: Permission denied.\")\n</code></pre>"},{"location":"learning_paths/all_steps/#final-exercise-bringing-it-all-together","title":"Final Exercise: Bringing It All Together","text":"<p>Now that you've learned how to work with both CSV and JSON files, and handle file errors, let's put everything together. </p>"},{"location":"learning_paths/all_steps/#instructions","title":"Instructions:","text":"<ol> <li> <p>Create a Custom Module for File Operations:</p> <ul> <li>Create a <code>file_utils.py</code> file that contains functions for reading/writing both CSV and JSON files.</li> <li>Include error handling in this module to manage missing or corrupted files.</li> </ul> </li> <li> <p>Create a Class System for Data Collection:</p> <ul> <li>Create a Python script that defines two classes: <code>User</code> and <code>Survey</code>.<ul> <li>The <code>User</code> class should have attributes for <code>name</code>, <code>age</code>, and <code>profession</code>.</li> <li>The <code>Survey</code> class should manage a collection of <code>User</code> objects and provide methods for writing the data to both CSV and JSON formats.</li> </ul> </li> </ul> </li> <li> <p>File Operations:</p> <ul> <li>Collect user data and save it to both a CSV and a JSON file using your <code>file_utils.py</code> functions.</li> <li>Implement a function to load the saved data back into your program from either format (CSV or JSON) and print it to the console.</li> </ul> </li> <li> <p>Exception Handling:</p> <ul> <li>Ensure that your program handles errors gracefully if the file does not exist or is corrupted.</li> <li>If the program fails to load the CSV or JSON file, it should print a user-friendly error message.</li> </ul> </li> </ol> <p>Practice for your Written Assessment</p> <p>To practice for the written assessment, outline how you would solve this problem before you start your implementation. You can write out your solution on a piece of paper or in your text editor of choice (Google/Word Doc, etc.). Be as detailed as you can manage. Once you're done with this, then use your outline to implement the solution - how close were you? What did you forget? Answering these questions will help you prepare for the written assessment!</p> Potential Solution<ol> <li> <p>file_utils.py: <pre><code>import os\nimport csv\nimport json\n\ndef file_exists(file_path):\n    return os.path.exists(file_path)\n\ndef read_json(file_path):\n    try:\n        with open(file_path, \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(f\"Error: {file_path} not found.\")\n    except json.JSONDecodeError:\n        print(f\"Error: Could not decode {file_path}.\")\n\ndef write_json(file_path, data):\n    with open(file_path, \"w\") as file:\n        json.dump(data, file)\n\ndef read_csv(file_path):\n    try:\n        with open(file_path, \"r\") as file:\n            return list(csv.reader(file))\n    except FileNotFoundError:\n        print(f\"Error: {file_path} not found.\")\n\ndef write_csv(file_path, data):\n    with open(file_path, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n</code></pre></p> </li> <li> <p>survey.py: <pre><code>from file_utils import write_csv, write_json\n\nclass User:\n    def __init__(self, name, age, profession):\n        self.name = name\n        self.age = age\n        self.profession = profession\n\nclass Survey:\n    def __init__(self):\n        self.users = []\n\n    def add_user(self, user):\n        self.users.append(user)\n\n    def save_data(self, csv_file, json_file):\n        data = [[user.name, user.age, user.profession] for user in self.users]\n        write_csv(csv_file, data)\n        write_json(json_file, data)\n\nsurvey = Survey()\nuser1 = User('Alice', 29, 'Therapist')\nuser2 = User('Bob', 34, 'Psychologist')\nsurvey.add_user(user1)\nsurvey.add_user(user2)\nsurvey.save_data('user_data.csv', 'user_data.json')\n</code></pre></p> </li> </ol>"},{"location":"learning_paths/all_steps/#reflect-and-review","title":"Reflect and Review","text":"<p>At this point, you should understand how to combine modular programming and file operations to handle data in CSV and JSON formats. You\u2019ve also learned how to handle file-related errors to ensure your program runs smoothly even when issues arise.</p> <p>Reflect on how you can apply these skills in real-world behavioral science research. Handling data in various formats is crucial for data analysis and collaboration. Moreover, using modular programming makes your code more maintainable, reusable, and easier to debug.</p>"},{"location":"learning_paths/all_steps/#step-14","title":"Step 14","text":"<p>In Step 14, we will explore four of the most common data structures in Python: Lists, Tuples, Dictionaries, and Sets. These data structures are essential for organizing and storing data efficiently, and you will frequently encounter them in any kind of data analysis, especially in behavioral science research.</p> <p>Let\u2019s dive into each one and understand how to use them in Python!</p>"},{"location":"learning_paths/all_steps/#1-introduction-to-python-data-structures","title":"1. Introduction to Python Data Structures","text":"<p>Python offers a variety of ways to store and organize data. Each structure has its own use cases and advantages. In this step, we will cover:</p> <ul> <li>Lists: Ordered, mutable collections of items.</li> <li>Tuples: Ordered, immutable collections of items.</li> <li>Dictionaries: Key-value pairs for efficient data lookup.</li> <li>Sets: Unordered collections of unique elements.</li> </ul> <p>We\u2019ll discuss each one in detail, provide code examples, and give you exercises to help solidify your understanding.</p>"},{"location":"learning_paths/all_steps/#2-working-with-lists","title":"2. Working with Lists","text":""},{"location":"learning_paths/all_steps/#what-are-lists","title":"What Are Lists?","text":"<p>A list is an ordered collection of items (elements). Lists are mutable, which means that the elements can be changed after the list is created. You can add, remove, and modify elements in a list.</p>"},{"location":"learning_paths/all_steps/#example-creating-and-modifying-lists","title":"Example: Creating and Modifying Lists","text":"<pre><code># Creating a list of participants\nparticipants = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\n# Accessing elements in a list\nprint(participants[0])  # Output: Alice\n\n# Modifying elements in a list\nparticipants[1] = \"Barbara\"\nprint(participants)  # Output: ['Alice', 'Barbara', 'Charlie', 'David']\n\n# Adding new elements to the list\nparticipants.append(\"Eve\")\nprint(participants)  # Output: ['Alice', 'Barbara', 'Charlie', 'David', 'Eve']\n\n# Removing an element from the list\nparticipants.remove(\"Charlie\")\nprint(participants)  # Output: ['Alice', 'Barbara', 'David', 'Eve']\n</code></pre>"},{"location":"learning_paths/all_steps/#list-methods","title":"List Methods","text":"<p>Here are a few useful methods you can use with lists: - <code>append()</code>: Adds an element to the end of the list. - <code>remove()</code>: Removes the first occurrence of an element from the list. - <code>sort()</code>: Sorts the list in place. - <code>len()</code>: Returns the length of the list.</p>"},{"location":"learning_paths/all_steps/#exercise-working-with-lists","title":"Exercise: Working with Lists","text":"<ol> <li>Create a List: Create a list of 5 favorite hobbies.</li> <li>Modify the List: Add a new hobby to the list, then remove the second hobby from the list.</li> <li>Print and Sort: Print the final list and sort it alphabetically.</li> </ol>"},{"location":"learning_paths/all_steps/#3-working-with-tuples","title":"3. Working with Tuples","text":""},{"location":"learning_paths/all_steps/#what-are-tuples","title":"What Are Tuples?","text":"<p>A tuple is similar to a list, but it is immutable, meaning that once a tuple is created, its elements cannot be changed. Tuples are useful when you want to store a collection of items that should not be modified.</p>"},{"location":"learning_paths/all_steps/#example-creating-and-accessing-tuples","title":"Example: Creating and Accessing Tuples","text":"<pre><code># Creating a tuple\ncoordinates = (10, 20)\n\n# Accessing elements in a tuple\nprint(coordinates[0])  # Output: 10\n\n# Tuples are immutable, so you cannot modify them\n# The following line would raise an error:\n# coordinates[0] = 15  # Uncommenting this will raise a TypeError\n\n# You can create a tuple with a single element by adding a comma at the end\nsingle_element_tuple = (42,)\nprint(single_element_tuple)  # Output: (42,)\n</code></pre> <p>Tuple Syntax</p> <p>Notice that Tuples are created using parentheses <code>()</code> and elements are separated by commas, where as Lists are created using square brackets <code>[]</code>. This distinction is important to remember when working with these data structures!</p>"},{"location":"learning_paths/all_steps/#when-to-use-tuples","title":"When to Use Tuples","text":"<ul> <li>Use a tuple when you have a collection of items that should not change.</li> <li>Tuples are often used to represent fixed collections, such as geographical coordinates or RGB color values.</li> </ul>"},{"location":"learning_paths/all_steps/#exercise-working-with-tuples","title":"Exercise: Working with Tuples","text":"<ol> <li>Create a Tuple: Create a tuple that contains your birthdate (day, month, year).</li> <li>Access Elements: Print the day, month, and year individually by accessing the tuple elements.</li> <li>Experiment: Try modifying the tuple (and note why it doesn\u2019t work).</li> </ol>"},{"location":"learning_paths/all_steps/#4-working-with-dictionaries","title":"4. Working with Dictionaries","text":""},{"location":"learning_paths/all_steps/#what-are-dictionaries","title":"What Are Dictionaries?","text":"<p>A dictionary is a collection of key-value pairs. Each key is associated with a value, and you can use the key to quickly access the corresponding value. Dictionaries are mutable, so you can change the values associated with keys after the dictionary is created.</p>"},{"location":"learning_paths/all_steps/#example-creating-and-using-dictionaries","title":"Example: Creating and Using Dictionaries","text":"<pre><code># Creating a dictionary to store survey responses\nsurvey_responses = {\n    \"Alice\": 5,\n    \"Bob\": 7,\n    \"Charlie\": 6\n}\n\n# Accessing a value by its key\nprint(survey_responses[\"Bob\"])  # Output: 7\n\n# Modifying a value\nsurvey_responses[\"Bob\"] = 8\nprint(survey_responses)  # Output: {'Alice': 5, 'Bob': 8, 'Charlie': 6}\n\n# Adding a new key-value pair\nsurvey_responses[\"David\"] = 9\nprint(survey_responses)  # Output: {'Alice': 5, 'Bob': 8, 'Charlie': 6, 'David': 9}\n\n# Removing a key-value pair\ndel survey_responses[\"Charlie\"]\nprint(survey_responses)  # Output: {'Alice': 5, 'Bob': 8, 'David': 9}\n</code></pre>"},{"location":"learning_paths/all_steps/#dictionary-methods","title":"Dictionary Methods","text":"<ul> <li><code>keys()</code>: Returns a list of all keys in the dictionary.</li> <li><code>values()</code>: Returns a list of all values in the dictionary.</li> <li><code>items()</code>: Returns a list of key-value pairs (tuples).</li> </ul>"},{"location":"learning_paths/all_steps/#example-using-dictionary-methods","title":"Example: Using Dictionary Methods","text":"<pre><code># Getting all keys in the dictionary\nprint(survey_responses.keys())  # Output: dict_keys(['Alice', 'Bob', 'David'])\n\n# Getting all values in the dictionary\nprint(survey_responses.values())  # Output: dict_values([5, 8, 9])\n\n# Getting key-value pairs as tuples\nprint(survey_responses.items())  # Output: dict_items([('Alice', 5), ('Bob', 8), ('David', 9)])\n</code></pre>"},{"location":"learning_paths/all_steps/#exercise-working-with-dictionaries","title":"Exercise: Working with Dictionaries","text":"<ol> <li>Create a Dictionary: Create a dictionary with the names of three friends and their favorite colors.</li> <li>Modify the Dictionary: Change one friend's favorite color and add a new friend with their favorite color. <p>Hint, use the <code>update()</code> method (this is a clickable link) to add a new key-value pair to the dictionary as well as to update an existing key-value pair.</p> </li> <li>Print and Access: Print the dictionary and access the favorite color of one of your friends.</li> </ol>"},{"location":"learning_paths/all_steps/#5-working-with-sets","title":"5. Working with Sets","text":""},{"location":"learning_paths/all_steps/#what-are-sets","title":"What Are Sets?","text":"<p>A set is an unordered collection of unique elements. Sets are useful when you want to store items without duplicates and don't care about the order of the elements. Sets are mutable, but you cannot access elements by index like in lists.</p> <p>Online resource for sets can be found here</p>"},{"location":"learning_paths/all_steps/#example-creating-and-using-sets","title":"Example: Creating and Using Sets","text":"<pre><code># Creating a set of participants\nparticipants = {\"Alice\", \"Bob\", \"Charlie\", \"David\"}\n\n# Adding a new element to the set\nparticipants.add(\"Eve\")\nprint(participants)  # Output: {'Alice', 'Bob', 'Charlie', 'David', 'Eve'}\n\n# Trying to add a duplicate element (it will have no effect)\nparticipants.add(\"Alice\")\nprint(participants)  # Output: {'Alice', 'Bob', 'Charlie', 'David', 'Eve'}\n\n# Removing an element from the set\nparticipants.remove(\"David\")\nprint(participants)  # Output: {'Alice', 'Bob', 'Charlie', 'Eve'}\n</code></pre>"},{"location":"learning_paths/all_steps/#set-operations","title":"Set Operations","text":"<ul> <li><code>add()</code>: Adds an element to the set.</li> <li><code>remove()</code>: Removes an element from the set.</li> <li><code>union()</code>: Returns a new set containing all elements from two sets (without duplicates).</li> <li><code>intersection()</code>: Returns a new set containing only elements found in both sets.</li> </ul>"},{"location":"learning_paths/all_steps/#exercise-working-with-sets","title":"Exercise: Working with Sets","text":"<ol> <li>Create a Set: Create a set of favorite fruits.</li> <li>Add Elements: Add a new fruit to the set and attempt to add a duplicate fruit.</li> <li>Perform Set Operations: Create a second set of fruits and find the union and intersection of the two sets.</li> </ol>"},{"location":"learning_paths/all_steps/#6-final-exercise-working-with-data-structures","title":"6. Final Exercise: Working with Data Structures","text":"<p>Now that you\u2019ve learned about lists, tuples, dictionaries, and sets, let's wrap up with a final exercise that brings these concepts together.</p>"},{"location":"learning_paths/all_steps/#instructions_1","title":"Instructions:","text":"<ol> <li> <p>Create a Class System for Participants:</p> <ul> <li>Create a <code>Participant</code> class that stores the name, age, and favorite hobby of each participant.</li> <li>Use a list to store a collection of <code>Participant</code> objects.</li> </ul> </li> <li> <p>Store Data in a Dictionary:</p> <ul> <li>Create a dictionary where the keys are participant names and the values are tuples containing their age and favorite hobby.</li> </ul> </li> <li> <p>Use a Set for Unique Hobbies:</p> <ul> <li>Extract all unique hobbies from the participants and store them in a set.</li> </ul> </li> <li> <p>Final Output:</p> <ul> <li>Print the list of participants.</li> <li>Print the dictionary mapping names to participant details.</li> <li>Print the set of unique hobbies.</li> </ul> </li> </ol> <p>Practice for your Written Assessment</p> <p>To practice for the written assessment, outline how you would solve this problem before you start your implementation. You can write out your solution on a piece of paper or in your text editor of choice (Google/Word Doc, etc.). Be as detailed as you can manage. Once you're done with this, then use your outline to implement the solution - how close were you? What did you forget? Answering these questions will help you prepare for the written assessment!</p> Potential Solution<pre><code>class Participant:\n    def __init__(self, name, age, hobby):\n        self.name = name\n        self.age = age\n        self.hobby = hobby\n\n# List to store participants\nparticipants = [\n    Participant(\"Alice\", 29, \"Reading\"),\n    Participant(\"Bob\", 34, \"Cycling\"),\n    Participant(\"Charlie\", 27, \"Reading\"),\n    Participant(\"David\", 31, \"Swimming\")\n]\n\n# Dictionary to map participant names to their age and hobby\nparticipant_dict = {p.name: (p.age, p.hobby) for p in participants}\nprint(participant_dict)\n</code></pre> <pre><code># Set to store unique hobbies\nunique_hobbies = {p.hobby for p in participants}\nprint(unique_hobbies)\n\n#Expected Output:\n# {'Reading', 'Cycling', 'Swimming'}\n</code></pre>"},{"location":"learning_paths/all_steps/#7-reflect-and-review","title":"7. Reflect and Review","text":"<p>In this step, we covered four essential Python data structures:</p> <ul> <li>Lists: Ordered, mutable collections of items, which are ideal for managing an ordered set of data that might need to be modified.</li> <li>Tuples: Ordered but immutable collections, useful for fixed data that should not be changed once defined.</li> <li>Dictionaries: Unordered collections of key-value pairs, which are excellent for mapping relationships, such as names to data.</li> <li>Sets: Unordered collections of unique items, great for ensuring no duplicates and for performing mathematical set operations such as unions and intersections.</li> </ul>"},{"location":"learning_paths/all_steps/#why-are-these-data-structures-important","title":"Why Are These Data Structures Important?","text":"<p>These data structures help organize, store, and access data efficiently in Python programs, especially in scenarios where datasets are large or need to be processed in various ways. Understanding the strengths and limitations of each type of data structure is crucial for writing effective and optimized Python code.</p> <p>Think about how you might apply these structures in real-world projects:</p> <ul> <li>Lists for managing ordered collections like participant data or survey responses.</li> <li>Tuples for grouping related but unchangeable data, like coordinates or fixed settings.</li> <li>Dictionaries for looking up information quickly, such as mapping survey participants to their answers.</li> <li>Sets for managing collections where uniqueness is required, such as lists of unique hobbies or tags.</li> </ul> <p>Having a strong grasp of Python\u2019s core data structures will help you organize and manipulate data more effectively in future projects.</p>"},{"location":"learning_paths/all_steps/#step-15","title":"Step 15","text":"<p>In Step 14, we introduced the four most common data structures in Python: Lists, Tuples, Dictionaries, and Sets. Now that you have a basic understanding of these structures, it's time to practice manipulating them. Data manipulation is essential in research and real-world projects, as it allows you to prepare, clean, and transform data for analysis.</p>"},{"location":"learning_paths/all_steps/#1-working-with-lists","title":"1. Working with Lists","text":"<p>Lists are mutable, meaning you can change their elements after they've been created. Let\u2019s explore some ways to manipulate lists.</p>"},{"location":"learning_paths/all_steps/#adding-elements","title":"Adding Elements","text":"<p>You can add new elements to a list using the <code>append()</code> and <code>insert()</code> methods.</p> <pre><code># Example: Append vs Insert\nmy_list = [1, 2, 3]\nmy_list.append(4)  # Adds 4 to the end\nmy_list.insert(1, \"inserted\")  # Inserts at index 1\n\nprint(my_list)\n</code></pre> <ul> <li><code>append()</code> adds the element to the end of the list.</li> <li><code>insert()</code> allows you to add an element at a specific position in the list. The first argument is the index where you want to insert the element.</li> </ul>"},{"location":"learning_paths/all_steps/#removing-elements","title":"Removing Elements","text":"<p>To remove elements, you can use the <code>remove()</code> method or the <code>pop()</code> method.</p> <ul> <li><code>remove()</code> deletes the first occurrence of a value.</li> <li><code>pop()</code> removes an element by index, which means it removes the element at a specific position in the list, rather than searching for the value itself. Every item in a list has an index that represents its position in the list, starting with 0 for the first item.</li> </ul> <p>For example, in the list <code>['apple', 'banana', 'cherry']</code>, 'apple' has index 0, 'banana' has index 1, and 'cherry' has index 2. If you use <code>pop(1)</code>, it will remove 'banana' because it's at index 1.</p> <pre><code># Example: Remove vs Pop\nmy_list.remove(2)  # Removes the first occurrence of 2\nmy_list.pop(1)  # Removes the element at index 1, which is \"inserted\"\n\nprint(my_list)\n</code></pre>"},{"location":"learning_paths/all_steps/#2-working-with-tuples","title":"2. Working with Tuples","text":"<p>Tuples are immutable, meaning you cannot change their contents after creation. However, you can perform operations like slicing and unpacking.</p>"},{"location":"learning_paths/all_steps/#unpacking-tuples","title":"Unpacking Tuples","text":"<p>\"Unpacking\" means assigning the elements of a tuple to individual variables. This allows you to break the tuple into its components and work with each one separately. For example:</p> <pre><code># Example: Tuple Unpacking\nmy_tuple = (10, 20, 30)\na, b, c = my_tuple  # Unpacks the values into a, b, c\n\nprint(a, b, c)\n</code></pre> <ul> <li>In this example, the values 10, 20, and 30 are \"unpacked\" from the tuple and assigned to the variables <code>a</code>, <code>b</code>, and <code>c</code>. This technique is useful when you need to work with individual components of a tuple.</li> </ul> <p>If the number of variables on the left doesn\u2019t match the number of elements in the tuple, Python will raise an error.</p>"},{"location":"learning_paths/all_steps/#3-manipulating-dictionaries","title":"3. Manipulating Dictionaries","text":"<p>Dictionaries allow you to store key-value pairs. You can add, update, and delete key-value pairs easily.</p>"},{"location":"learning_paths/all_steps/#adding-and-updating-elements","title":"Adding and Updating Elements","text":"<p>You can add new key-value pairs or update existing ones by assigning a value to a key.</p> <pre><code># Example: Add and Update Dictionary\nmy_dict = {\"name\": \"Alice\", \"age\": 25}\nmy_dict[\"age\"] = 26  # Update existing key\nmy_dict[\"city\"] = \"New York\"  # Add new key-value pair\n\nprint(my_dict)\n</code></pre>"},{"location":"learning_paths/all_steps/#removing-elements_1","title":"Removing Elements","text":"<p>To remove an element, use the <code>del</code> statement or the <code>pop()</code> method.</p> <pre><code># Example: Delete vs Pop\ndel my_dict[\"city\"]  # Deletes the key-value pair for 'city'\nmy_dict.pop(\"age\")  # Removes 'age' key and returns its value\n\nprint(my_dict)\n</code></pre>"},{"location":"learning_paths/all_steps/#looping-through-a-dictionary","title":"Looping Through a Dictionary","text":"<p>You can loop through a dictionary to access its keys and values, allowing you to manipulate or analyze its data.</p> <pre><code># Example: Looping through a dictionary\nmy_dict = {\"name\": \"Alice\", \"age\": 26, \"city\": \"New York\"}\n\nfor key, value in my_dict.items():\n    print(f\"The key is {key} and the value is {value}\")\n</code></pre> <ul> <li><code>my_dict.items()</code> returns each key-value pair as a tuple, and you can unpack it into <code>key</code> and <code>value</code> as shown in the example. This is useful for iterating over all the entries in a dictionary to access or modify the data.</li> </ul>"},{"location":"learning_paths/all_steps/#4-set-operations","title":"4. Set Operations","text":"<p>Sets are unordered collections of unique elements. They support mathematical operations like union, intersection, and difference, which are helpful when comparing sets of data.</p>"},{"location":"learning_paths/all_steps/#adding-and-removing-elements","title":"Adding and Removing Elements","text":"<pre><code># Example: Add and Remove in Set\nmy_set = {1, 2, 3}\nmy_set.add(4)  # Adds 4 to the set\nmy_set.remove(2)  # Removes 2 from the set\n\nprint(my_set)\n</code></pre>"},{"location":"learning_paths/all_steps/#set-operations-union-intersection-difference","title":"Set Operations: Union, Intersection, Difference","text":"<ul> <li>Union combines all unique elements from two sets.</li> <li>Intersection returns only the elements that are present in both sets.</li> <li>Difference returns the elements that are in one set but not in the other.</li> </ul> <pre><code># Example: Set Operations\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\nunion_set = set1.union(set2)  # Union of two sets\nintersection_set = set1.intersection(set2)  # Intersection of two sets\ndifference_set = set1.difference(set2)  # Elements in set1 but not in set2\n\nprint(\"Union:\", union_set)\nprint(\"Intersection:\", intersection_set)\nprint(\"Difference:\", difference_set)\n</code></pre> <ul> <li>Union: <code>{1, 2, 3}</code> and <code>{3, 4, 5}</code> together become <code>{1, 2, 3, 4, 5}</code> because all elements are included but duplicates are removed.</li> <li>Intersection: Only the number <code>3</code> appears in both sets, so the result is <code>{3}</code>.</li> <li>Difference: In the difference operation, the result is <code>{1, 2}</code> because these are the elements in <code>set1</code> that are not in <code>set2</code>.</li> </ul>"},{"location":"learning_paths/all_steps/#exercises_4","title":"Exercises","text":"<ol> <li> <p>Create a list of your favorite fruits and perform the following operations:</p> <ul> <li>Add a new fruit to the end.</li> <li>Insert a fruit at the second position.</li> <li>Remove one fruit by its value.</li> </ul> Solution<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")  # Add orange to the end\nfruits.insert(1, \"grape\")  # Insert grape at the second position\nfruits.remove(\"banana\")  # Remove banana by value\n\nprint(fruits)\n</code></pre> </li> <li> <p>Create a dictionary that contains the names of 3 countries and their capitals. Then:</p> <ul> <li>Update the capital of one country.</li> <li>Add a new country-capital pair.</li> <li>Remove one country from the dictionary.</li> </ul> Solution<pre><code>capitals = {\"France\": \"Paris\", \"Japan\": \"Tokyo\", \"USA\": \"Washington D.C.\"}\ncapitals[\"USA\"] = \"Cincinnati\"  # Update capital of USA\ncapitals[\"Germany\"] = \"Berlin\"  # Add new country-capital pair\ncapitals.pop(\"USA\")  # Remove USA from the dictionary\n\nprint(capitals)\n</code></pre> </li> <li> <p>Create a tuple of 3-4 numbers. Given a tuple of numbers, unpack it into individual variables and print them.</p> Solution<pre><code>numbers = (100, 200, 300)\nx, y, z = numbers  # Unpack the tuple into x, y, z\n\nprint(x, y, z)\n</code></pre> </li> <li> <p>Create two sets of integers and:</p> <ul> <li>Perform union, intersection, and difference operations.</li> </ul> Solution<pre><code>set1 = {10, 20, 30, 40}\nset2 = {30, 40, 50, 60}\n\nunion_set = set1.union(set2)  # Union\nintersection_set = set1.intersection(set2)  # Intersection\ndifference_set = set1.difference(set2)  # Difference\n\nprint(\"Union:\", union_set)\nprint(\"Intersection:\", intersection_set)\nprint(\"Difference:\", difference_set)\n</code></pre> </li> </ol>"},{"location":"learning_paths/all_steps/#step-16","title":"Step 16","text":""},{"location":"learning_paths/all_steps/#introduction-to-data-visualization","title":"Introduction to Data Visualization","text":"<p>In this step, we'll start exploring data visualization using Python, specifically with the <code>matplotlib</code> library and <code>numpy</code> for data creation. Data visualization is an essential tool in data analysis\u2014it allows you to better understand your data by uncovering patterns, trends, and outliers. In scientific research, visualizing data is especially valuable, helping to interpret experiment results, compare groups, and communicate findings effectively.</p> <p>We'll cover a few essential plot types: line plots, bar plots, histograms, and scatter plots. These visualizations are foundational, and you\u2019ll likely use them to analyze data in future projects.</p>"},{"location":"learning_paths/all_steps/#getting-started-setting-up-matplotlib-and-numpy","title":"Getting Started: Setting Up Matplotlib and Numpy","text":"<p>To start, make sure you have <code>matplotlib</code> installed. If you haven\u2019t installed it yet, you can install it by running: <pre><code>!pip install matplotlib\n</code></pre></p> <p>The <code>!</code></p> <p>The <code>!</code> at the beginning of the command is used in Jupyter notebooks to things like installation commands - this will install matplotlib if it's not already installed.</p> <p>Import <code>matplotlib</code> and <code>numpy</code> with the following aliases: <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n</code></pre></p>"},{"location":"learning_paths/all_steps/#1-line-plot","title":"1. Line Plot","text":""},{"location":"learning_paths/all_steps/#use-case","title":"Use Case","text":"<p>Line plots are great for visualizing changes over time or across experimental trials. Let\u2019s start by creating a basic line plot with synthetic data.</p>"},{"location":"learning_paths/all_steps/#creating-a-basic-line-plot","title":"Creating a Basic Line Plot","text":"<p>We\u2019ll create an array of data points and visualize them:</p> <pre><code># Generate data\nx = np.arange(0, 10, 1)  # x-axis: from 0 to 9\ny = np.random.randint(1, 10, size=10)  # y-axis: random integers\n\n# Create line plot\nplt.plot(x, y, label=\"Random Data\", color=\"blue\", linestyle=\"--\", marker=\"o\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.title(\"Basic Line Plot\")\nplt.legend()\nplt.show()\n</code></pre> <p>Plots a as a Debugging Tool</p> <p>Just like when you use a print statement, when you run <code>plt.show()</code>, you should see the plot appear in your notebook - this is great for instantaneous feedback.</p> <p>Think about how you can use this to debug your data - if you're not getting the results you expect, you can visualize your data to visually inspect it, and see if something's wrong. As scientists, we build up intuitions for the \"shape\" of our data, and visualizing it can help us understand what's going on.</p>"},{"location":"learning_paths/all_steps/#breaking-it-down","title":"Breaking it down:","text":"<ul> <li><code>plt.plot(x, y)</code>: This function creates a line plot with <code>x</code> on the x-axis and <code>y</code> on the y-axis.</li> <li><code>plt.xlabel()</code>: Sets the label for the x-axis.</li> <li><code>plt.ylabel()</code>: Sets the label for the y-axis.</li> <li><code>plt.title()</code>: Sets the title of the plot.</li> <li><code>plt.legend()</code>: Displays the legend on the plot.</li> <li><code>plt.show()</code>: Displays the plot.</li> </ul> <p>You can check out the <code>plot</code> documentation for matplotlib here.</p>"},{"location":"learning_paths/all_steps/#customizing-the-line-plot","title":"Customizing the Line Plot","text":"<p>Try adjusting colors, line styles, and adding markers to make the plot more informative.</p> <p>Here is a web link to the named colors of matplotlib, it can be a lot of fun and very useful to experiment with different colors.</p> <p>Colors from Hex Codes</p> <p>You can also use hex codes to specify colors in matplotlib. For example, <code>color=\"#FF5733\"</code> would give you a specific shade of orange.</p> <p>Something that I personally love to do to find unique combinations of hex code colors is to use PokePalettes, a website that generates color palettes based on Pokemon. Check it out here!</p> <p>To replace a color in a plot with a hex code, you can use the following syntax: <pre><code>plt.plot(x, y, color=\"#FF5733\")\n</code></pre></p>"},{"location":"learning_paths/all_steps/#2-bar-plot","title":"2. Bar Plot","text":""},{"location":"learning_paths/all_steps/#use-case_1","title":"Use Case","text":"<p>Bar plots are useful for comparing categorical data, like response counts across different participant groups.</p>"},{"location":"learning_paths/all_steps/#creating-a-basic-bar-plot","title":"Creating a Basic Bar Plot","text":"<p>Here, we\u2019ll create a bar plot with categorical labels on the x-axis:</p> <pre><code># Data\ncategories = [\"Group A\", \"Group B\", \"Group C\"]\nvalues = [15, 35, 25]\n\n# Create bar plot\nplt.bar(categories, values, color=\"green\")\nplt.xlabel(\"Groups\")\nplt.ylabel(\"Values\")\nplt.title(\"Bar Plot of Categorical Data\")\nplt.show()\n</code></pre> <p>You can see the <code>bar</code> documentation for matplotlib here.</p>"},{"location":"learning_paths/all_steps/#customizing-the-bar-plot","title":"Customizing the Bar Plot","text":"<p>Experiment with changing colors, adjusting bar width, and adding values on top of each bar to emphasize comparisons.</p> <p>Fun Example</p> <p>You can change the way the bars are displayed, their orientation, and other properties. For example, you can create a horizontal bar plot by using <code>plt.barh()</code> instead of <code>plt.bar()</code>.</p> <pre><code>plt.barh(categories, values, color=\"green\")\n</code></pre>"},{"location":"learning_paths/all_steps/#3-histogram","title":"3. Histogram","text":""},{"location":"learning_paths/all_steps/#use-case_2","title":"Use Case","text":"<p>Histograms are ideal for visualizing the distribution of a dataset, such as reaction times or score distributions.</p>"},{"location":"learning_paths/all_steps/#creating-a-basic-histogram","title":"Creating a Basic Histogram","text":"<p>Using Numpy, we\u2019ll generate a normal distribution and plot it as a histogram.</p> <pre><code># Generate data with a normal distribution\ndata = np.random.normal(loc=0, scale=1, size=1000)\n\n# Create histogram\nplt.hist(data, bins=30, color=\"purple\", edgecolor=\"black\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Histogram of Normally Distributed Data\")\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#importance-of-bin-size","title":"Importance of Bin Size","text":"<p>Histograms are great data visualization tools, but it's important to understand how the bin size can be adjusted to change the level of detail in the plot, sometimes altering the interpretation of the data.</p> <p>You can adjust the number of bins by changing the <code>bins</code> parameter in the <code>hist()</code> function. Functionally, the number of bins determines the number of intervals (or groups) the data is divided into, the more bins, the more detailed the histogram.</p>"},{"location":"learning_paths/all_steps/#customizing-the-histogram","title":"Customizing the Histogram","text":"<p>Experiment with changing colors, adjusting the number of bins, and adding labels to make the histogram more informative.</p>"},{"location":"learning_paths/all_steps/#4-scatter-plot","title":"4. Scatter Plot","text":""},{"location":"learning_paths/all_steps/#use-case_3","title":"Use Case","text":"<p>Scatter plots are useful for showing relationships between two continuous variables, like age and reaction time.</p>"},{"location":"learning_paths/all_steps/#creating-a-basic-scatter-plot","title":"Creating a Basic Scatter Plot","text":"<p>Here, we\u2019ll create two correlated datasets and plot them against each other.</p> <pre><code># Generate data\nx = np.random.rand(100)\ny = x * 2 + np.random.normal(0, 0.1, 100)\n\n# Create scatter plot\nplt.scatter(x, y, color=\"red\", s=20, label=\"Data Points\")\nplt.xlabel(\"X Variable\")\nplt.ylabel(\"Y Variable\")\nplt.title(\"Scatter Plot Example\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#customizing-the-scatter-plot","title":"Customizing the Scatter Plot","text":"<p>Change point size, colors, and add legends to enhance interpretability.</p> <p>Fun Example</p> <p>You can change the shape of the markers in a scatter plot. For example, you can use triangles instead of circles by specifying <code>marker=\"^\"</code>.</p> <pre><code>plt.scatter(x, y, color=\"red\", s=20, label=\"Data Points\", marker=\"^\")\n</code></pre> <p>This is particularly useful when you have multiple datasets on the same plot and want to differentiate them.</p>"},{"location":"learning_paths/all_steps/#5-combining-multiple-plots-in-a-single-figure","title":"5. Combining Multiple Plots in a Single Figure","text":""},{"location":"learning_paths/all_steps/#use-case_4","title":"Use Case","text":"<p>Sometimes, it\u2019s useful to compare multiple visualizations side-by-side. Using subplots, you can arrange multiple plots in one figure.</p>"},{"location":"learning_paths/all_steps/#creating-subplots","title":"Creating Subplots","text":"<p>Below is an example of creating a line plot and a histogram in a 1x2 grid layout.</p> <pre><code># Create subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 4))\n\n# Scatter Plot\naxes[0].scatter(x, y, color=\"blue\", label=\"Scatter Plot\")\naxes[0].set_title(\"Scatter Plot\")\naxes[0].set_xlabel(\"X-axis\")\naxes[0].set_ylabel(\"Y-axis\")\naxes[0].legend()\n\n# Histogram\naxes[1].hist(data, bins=20, color=\"orange\", edgecolor=\"black\")\naxes[1].set_title(\"Histogram\")\naxes[1].set_xlabel(\"Value\")\naxes[1].set_ylabel(\"Frequency\")\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n</code></pre> <p>Notice how <code>axes[0]</code> and <code>axes[1]</code> are used to access the individual subplots. This allows you to customize each subplot independently.</p>"},{"location":"learning_paths/all_steps/#a-quick-note-on-the-importance-of-clear-labels","title":"A quick note on the importance of clear labels","text":"<p>When creating visualizations, it's crucial to provide clear labels for the axes, titles, and legends. These labels help viewers understand the data being presented and the context of the visualization. Always ensure that your visualizations are labeled appropriately to convey the intended message effectively.</p> <p>Your goal should be for the plot to make sense independent of the context; such that if you were to show a data visualization depicting the relationship between age and reaction time, someone who had never seen the data before could understand what the plot is showing by reading the labels, axes, and title.</p>"},{"location":"learning_paths/all_steps/#coding-exercise-custom-visualizations","title":"Coding Exercise: Custom Visualizations","text":"<p>In this exercise, you\u2019ll work with a dataset generated using <code>numpy</code>. Your goal is to explore different ways to visualize this data and think about what insights each visualization type can reveal. You\u2019ll create at least two different visualizations of the dataset, using different plot types.</p>"},{"location":"learning_paths/all_steps/#a-generate-the-data","title":"A. Generate the Data","text":"<p>Run the code below to generate a synthetic (fake) dataset. This dataset simulates reaction times and accuracy scores from a fictional psychology experiment with 200 participants.</p> <pre><code>import numpy as np\n\n# Setting random seed for reproducibility\nnp.random.seed(42)\n\n# Generate participant IDs (1 through 200)\nparticipant_ids = np.arange(1, 201)\n\n# Generate random reaction times (in milliseconds) with a mean of 500 ms and std deviation of 50 ms\nreaction_times = np.random.normal(loc=500, scale=50, size=200)\n\n# Generate random accuracy scores (out of 100) with a mean of 75 and std deviation of 10\naccuracy_scores = np.random.normal(loc=75, scale=10, size=200)\n\n# Print first few values for each array\nprint(\"Participant IDs:\", participant_ids[:5])\nprint(\"Reaction Times:\", reaction_times[:5])\nprint(\"Accuracy Scores:\", accuracy_scores[:5])\n</code></pre>"},{"location":"learning_paths/all_steps/#b-review-your-data-visualization-options","title":"B. Review your data visualization options","text":"<ol> <li>Line Plot: Consider visualizing reaction times across participants to see how response times vary.</li> <li>Histogram: A histogram of reaction times or accuracy scores can help show the distribution of these values.</li> <li>Scatter Plot: A scatter plot of accuracy vs. reaction time can show any correlation between speed and accuracy.</li> <li>Bar Plot: You could create a bar plot of average reaction times or accuracy for groups of participants (e.g., participants 1\u201350, 51\u2013100).</li> </ol>"},{"location":"learning_paths/all_steps/#c-create-your-visualizations","title":"C. Create Your Visualizations","text":"<p>Using <code>matplotlib</code>, create at least two different visualizations of the data. Use the examples above or come up with your own! Think about: - What insights does each plot type reveal? - How can you customize your plots to make them more informative?</p> Example Starter Code<p>Below is an example of how you might start with a histogram. Remember to create your own additional plot(s) and customize as needed!</p> <pre><code>import matplotlib.pyplot as plt\n\n# Example Histogram for Reaction Times\nplt.hist(reaction_times, bins=20, color=\"skyblue\", edgecolor=\"black\")\nplt.xlabel(\"Reaction Time (ms)\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of Reaction Times\")\nplt.show()\n\n# Continue with your own visualizations!\n</code></pre>"},{"location":"learning_paths/all_steps/#d-reflect","title":"D. Reflect","text":"<p>After creating your visualizations, reflect on the following: - What insights did each visualization reveal about the data? - Which visualization do you think was most effective, and\u200b\u2b24</p>"},{"location":"learning_paths/all_steps/#review_9","title":"Review","text":"<p>In this step, you learned: - How to create and customize line plots, bar plots, histograms, and scatter plots. - Basic customization techniques to make plots more readable and informative. - How to use subplots to compare multiple visualizations side-by-side.</p> <p>Data visualization is a powerful skill that will help you analyze and interpret data effectively in your research and academic work.</p>"},{"location":"learning_paths/all_steps/#step-17","title":"Step 17","text":""},{"location":"learning_paths/all_steps/#interactive-data-visualization-with-ipywidgets","title":"Interactive Data Visualization with ipywidgets","text":"<p>In this step, we\u2019ll enhance our data visualizations by adding interactivity using the <code>ipywidgets</code> library. <code>ipywidgets</code> allows us to add interactive controls, such as sliders and dropdowns, that let you modify visualization parameters in real-time.</p>"},{"location":"learning_paths/all_steps/#why-use-ipywidgets","title":"Why Use ipywidgets?","text":"<p>Interactive visualizations are especially useful for exploring data dynamically. Rather than generating a new plot for every change, you can use widgets to modify aspects of the plot\u2014like adjusting data ranges, selecting data subsets, or changing visual elements\u2014right from the notebook.</p> <p>Note - only for Notebooks!</p> <p><code>ipywidgets</code> is designed for use in Jupyter notebooks like Google Colab and VSCode. If you want to develop interactive visualizations for web applications, you might consider using libraries <code>Plotly</code>.</p>"},{"location":"learning_paths/all_steps/#getting-started-with-ipywidgets","title":"Getting Started with ipywidgets","text":"<p>To start, make sure <code>ipywidgets</code> is installed. You can install it by running: <pre><code>!pip install ipywidgets\n</code></pre></p> <p>Then, import the widgets and display functionality: <pre><code>import ipywidgets as widgets\nfrom ipywidgets import interact\nimport matplotlib.pyplot as plt\nimport numpy as np\n</code></pre></p>"},{"location":"learning_paths/all_steps/#1-basic-interactive-plot-with-a-slider","title":"1. Basic Interactive Plot with a Slider","text":"<p>To introduce <code>ipywidgets</code>, let\u2019s create an interactive line plot using a slider. This slider will control the number of data points displayed in the plot.</p>"},{"location":"learning_paths/all_steps/#creating-interactive-line-plot","title":"Creating Interactive Line Plot","text":"<p>We\u2019ll generate data with <code>numpy</code> and then use the <code>interact</code> function to link a slider to the number of data points.</p> <pre><code># Generate data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Define plot function\ndef plot_sine(num_points):\n    plt.plot(x[:num_points], y[:num_points], color=\"blue\")\n    plt.xlabel(\"X-axis\")\n    plt.ylabel(\"Sine of X\")\n    plt.title(f\"Sine Wave with {num_points} Points\")\n    plt.show()\n\n# Create slider with interact\ninteract(plot_sine, \n         num_points=widgets.IntSlider(min=10, \n                                      max=100, \n                                      step=10, \n                                      value=50))\n</code></pre>"},{"location":"learning_paths/all_steps/#explanation_1","title":"Explanation","text":"<p>The <code>plot_sine</code> function generates the plot, and the <code>interact</code> function links the <code>num_points</code> argument to the slider widget. Now, try moving the slider to see how it affects the plot!</p>"},{"location":"learning_paths/all_steps/#2-creating-interactive-scatter-plots-with-dropdowns","title":"2. Creating Interactive Scatter Plots with Dropdowns","text":"<p>Next, we\u2019ll add more complexity by allowing users to choose between different datasets. For example, this could be useful for comparing the relationship between different experimental variables.</p>"},{"location":"learning_paths/all_steps/#generate-sample-data","title":"Generate Sample Data","text":"<p>We\u2019ll create two sets of data for our scatter plot: a linear relationship and a quadratic relationship.</p> <pre><code># Sample data for two relationships\nx_data = np.linspace(0, 10, 100)\nlinear_y = 2 * x_data + np.random.normal(0, 1, 100)  # Linear relationship\nquadratic_y = x_data**2 + np.random.normal(0, 5, 100)  # Quadratic relationship\n\n# Define plot function\ndef plot_scatter(relation_type):\n    plt.scatter(x_data, linear_y if relation_type == \"Linear\" else quadratic_y, color=\"red\", s=20)\n    plt.xlabel(\"X Variable\")\n    plt.ylabel(\"Y Variable\")\n    plt.title(f\"{relation_type} Relationship\")\n    plt.show()\n\n# Create dropdown with interact\ninteract(plot_scatter, relation_type=widgets.Dropdown(options=[\"Linear\", \"Quadratic\"], value=\"Linear\", description=\"Relationship Type\"))\n</code></pre>"},{"location":"learning_paths/all_steps/#explanation_2","title":"Explanation","text":"<p>The <code>plot_scatter</code> function adjusts the <code>y</code> values depending on the chosen relationship type. The dropdown menu lets users choose between the linear and quadratic datasets, updating the plot accordingly.</p>"},{"location":"learning_paths/all_steps/#3-combining-multiple-widgets-slider-and-dropdown","title":"3. Combining Multiple Widgets: Slider and Dropdown","text":"<p>Now, let\u2019s create an interactive histogram where users can: - Adjust the number of bins with a slider. - Select the dataset to visualize with a dropdown.</p>"},{"location":"learning_paths/all_steps/#creating-data-and-function","title":"Creating Data and Function","text":"<p>We\u2019ll generate two datasets: one with a normal distribution and one with a uniform distribution.</p> <pre><code># Sample datasets\nnormal_data = np.random.normal(0, 1, 1000)\nuniform_data = np.random.uniform(-3, 3, 1000)\n\n# Define histogram plot function\ndef plot_histogram(dist_type, bins):\n    data = normal_data if dist_type == \"Normal\" else uniform_data\n    plt.hist(data, bins=bins, color=\"green\", edgecolor=\"black\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.title(f\"{dist_type} Distribution with {bins} Bins\")\n    plt.show()\n\n# Create interactive widgets\ninteract(plot_histogram, \n         dist_type=widgets.Dropdown(options=[\"Normal\", \"Uniform\"], value=\"Normal\", description=\"Distribution\"),\n         bins=widgets.IntSlider(min=5, max=50, step=5, value=20))\n</code></pre>"},{"location":"learning_paths/all_steps/#explanation_3","title":"Explanation","text":"<p>This function combines a dropdown (for dataset selection) and a slider (for number of bins) to create a more interactive histogram, allowing users to explore both distribution shapes and bin adjustments.</p>"},{"location":"learning_paths/all_steps/#reflect-and-practice","title":"Reflect and Practice","text":"<p>After experimenting with the examples above, create your own interactive visualization:</p> <ol> <li>Choose a dataset: Use <code>numpy</code> to generate a dataset (or modify one of the provided datasets, you can even use the data from <code>Step 16</code>).</li> <li>Select a widget: Decide which widget(s) would be useful to control the data or visualization.</li> <li>Customize: Modify the appearance or functionality to make the visualization more insightful.</li> </ol>"},{"location":"learning_paths/all_steps/#review_10","title":"Review","text":"<p>In this step, you learned: - How to create interactive plots using <code>ipywidgets</code>. - Basic widgets, like sliders and dropdowns, to control plot parameters. - How to combine multiple widgets to create rich, interactive visualizations.</p> <p>Adding interactivity to data visualization lets you explore data more deeply, helping you to uncover trends and patterns more easily. You can apply these techniques to create interactive visualizations for research and data exploration, making it easier to gain insights from your data.</p>"},{"location":"learning_paths/all_steps/#step-18-conducting-experiments-online-and-basic-web-development","title":"Step 18: Conducting Experiments Online and Basic Web Development","text":"<p>Up until this point, our course has focused on learning Python. While Python absolutely could be used to build an online research study, as we will see in this Step of the learning path, there are tools better suited to conducting online research.</p> <p>In this step, we will explore how behavioral science experiments can be conducted on the web. We\u2019ll look at a few web technologies that make this possible, such as <code>jsPsych</code>, HTML, CSS, and JavaScript, and provide you with code examples you can try out. We will also introduce tools that allow for online research without requiring any coding (Google Forms).</p> <p>Note: This step is meant to conceptually introduce you to a different programming language, specifically JavaScript and web development lanugages (HTML and CSS). We will take a slightly deeper dive into JavaScript in Step 20 when we look at <code>jsPsych</code>!</p>"},{"location":"learning_paths/all_steps/#1-experiments-on-the-web","title":"1. Experiments on the Web","text":"<p>Conducting experiments online allows researchers to reach a broader audience and collect data efficiently. While programming tools like <code>PsychoPy</code> (Python) can be used to design experiments, another accessible tool, <code>jsPsych</code>, simplifies the process of running experiments directly in a web browser.</p>"},{"location":"learning_paths/all_steps/#what-is-jspsych","title":"What is <code>jsPsych</code>?","text":"<p><code>jsPsych</code> is a JavaScript library specifically designed for creating experiments that participants can complete online. It\u2019s flexible, widely used in psychology research, and makes it easier to control and collect data from web-based studies.</p>"},{"location":"learning_paths/all_steps/#what-is-javascript","title":"What is JavaScript?","text":"<p>JavaScript is a programming language used to create interactive elements on web pages. It\u2019s essential for building dynamic websites and web applications. JavaScript can handle user interactions, animations, and data processing in real-time. </p> <p>Have you ever noticed a button change color on a website, or text appear when you hover over an image? These are examples of JavaScript in action!</p> <p>JavaScript is incredibly versitile for all things on the web, and can be used to create interactive elements, animations, and more. One of my favorite uses of JavaScript is called \"ThreeJS\" which is a library that allows you to create 3D graphics in the browser! You can check out some examples here.</p>"},{"location":"learning_paths/all_steps/#2-basics-of-web-development-html-css-and-javascript","title":"2. Basics of Web Development: HTML, CSS, and JavaScript","text":"<p>To understand how <code>jsPsych</code> functions, we\u2019ll cover some core components of web development. Below, we\u2019ll explore HTML, CSS, and JavaScript and provide examples you can try in VSCode.</p> Web Development?<p>Web development can be defined as the process of building websites and web applications. It involves writing code in languages like HTML, CSS, and JavaScript to create interactive and visually appealing web pages. These technologies work together to structure content, style elements, and add interactivity to web pages.</p>"},{"location":"learning_paths/all_steps/#21-install-live-server-in-vscode","title":"2.1. Install Live Server in VSCode","text":"<p>In the Extensions sidebar, search for Live Server and install it. We'll use this extension to run our HTML files in a live server.</p>"},{"location":"learning_paths/all_steps/#22-html-hypertext-markup-language","title":"2.2. HTML (HyperText Markup Language)","text":"<p>HTML is the standard language for creating web pages. It allows you to structure content using \"tags.\" A \"tag\" is a keyword surrounded by angle brackets, like <code>&lt;tag&gt;</code>. Tags are used to define elements such as headings, paragraphs, images, and links. A sample of a common tag is <code>&lt;h1&gt;</code>, which defines a top-level heading. To close a tag, use a forward slash, like <code>&lt;/h1&gt;</code>.</p> <p>Here\u2019s a basic HTML structure:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Experiment&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Experiment!&lt;/h1&gt;\n    &lt;p&gt;This is an experiment example using HTML, CSS, and JavaScript.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Notice the tags like <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;h1&gt;</code>, and <code>&lt;p&gt;</code>. These tags structure the content and define the appearance of the webpage. <code>&lt;h1&gt;</code> is a top-level heading, and <code>&lt;p&gt;</code> is a paragraph.</p> <p>This code creates a basic webpage with a title and heading. Copy and paste this code into a new file with an <code>.html</code> extension, calling the file <code>index.html</code>.</p> <p>You can open this file in VSCode and use the Live Server extension to view it in your browser. To do so, right-click on the HTML file and select Open with Live Server.</p> <p>This will open up a new tab in your browser displaying the HTML content!</p>"},{"location":"learning_paths/all_steps/#23-css-cascading-style-sheets","title":"2.3. CSS (Cascading Style Sheets)","text":"<p>CSS styles your HTML content, making it look visually appealing. You can add color, align elements, and much more.</p> <p>Add the following CSS to your HTML file within a <code>&lt;style&gt;</code> tag in the <code>&lt;head&gt;</code> section:</p> <pre><code>&lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f8ff;\ntext-align: center;\n}\nh1 {\ncolor: #4682b4;\n}\np {\ncolor: #2f4f4f;\n}\n&lt;/style&gt;\n</code></pre> The full HTML file should now look like this:<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Experiment&lt;/title&gt;\n\n    &lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f8ff;\ntext-align: center;\n}\nh1 {\ncolor: #4682b4;\n}\np {\ncolor: #2f4f4f;\n}\n&lt;/style&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Experiment!&lt;/h1&gt;\n    &lt;p&gt;This is an experiment example using HTML, CSS, and JavaScript.&lt;/p&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>This CSS changes the background color, centers the text, and applies colors to the heading and paragraph.</p>"},{"location":"learning_paths/all_steps/#24-javascript","title":"2.4. JavaScript","text":"<p>JavaScript adds interactivity to your webpage, such as reacting to user inputs or displaying alerts.</p> <p>Include this script inside your HTML file\u2019s <code>&lt;body&gt;</code> or <code>&lt;head&gt;</code> tags:</p> <pre><code>&lt;script&gt;\nfunction showAlert() {\nalert(\"Welcome to the experiment!\");\n}\n&lt;/script&gt;\n\n&lt;button onclick=\"showAlert()\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>This code adds a button that, when clicked, shows an alert message.</p> Your full HTML file should now look like this:<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Experiment&lt;/title&gt;\n\n    &lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f8ff;\ntext-align: center;\n}\nh1 {\ncolor: #4682b4;\n}\np {\ncolor: #2f4f4f;\n}\n&lt;/style&gt;\n\n    &lt;script&gt;\nfunction showAlert() {\nalert(\"Welcome to the experiment!\");\n}\n&lt;/script&gt;\n\n    &lt;button onclick=\"showAlert()\"&gt;Click Me&lt;/button&gt;\n\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to My Experiment!&lt;/h1&gt;\n    &lt;p&gt;This is an experiment example using HTML, CSS, and JavaScript.&lt;/p&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"learning_paths/all_steps/#3-play-with-web-development-tools","title":"3. Play with Web Development Tools","text":"<p>Now that you've seen the basics of HTML, CSS, and JavaScript, let\u2019s practice combining them to create a simple interactive page.</p> <p>Try out the coding exercise below to experiment with web development tools.</p>"},{"location":"learning_paths/all_steps/#31-create-an-html-file-in-vscode-and-add-the-following-code","title":"3.1 Create an HTML file in VSCode and add the following code:","text":"<ul> <li>This code has HTML, CSS, and JavaScript sections, all within the same file.</li> <li>Run the code using Live Server to see the results immediately in your browser.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Interactive Web Page&lt;/title&gt;\n    &lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f3f3f3;\ntext-align: center;\n}\nh1 {\ncolor: #4CAF50;\n}\nbutton {\nbackground-color: #4CAF50;\ncolor: white;\npadding: 10px 20px;\nborder: none;\ncursor: pointer;\n}\nbutton:hover {\nbackground-color: #45a049;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Play with Web Development!&lt;/h1&gt;\n    &lt;p&gt;Click the button to see a message.&lt;/p&gt;\n    &lt;button onclick=\"displayMessage()\"&gt;Click Me!&lt;/button&gt;\n    &lt;p id=\"message\"&gt;&lt;/p&gt;\n\n    &lt;script&gt;\nfunction displayMessage() {\ndocument.getElementById(\"message\").innerHTML = \"Hello, you're interacting with JavaScript!\";\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"learning_paths/all_steps/#32-experiment-by-changing-the-following-elements","title":"3.2 Experiment by changing the following elements:","text":"<ul> <li>CSS Colors: Adjust colors in the CSS styles for <code>h1</code>, <code>body</code>, or <code>button</code>.</li> <li>Message Text: Modify the message text in the JavaScript function <code>displayMessage()</code>.</li> </ul> <p>This gives you a chance to experiment with the main elements of web development in one file. By changing CSS properties, HTML structure, and JavaScript functions, you\u2019ll start to see how these tools work together.</p> <p><code>jsPsych</code> in Step 20</p> <p>When we get to Step 20, we'll take a look of <code>jsPsych</code> - but this is a good enough intro for now!</p>"},{"location":"learning_paths/all_steps/#4-using-non-programming-tools-for-online-research","title":"4. Using Non-Programming Tools for Online Research","text":"<p>For researchers who prefer not to code, tools like Google Forms are useful for creating and distributing online surveys. These tools are widely used in psychological and behavioral research to gather self-report data or feedback from participants.</p>"},{"location":"learning_paths/all_steps/#designing-effective-user-surveys","title":"Designing Effective User Surveys","text":"<p>A user survey is a structured way of gathering data about participants' thoughts, behaviors, or experiences. Well-designed surveys can reveal valuable insights into how people feel or think about a topic.</p> <p>To learn more about designing surveys, visit How to Design a UX Research Survey, which covers practical tips and best practices for creating effective surveys.</p>"},{"location":"learning_paths/all_steps/#summary","title":"Summary","text":"<ul> <li>HTML, CSS, and JavaScript allow us to create and style web-based experiments.</li> <li>Playing with web development tools helps you learn through hands-on practice, experimenting with colors, structure, and interactivity.</li> <li>Google Forms and other no-code tools provide options for collecting data without needing to write code.</li> <li>Survey design is crucial in psychology and UX research to capture reliable and meaningful data from participants.</li> </ul> <p>This step gives you the tools to start exploring web-based research and consider how online experiments can expand your reach and capabilities in behavioral science research.</p>"},{"location":"learning_paths/all_steps/#step-19","title":"Step 19","text":"<p>In this step, we\u2019ll explore Pandas, a powerful Python library for data manipulation and analysis. Pandas provides tools to explore, manipulate, and analyze datasets efficiently, which is essential for behavioral scientists working with real-world data.</p> <p>We\u2019ll use a CSV file named <code>happiness correlation data-2.csv</code>, which you can download below. Each row represents data from one participant, with columns capturing various aspects like age, work hours, GPA, life satisfaction, and more.</p>"},{"location":"learning_paths/all_steps/#0-download-the-dataset","title":"0. Download the Dataset","text":"<p>Click this link to donload the data</p> <p>Familiar?</p> <p>This data was pulled from Stats 2002, a course at UC. If this data is familiar, it's probably because you've seen this before!</p> <p>IMPORTANT: Make sure to place the downloaded CSV file in the same directory as your notebook or script!</p>"},{"location":"learning_paths/all_steps/#1-getting-started-with-pandas","title":"1. Getting Started with Pandas","text":""},{"location":"learning_paths/all_steps/#installing-and-importing-pandas","title":"Installing and Importing Pandas","text":"<p>To use Pandas, ensure it\u2019s installed in your Python environment. You can install it by running:</p> <pre><code>!pip install pandas\n</code></pre> <p><code>%pip install</code></p> <p>If the code above doesn't work, try using <code>%pip install</code> instead of <code>!pip install</code>.</p> <p>Then, import Pandas at the beginning of your notebook or script:</p> <pre><code>import pandas as pd\n</code></pre>"},{"location":"learning_paths/all_steps/#loading-the-data","title":"Loading the Data","text":"<p>Load the CSV file into a DataFrame, which is Pandas\u2019 primary data structure for handling data tables.</p> <pre><code># Load the data from the your directory\nfile_path = 'happiness correlation data-2.csv'\ndf = pd.read_csv(file_path)\n</code></pre>"},{"location":"learning_paths/all_steps/#viewing-the-data","title":"Viewing the Data","text":"<p>Use <code>head()</code> to see the first few rows and get a feel for the structure.</p> <pre><code>df.head()\n</code></pre>"},{"location":"learning_paths/all_steps/#2-exploring-the-dataset","title":"2. Exploring the Dataset","text":"<p>This dataset has columns capturing the following participant information:</p> <ul> <li>age: Participant's age</li> <li>hours_work_week: Hours worked per week</li> <li>gpa: Participant's GPA</li> <li>life_satisfaction: Self-reported life satisfaction score</li> <li>desire_to_achieve: Self-reported desire to achieve</li> <li>number_drinks: Number of alcoholic drinks consumed per week</li> <li>stress: Self-reported stress level</li> </ul>"},{"location":"learning_paths/all_steps/#basic-data-information","title":"Basic Data Information","text":"<p>To get a quick summary of the dataset, including column names, data types, and any missing values:</p> <pre><code>df.info()\n</code></pre> <p>To get basic descriptive statistics (mean, median, etc.) for each column:</p> <pre><code>df.describe()\n</code></pre>"},{"location":"learning_paths/all_steps/#3-analyzing-specific-columns","title":"3. Analyzing Specific Columns","text":""},{"location":"learning_paths/all_steps/#calculating-the-mean-age-of-participants","title":"Calculating the Mean Age of Participants","text":"<p>Let\u2019s calculate the average age of participants.</p> <pre><code>mean_age = df['age'].mean()\nprint(\"Average Age:\", mean_age)\n</code></pre>"},{"location":"learning_paths/all_steps/#distribution-of-life-satisfaction-scores","title":"Distribution of Life Satisfaction Scores","text":"<p>To understand the distribution of <code>life_satisfaction</code> scores, we can use Pandas to plot a histogram (requires <code>matplotlib</code> library).</p> <pre><code>import matplotlib.pyplot as plt\n\ndf['life_satisfaction'].plot(kind='hist', title='Life Satisfaction Distribution')\nplt.xlabel('Life Satisfaction')\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#exploring-correlations","title":"Exploring Correlations","text":"<p>We may want to see how different variables relate to each other. For example, are work hours correlated with stress?</p> <pre><code>correlation = df[['hours_work_week', 'stress']].corr()\nprint(\"Correlation between hours worked and stress:\\n\", correlation)\n</code></pre>"},{"location":"learning_paths/all_steps/#grouping-data","title":"Grouping Data","text":"<p>We can group data to find insights, such as average Stress level by different levels of <code>desire_to_achieve</code>.</p> <pre><code>avg_stress_by_achievement = df.groupby('desire_to_achieve')['stress'].mean()\nprint(\"Stress by Desire to Achieve:\\n\", avg_stress_by_achievement)\n</code></pre>"},{"location":"learning_paths/all_steps/#4-data-cleaning-and-manipulation","title":"4. Data Cleaning and Manipulation","text":""},{"location":"learning_paths/all_steps/#calculating-letter-grades","title":"Calculating Letter Grades","text":"<p>Add a new column to the dataset that calculates the letter grade for each student's GPA:</p> <pre><code>def calculate_letter_grade(gpa):\n    if gpa &gt;= 3.7:\n        return 'A'\n    elif gpa &gt;= 3.0:\n        return 'B'\n    elif gpa &gt;= 2.0:\n        return 'C'\n    elif gpa &gt;= 1.0:\n        return 'D'\n    else:\n        return 'F'\n\ndf['letter_grade'] = df['gpa'].apply(calculate_letter_grade)\n</code></pre>"},{"location":"learning_paths/all_steps/#create-a-bar-graph-of-letter-grades","title":"Create a Bar Graph of Letter Grades","text":"<p>To visualize the distribution of letter grades, we can create a bar graph:</p> <pre><code>grade_counts = df['letter_grade'].value_counts()\ngrade_counts.plot(kind='bar', title='Letter Grade Distribution')\nplt.xlabel('Letter Grade')\nplt.ylabel('Count')\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#5-saving-processed-data","title":"5. Saving Processed Data","text":"<p>After adding a new column, it\u2019s often useful to save the processed dataset. Here\u2019s how to save it to a new CSV file:</p> <pre><code>df.to_csv('letter_grades_added_happiness_data.csv', index=False)\n</code></pre>"},{"location":"learning_paths/all_steps/#summary_1","title":"Summary","text":"<p>In this step, you learned:</p> <ul> <li>Loading a CSV file into a Pandas DataFrame</li> <li>Exploring the data using basic summary and statistical methods</li> <li>Analyzing specific columns and relationships between them</li> <li>Cleaning data by handling missing values</li> <li>Saving processed data to a new CSV file</li> </ul> <p>Pandas is a powerful tool for data analysis in Python, allowing you to work with datasets efficiently and discover meaningful insights.</p>"},{"location":"learning_paths/all_steps/#step-20","title":"Step 20","text":"<p>In this step, we\u2019ll break down the components of the <code>reaction-time.html</code> file used to create a reaction time experiment that you will participate in for class! Then in step 21, we'll use Pandas to analyze the data we collect.</p> <p>The reaction time experiment is implemented in JavaScript using the jsPsych library, designed to help researchers conduct behavioral science experiments in a web browser.</p> <p>Click this link to download the <code>reaction-time.html</code> file</p> <p>In order to read this file, you'll want to move it to a folder in VSCode, and open it there.</p> <p>Throughout this step, I don't expect you to be learning JavaScript or jsPsych. Instead, I want you to see how the principles you've learned in Python programming apply to other languages and tools. By examining the experiment\u2019s structure and components, you\u2019ll see how programming concepts you\u2019ve learned in Python are used in a different context.</p> <p>We'll also need to cover some basic concepts of experimental design, we'll do that before we dive into the code.</p>"},{"location":"learning_paths/all_steps/#general-principles-of-experimental-design","title":"General Principles of Experimental Design","text":"<p>Let's take a moment to recall (or learn for the first time!) the concepts of the Independent Variable and Dependent Variables in an experiment.</p>"},{"location":"learning_paths/all_steps/#independent-variable-iv","title":"Independent Variable (IV)","text":"<p>The indepdent variable in the experiment is the thing that is being manIpulated - I personally remember this by thinking of the \"I\" in IV. In the reaction time experiement, the independent variable is the color of the circle that is displayed, which requires a specific key press response from the participant depending on the color of the circle.</p>"},{"location":"learning_paths/all_steps/#dependent-variable-dv","title":"Dependent Variable (DV)","text":"<p>The dependent variable in the experiment is the thing that is being measured - in other words, the thing that depends on the manipulated (independent variable). In the reaction time experiment, the dependent variable is the time it takes for the participant to press the correct key after the circle is displayed.</p>"},{"location":"learning_paths/all_steps/#control-variables","title":"Control Variables","text":"<p>Control variables are variables that are kept constant throughout the experiment. In the reaction time experiment, the control variables include the size of the circle, the position of the circle on the screen, and the key press that is required for each color.</p>"},{"location":"learning_paths/all_steps/#data-collection","title":"Data Collection","text":"<p>When programming an experiment, it's critical to think about how you're collecting your data. We'll look at how the data is collected in the reaction time experiment in the code breakdown.</p>"},{"location":"learning_paths/all_steps/#random-and-blocked-designs","title":"Random and Blocked Designs","text":"<p>In the reaction time experiment, there are two different trial types, trials where the circle is blue and trials where the circle is orange. These trials are presented in randomized order, which is a common design in psychology experiments to prevent participants from anticipating the next stimulus.</p> <p>If you wanted to understand how color similarity might make people respond more slowly, you could have an additional \"block\" of trials within the experiment where blue and - let's say, a blue-ish purple - are presented as competing colors. This would allow you to examine the difference in reaction time between the two color pairs of blue and purple, and blue and orange.</p>"},{"location":"learning_paths/all_steps/#jumping-into-the-javascript","title":"Jumping into the JavaScript","text":"<p>Important code blocks will be highlighted in the following sections, but feel free to explore the entire file! If you want to know how the entire code block works, you give the file to ChatGPT or Copilot and ask the chatbot to explain it to you!</p> <p>Many of the decisions for the experiment are made outside of the code. For example, in this experiment, the colors were chosen to be blue and orange. While we will load images into the experiment to show these colors to the participant when we want to display them, the actual color of the circle is not defined in the code. This is a design decision that was made before the experiment was programmed.</p> <p>Similarly, it's not written into the code that the color is the IV, and that reaction time is the DV. These are concepts that are understood by the researcher before the experiment is programmed.</p> <p>Now we'll dive into the pieces of the code that make the experiment run.</p>"},{"location":"learning_paths/all_steps/#test-procedure","title":"Test Procedure","text":"<p>Below is a block of code within the <code>JavaScript</code> called \"<code>test_procedure</code>\", let's break it down:</p> <pre><code>var test_procedure = {\ntimeline: [fixation, test],\ntimeline_variables: test_stimuli,\nrepetitions: 25,\nrandomize_order: true\n};\n</code></pre> <ul> <li><code>timeline</code><ul> <li>The <code>timeline</code> parameter is an array of objects that represent the sequence of events in the experiment. Here, the <code>test_procedure</code> consists of two components: <code>fixation</code> and <code>test</code>. The <code>fixation</code> object displays a fixation cross, while the <code>test</code> object presents the colored circle for the participant to respond to.</li> </ul> </li> <li><code>timeline_variables</code><ul> <li>The <code>timeline_variables</code> parameter specifies the stimuli to be used in the experiment. In this case, <code>test_stimuli</code> is an array of objects containing the color of the circle and the correct response key for each trial.</li> </ul> </li> <li><code>repetitions</code><ul> <li>The <code>repetitions</code> parameter determines how many times the <code>test_procedure</code> is repeated. With 25 repetitions, it tells the experiment to show the orange and blue circles 25 times each, meaning that there will be 50 trials in total.</li> </ul> </li> <li><code>randomize_order</code><ul> <li>The <code>randomize_order</code> parameter specifies whether the order of trials should be randomized. When set to <code>true</code>, the order of trials is randomized to prevent participants from anticipating the next stimulus.</li> </ul> </li> </ul>"},{"location":"learning_paths/all_steps/#loading-images","title":"Loading Images","text":"<p>This experiment uses two images, preloaded at the start to prevent delays during trials. Preloading is crucial when images need to display instantly. Other designs, like experiments requiring many images or complex visuals, may benefit from a more dynamic image-loading approach.</p> <pre><code>var preload = {\ntype: jsPsychPreload,\nimages: ['images/blue.png', 'images/orange.png']\n};\ntimeline.push(preload);\n</code></pre> <p>In simpler terms, this code gets the images ready to be shown at a moment's notice. The <code>jsPsychPreload</code> function is used to preload the images, ensuring they are ready for display when needed.</p>"},{"location":"learning_paths/all_steps/#data-storage-and-csv-export","title":"Data Storage and CSV Export","text":"<p>Data in this experiment is stored in memory by jsPsych, including response accuracy and reaction times. At the experiment\u2019s end, participants see a summary with accuracy and average reaction time. The <code>jsPsych.data.get().csv()</code> method then generates a CSV file of the collected data, downloadable via a button.</p> <pre><code>var jsPsych = initJsPsych({\non_finish: function() {\njsPsych.data.displayData();\ndocument.getElementById('download-csv').style.display = 'block';\ndocument.getElementById('download-csv').onclick = function() {\nvar csv = jsPsych.data.get().csv();\nvar blob = new Blob([csv], { type: 'text/csv' });\nvar url = window.URL.createObjectURL(blob);\nvar a = document.createElement('a');\na.href = url;\na.download = 'reaction_time_data.csv';\na.click();\nwindow.URL.revokeObjectURL(url);\n};\n}\n});\n</code></pre> <p>Let's break down the significant parts of the code block above:</p> <ul> <li><code>jsPsych.data.displayData()</code><ul> <li>This function displays the data collected during the experiment, showing participants their accuracy and average reaction time.</li> </ul> </li> <li><code>var csv = jsPsych.data.get().csv();</code><ul> <li>This line generates a CSV file containing the data collected during the experiment.</li> </ul> </li> <li><code>var blob = new Blob([csv], { type: 'text/csv' });</code><ul> <li>This code block creates a Blob object, which is a file-like object of raw data. In this case, it's a CSV file. A \"Blob\" is a way to store data that can be downloaded as a file.</li> </ul> </li> <li><code>a.download = 'reaction_time_data.csv';</code><ul> <li>This line sets the <code>download</code> attribute of the anchor element to the desired filename for the downloaded CSV file. This allows the participant to download the data as a CSV file named <code>reaction_time_data.csv</code>.</li> </ul> </li> </ul>"},{"location":"learning_paths/all_steps/#connecting-javascript-and-jspsych-to-python-principles","title":"Connecting JavaScript and jsPsych to Python Principles","text":"<p>This experiment may be in JavaScript, but it uses many programming concepts you've learned in Python, let's think through them:</p> <ul> <li>Functions and Initialization: The function <code>initJsPsych()</code> initializes the experiment, just as you've used Python functions to set up programs and prepare data structures.</li> <li>Control Structures (Loops and Conditions): The timeline configuration is structured similarly to Python dictionaries and lists. jsPsych uses objects to store multiple settings (analogous to Python\u2019s dictionaries). Loops and conditional logic, like <code>randomize_order: true</code>, create flexible procedures, just as you\u2019ve seen in Python loops and conditionals.</li> <li>Trial Data Collection: The way trial data is collected and stored in <code>jsPsych.data.get()</code> is similar to Python data management libraries (like <code>Pandas</code>), where you collect, process, and export data. Here, we export as CSV, a format you\u2019ve worked with for storing and analyzing data in Python.</li> <li>Parameter Setting and Modularity: Each <code>timeline</code> component is modular and configured with specific parameters, similar to defining functions with arguments in Python. This modularity in design is essential for scalability and reusability in behavioral science programming.</li> </ul> <p>In summary, although this experiment is in JavaScript, it reinforces core programming concepts: initializing structures, using loops and conditions to control flow, collecting data, and organizing code modularly. </p> <p>These are skills you\u2019ll carry into any programming language, allowing you to adapt tools like jsPsych confidently for experimental design.</p>"},{"location":"learning_paths/all_steps/#looking-for-more","title":"Looking for more?","text":"<p>Check out the jsPSych documentation website to learn more about how to use jsPsych for your own experiments: https://www.jspsych.org/. </p>"},{"location":"learning_paths/all_steps/#step-21","title":"Step 21","text":"<p>In this step, we will process and visualize the reaction time data we collected in <code>Step 20</code> using Pandas! We will get this data from a zip file containing many <code>.csv</code> files, where each file contains data from a participant in a reaction time experiment. </p> <p>You will learn to:</p> <ol> <li>Load a zip file of data into Python.</li> <li>Extract and load all <code>.csv</code> files into a single pandas DataFrame.</li> <li>Clean the data to isolate relevant variables. Visualize \"raw\" reaction time data.</li> <li>Aggregate data by participant and analyze mean reaction times.</li> <li>Visualize aggregated data.</li> </ol>"},{"location":"learning_paths/all_steps/#0-download-the-zip-file","title":"0: Download the Zip File","text":"<p>What's a Zip File? A zip file is a compressed folder that contains one or more files. It's a common way to package and share multiple files together.</p> <p>Click here to download the reaction time <code>.zip</code> file</p>"},{"location":"learning_paths/all_steps/#1-load-and-unzip-the-data","title":"1: Load and Unzip the Data","text":"<p>To begin, ensure you have downloaded the zip file. You can unzip it manually or programmatically within Python. Here\u2019s how to do it in Python:</p> <pre><code>import zipfile\nimport os\n\n# Define file paths\nzip_path = 'reaction_time_data.zip' # If you've put your file in the same directory as the notebook you're working in, your path is just the file name. If not, you'll need to include the path to the file.\nextract_path = '.' # This will extract the files to the current directory\n\n# Unzip the file\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    zip_ref.extractall(extract_path)\n</code></pre> <p>After running this code, you should see the extracted <code>.csv</code> files in the specified directory - this will be a lot of files!</p>"},{"location":"learning_paths/all_steps/#2-load-csv-files-into-a-pandas-dataframe","title":"2: Load CSV Files into a Pandas DataFrame","text":"<p>With the files extracted, we can load each <code>.csv</code> file into a DataFrame. Each row in the final DataFrame will represent a trial, with columns for relevant data.</p> <pre><code>import pandas as pd\nimport glob\nimport os\n\n# Path to the directory containing extracted .csv files\ncsv_files = glob.glob(os.path.join(extract_path, '*.csv'))\n\n# Initialize an empty list to store DataFrames\ndfs = []\n\n# Loop through and read each csv file\nfor idx, file in enumerate(csv_files):\n    data = pd.read_csv(file)\n\n    # Extract relevant rows and columns\n    # Filter rows where 'trial_type' is 'response' (indicating a reaction time trial)\n    data = data[data['trial_type'] == 'image-keyboard-response']\n\n    # Select and rename relevant columns\n    df = data[['rt', 'stimulus', 'response', 'correct']].copy()\n    df.rename(columns={\n        'rt': 'reaction_time',\n        'stimulus': 'circle_color',\n        'response': 'key_pressed',\n        'correct': 'accuracy'\n    }, inplace=True)\n\n    # Clean up 'circle_color' to extract only color names\n    df['circle_color'] = df['circle_color'].str.extract(r'images/(\\w+).png')[0]\n\n    # Add subject_id column\n    df['subject_id'] = idx + 1\n\n    # Reorder columns to make 'subject_id' the first column\n    df = df[['subject_id', 'reaction_time', 'circle_color', 'key_pressed', 'accuracy']]\n\n    # Append the processed DataFrame\n    dfs.append(df)\n\n# Concatenate all DataFrames\nall_data = pd.concat(dfs, ignore_index=True)\n</code></pre>"},{"location":"learning_paths/all_steps/#3-clean-and-visualize-reaction-time-data","title":"3: Clean and Visualize Reaction Time Data","text":"<p>Now that we have all trials loaded into a DataFrame, we can start visualizing the reaction time data.</p>"},{"location":"learning_paths/all_steps/#3a-histogram-of-reaction-time-data","title":"3a. Histogram of Reaction Time Data","text":"<p>Use a histogram to explore the distribution of reaction times. Adjust the bin width with an interactive widget.</p> <pre><code>import matplotlib.pyplot as plt\nimport ipywidgets as widgets\n\ndef plot_histogram(bin_width):\n    plt.hist(all_data['reaction_time'].dropna(), bins=bin_width)\n    plt.title('Histogram of Reaction Times')\n    plt.xlabel('Reaction Time (ms)')\n    plt.ylabel('Frequency')\n    plt.show()\n\nwidgets.interactive(plot_histogram, bin_width=widgets.IntSlider(min=5, max=100, step=5, value=20))\n</code></pre>"},{"location":"learning_paths/all_steps/#3b-box-plot-of-mean-reaction-times-by-accuracy","title":"3b. Box Plot of Mean Reaction Times by Accuracy","text":"<p>A box and whisker plot can show differences in reaction times between \"true\" (correct) and \"false\" (incorrect) responses.</p> <p>Seaborn</p> <p>Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. You can install Seaborn using <code>pip install seaborn</code>.</p> <p>In your notebook, you might want to run <code>%pip install seaborn</code> to install Seaborn, instead of the normal pip install.</p> <pre><code>import seaborn as sns\n\n# Plot box and whisker plot for reaction times by accuracy\nsns.boxplot(x='accuracy', y='reaction_time', data=all_data)\nplt.title('Reaction Times by Accuracy')\nplt.xlabel('Accuracy (True or False)')\nplt.ylabel('Reaction Time (ms)')\nplt.show()\n</code></pre> <p>It's great to have a visualization, but it will probably be good to know the means and standard deviation values of these plots as well, let's use Pandas to calculate those!</p> <pre><code>import pandas as pd\n\n# Assuming 'all_data' is your DataFrame\ntrue_responses = all_data[all_data['accuracy'] == True]\nfalse_responses = all_data[all_data['accuracy'] == False]\n\ntrue_mean = true_responses['reaction_time'].mean()\ntrue_sd = true_responses['reaction_time'].std()\n\nfalse_mean = false_responses['reaction_time'].mean()\nfalse_sd = false_responses['reaction_time'].std()\n\n# Print the mean and standard deviation values, and the counts of each group\nprint(f\"True responses - Mean: {true_mean}, SD: {true_sd}, Count: {len(true_responses)}\")\nprint(f\"False responses - Mean: {false_mean}, SD: {false_sd}, Count: {len(false_responses)}\")\n</code></pre>"},{"location":"learning_paths/all_steps/#think-about-the-data","title":"Think about the data","text":"<p>Look at the means and standard deviations. What do you think a paired t-test would show? What problem arrises when we look at the \"Count\" of each data type?</p>"},{"location":"learning_paths/all_steps/#4-aggregate-mean-reaction-times-by-participantsubject","title":"4: Aggregate Mean Reaction Times by Participant/Subject","text":"<p>Next, let\u2019s condense the data to calculate each subject's mean reaction time and the number of \"true\" (correct) trials out of 50.</p> <pre><code># Calculate mean reaction times and true trial counts\nsubject_summary = all_data.groupby('subject_id').agg(\n    mean_reaction_time=('reaction_time', 'mean'),\n    true_count=('accuracy', lambda x: (x == True).sum())\n).reset_index()\n</code></pre>"},{"location":"learning_paths/all_steps/#5-visualize-mean-reaction-time-data","title":"5: Visualize Mean Reaction Time Data","text":""},{"location":"learning_paths/all_steps/#5a-histogram-of-mean-reaction-times","title":"5a. Histogram of Mean Reaction Times","text":"<p>Plot a histogram of mean reaction times for each participant.</p> <pre><code>plt.hist(subject_summary['mean_reaction_time'], bins=20)\nplt.title('Histogram of Mean Reaction Times by subject')\nplt.xlabel('Mean Reaction Time (ms)')\nplt.ylabel('Frequency')\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#5b-scatterplot-of-reaction-time-and-true-responses","title":"5b. Scatterplot of Reaction Time and % \"True\" Responses","text":"<p>Plot a scatterplot to explore the relationship between subjects\u2019 mean reaction times and their accuracy rate.</p> <pre><code># Calculate accuracy percentage\nsubject_summary['true_percentage'] = (subject_summary['true_count'] / 50) * 100\n\n# Scatterplot of mean reaction time vs. true percentage\nplt.scatter(subject_summary['mean_reaction_time'], subject_summary['true_percentage'])\nplt.title('Mean Reaction Time vs. % True Responses')\nplt.xlabel('Mean Reaction Time (ms)')\nplt.ylabel('% True Responses')\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#6-have-fun-with-it","title":"6. Have fun with it!","text":"<p>Take time to play with Seaborn and Matplotlib to create more visualizations and explore the data further. You can also experiment with different data transformations and analysis techniques to gain deeper insights!</p> <p>Dig into the Pandas dataframe, look at the data, and see if you can find any interesting patterns or relationships.</p> <pre><code># Display the first few rows of the DataFrame\nall_data.head()\n</code></pre> <p>You can grab different columns and plot them against each other to see if there are any relationships. For example, you could plot the reaction time against the color of the circle that was shown to the participant.</p>"},{"location":"learning_paths/all_steps/#7-review","title":"7. Review","text":"<p>In this step, you\u2019ve learned how to handle, clean, and visualize reaction time data using pandas, matplotlib, and seaborn. In a future step, we'll look at how to analyze this data statistically to draw meaningful conclusions!</p>"},{"location":"learning_paths/all_steps/#step-22","title":"Step 22","text":""},{"location":"learning_paths/all_steps/#basic-statistics","title":"Basic Statistics","text":"<p>In this step, we'll apply statistical methods to the reaction time dataset generated in the previous steps. This dataset includes data related to reaction times for trials where the independent variable (IV) is the color of a circle. Here's what we aim to accomplish:</p>"},{"location":"learning_paths/all_steps/#objectives","title":"Objectives","text":"<ol> <li>Establish the dataset.</li> <li>Compute basic descriptives and create plots suitable for a paired samples t-test.</li> <li>Perform and interpret a paired samples t-test.</li> <li>Manipulate the dataset to add an additional variable, previous circle color.</li> <li>Set up and run a two-way ANOVA to investigate interactions between the current circle color and the previous circle color.</li> </ol>"},{"location":"learning_paths/all_steps/#1-establish-the-dataset","title":"1: Establish the Dataset","text":"<p>We will start with the <code>all_data</code> dataset generated in Step 21. This dataset contains reaction times for trials where the circle color is the independent variable.</p> <p>Go back to Step 21 to get the <code>all_data</code> dataframe, when you do you should be able to run the code below and get the following result.</p> <p>Code:</p> <pre><code>all_data.head()\n</code></pre> <p>Result: <pre><code>    subject_id  reaction_time   circle_color    key_pressed accuracy\n0       1           445.0           orange          j          True\n1       1           386.0           blue            f          True\n2       1           366.0           blue            f          True\n3       1           374.0           orange          j          True\n4       1           409.0           orange          j          True\n</code></pre></p>"},{"location":"learning_paths/all_steps/#2-descriptives-and-paired-samples-t-test-preparation","title":"2: Descriptives and Paired Samples T-Test Preparation","text":"<p>To prepare for the paired samples t-test: - Compute summary statistics for each circle color. - Visualize the data with plots to check assumptions like normality.</p> <pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group by circle color and calculate summary statistics\ndescriptives = all_data.groupby('circle_color')['reaction_time'].describe()\n\n# Boxplot to visualize reaction times by circle color\nsns.boxplot(x='circle_color', y='reaction_time', data=all_data)\nplt.title('Reaction Times by Circle Color')\nplt.show()\n\n# Print descriptive statistics\nprint(descriptives)\n</code></pre>"},{"location":"learning_paths/all_steps/#3-perform-the-paired-samples-t-test","title":"3: Perform the Paired Samples T-Test","text":"<p>A paired samples t-test compares reaction times between two conditions.</p> <p>pip install <code>scipy</code></p> <p>At this point you'll most likely need to install the <code>scipy</code> package. You can do this by running <code>%pip install scipy</code> in your notebook.</p> <p>What's <code>scipy</code>? Think of it as \"scientific Python\" - it's a library that provides many user-friendly and efficient numerical routines andf functions that are commonly used in scientific and engineering applications.</p> <pre><code>from scipy.stats import ttest_rel\n\n# Perform paired t-test\ngroup1 = all_data[all_data['circle_color'] == 'orange']['reaction_time'] # Orange circle\ngroup2 = all_data[all_data['circle_color'] == 'blue']['reaction_time'] # Blue circle\n\nt_stat, p_value = ttest_rel(group1, group2)\n\n# Display results\nprint(f\"Paired Samples T-Test:\\nT-Statistic = {t_stat}, p-value = {p_value}\")\n</code></pre> <p>Interpretation: Based on the p-value, determine if there is a significant difference between reaction times for orange and blue circles.</p> Check your results<p>If you ran it correctly, you should get the following output: <pre><code># Paired Samples T-Test:\n# T-Statistic = -0.2520879211177987, p-value = 0.8010674499745879\n</code></pre> The p-value is greater than 0.05, indicating that there is no significant difference between reaction times for orange and blue circles.</p> <p>Is this surprising? No not really! The data didn't appear to be significantly different in the boxplot, and we don't have a good reason to think that the color of the circle alone would affect reaction times.</p>"},{"location":"learning_paths/all_steps/#4-add-previous-circle-color-variable","title":"4: Add Previous Circle Color Variable","text":"<p>To explore potential effects of previous circle color, add this column to the dataset. The first trial is excluded as it lacks a \"previous\" circle.</p> <pre><code># Shift the 'circle_color' column to create the 'previous_circle_color' column\nall_data['previous_circle_color'] = all_data['circle_color'].shift(1)\n\n# Remove the first trial or row of data from every subject\nall_data = all_data.groupby('subject_id').apply(lambda x: x.iloc[1:]).reset_index(drop=True)\n\n# Display the updated dataset\nprint(all_data.head())\n</code></pre> <p>Lambda Functions</p> <p>In the code above, we used a lambda function to remove the first trial or row of data from every subject. Lambda functions are small, anonymous functions that can have any number of arguments but only one expression. They are often used in situations where a function is needed for a short period of time.</p> <p>Be on the lookout for a \"Side Quest\" where you can learn more about lambda functions!</p> <p>I have a hypothesis; if the previous circle color was the same as the current circle color, the reaction time will be faster. Let's see if this is true!</p> <p>To make our live's easier, we'll create a new column to include a new variable, <code>repeat_color</code>, which will be <code>True</code> if the previous circle color is the same as the current circle color, and <code>False</code> otherwise.</p> <pre><code># Create a new column 'same_color' to indicate if the previous circle color is the same as the current circle color\nall_data['repeat_color'] = all_data['circle_color'] == all_data['previous_circle_color']\nall_data.head()\n</code></pre> <p>In the next part, we'll perform an additional t-test to see if there is a significant difference in reaction times between trials where the previous circle color is the same as the current circle color and trials where it is different.</p>"},{"location":"learning_paths/all_steps/#5-another-paired-samples-t-test","title":"5: Another Paired Samples T-Test","text":"<p>Based on the code in part 3, I'd like for you to look at the code and then think about how you'd set it up yourself. After you think/test it, continue reading below.</p>"},{"location":"learning_paths/all_steps/#some-snags-in-the-plan","title":"Some Snags in the Plan","text":"<p>A problem arrises if you simply group the data by <code>repeat_color</code> and then run the t-test. The issue is that we no longer have equal sample sizes for each group, this is because, randomly, we ended up with 250 trials where the previous circle color was the same as the current circle color, and 828 trials where they were different.</p> <p>Run the following code and you'll get an <code>ValueError: unequal length arrays</code> error.</p> <pre><code># Perform paired t-test\ngroup1 = all_data[all_data['repeat_color'] == True]['reaction_time']  # Repeat color is True\ngroup2 = all_data[all_data['repeat_color'] == False]['reaction_time']  # Repeat color is False\n\nt_stat, p_value = ttest_rel(group1, group2)\n\n# Display results\nprint(f\"Paired Samples T-Test:\\nT-Statistic = {t_stat}, p-value = {p_value}\")\n\n# Boxplot visualization\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='repeat_color', y='reaction_time', data=all_data)\nplt.title('Reaction Time by Repeat Color')\nplt.xlabel('Repeat Color')\nplt.ylabel('Reaction Time')\nplt.show()\n</code></pre> <p>We can run this block of code below to demonstrate that the two arrays are indeed unequal lengths:</p> <pre><code>import numpy as np\n\nnp.shape(group1), np.shape(group2)\n</code></pre>"},{"location":"learning_paths/all_steps/#fixing-the-issue","title":"Fixing the Issue","text":"<p>One way to fix the problem (an imperfect, but fine way for quick data visualization and exploration) is to randomly sample 250 trials from the <code>repeat_color == False</code> group. This way, we'll have equal sample sizes for both groups.</p> <p>Let's do that below, and then perform the t-test and plot the results.</p> <pre><code># Randomly sample 250 trials from the 'repeat_color' == False group\n\ngroup2_sample = all_data[all_data['repeat_color'] == False].sample(n=250, random_state=1)['reaction_time']\n\nt_stat, p_value = ttest_rel(group1, group2_sample)\n\n# Display results\nprint(f\"Paired Samples T-Test:\\nT-Statistic = {t_stat}, p-value = {p_value}\")\n\n# Get descriptive statistics\ngroup1_desc = group1.describe()\ngroup2_desc = group2_sample.describe()\n\nprint(\"\\nDescriptive Statistics for Group 1 (Repeat Color is True):\")\nprint(group1_desc)\n\nprint(\"\\nDescriptive Statistics for Group 2 (Repeat Color is False):\")\nprint(group2_desc)\n\n# Boxplot visualization\nplt.figure(figsize=(10, 6))\nsns.boxplot(x='repeat_color', y='reaction_time', data=all_data)\nplt.title('Reaction Time by Repeat Color')\nplt.xlabel('Repeat Color')\nplt.ylabel('Reaction Time')\nplt.show()\n</code></pre> <p>By making the random_state equal to 1, we ensure that the random sample is the same every time we run the code. This way, we can reproduce the results and compare them across different runs.</p> <p>This should also mean you see the same result that I do: it looks like there is no significant difference between reaction times when the previous circle color is the same as the current circle color compared to when they are different. It was a cool idea though, right?!</p>"},{"location":"learning_paths/all_steps/#6-two-way-anova","title":"6: Two-Way ANOVA","text":"<p>There's one more thing that I'd like for us to explore: the possible effect and interaction between subjects...</p> <p>We can set up a two-way ANOVA to investigate the effects of the current circle color, the previous circle color, and their interaction on reaction times.</p> <p>%pip install statsmodels</p> <p>To run the two-way ANOVA, you'll need to install the <code>statsmodels</code> package. You can do this by running <code>%pip install statsmodels</code> in your notebook.</p> <pre><code>import statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Fit the two-way ANOVA model\nmodel = ols('reaction_time ~ C(subject_id) + C(circle_color) + C(subject_id):C(circle_color)', data=all_data).fit()\nanova_table = sm.stats.anova_lm(model, typ=2)\n\n# Display the ANOVA table\nprint(anova_table)\n\n# Boxplot visualization\nplt.figure(figsize=(12, 8))\nsns.boxplot(x='circle_color', y='reaction_time', hue='subject_id', data=all_data)\nplt.title('Reaction Time by Circle Color and Subject ID')\nplt.xlabel('Circle Color')\nplt.ylabel('Reaction Time')\nplt.legend(title='Subject ID', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n</code></pre> <p>If everything has gone smoothly, your resulting ANOVA table should look like this: <pre><code>                                     sum_sq      df          F        PR(&gt;F)\nC(subject_id)                  3.327539e+06    21.0  11.095641  1.533542e-33\nC(circle_color)                1.209871e+03     1.0   0.084720  7.710580e-01\nC(subject_id):C(circle_color)  2.686349e+05    21.0   0.895760  5.971599e-01\nResidual                       1.476631e+07  1034.0        NaN           NaN\n</code></pre></p> <p>The last column is your p-value in scientific notation; we can see that the only significant effect is the subject ID. This is not surprising, as we would expect that different subjects would have different reaction times.</p> <p>What does this mean? It means that the color of the circle and the interaction between the color of the circle and the subject ID do not have a significant effect on reaction times, but different people do have different reaction times.</p> <p>Now you've run a two-way ANOVA in Python! This is a powerful tool for analyzing the effects of multiple factors on a dependent variable.</p>"},{"location":"learning_paths/all_steps/#conclusion","title":"Conclusion","text":"<p>In this step, we:</p> <ul> <li>Established the reaction time dataset and computed basic statistics.</li> <li>Conducted a paired samples t-test to evaluate differences between orange and blue circles.</li> <li>Introduced a new variable (same circle color), and randomly sampled to ensure equal sample sizes for a second t-test.</li> <li>Performed a two-way ANOVA and visualized all of the data.</li> </ul> <p>What are some things we didn't do?</p> <ul> <li>We didn't check for normality or homogeneity of variance in the t-tests or ANOVA.</li> <li>We didn't explore other statistical tests or models that could be applied to this dataset (Logistic Regression would be great, for example).</li> <li>We didn't remove outliers, this could have changed the results of the t-tests and ANOVA.</li> </ul> <p>Take a moment to think about what else you'd like to explore with this dataset. What other statistical tests or models could be applied? What additional variables could be included to enhance the analysis? If you're brave enough, try to implement some of these ideas!</p>"},{"location":"learning_paths/all_steps/#step-23","title":"Step 23","text":""},{"location":"learning_paths/all_steps/#data-dive-i-finding-data","title":"Data Dive I: Finding Data","text":"<p>Your journey into data analysis starts with finding an interesting dataset. For this step, you can either:</p> <ol> <li> <p>Search for Open Datasets: Explore open-source datasets available on platforms like Kaggle, Data.gov, or Google Dataset Search.</p> </li> <li> <p>Download Personal Data: Many services allow you to download your personal data (e.g., Instagram, Spotify, or Google). Make sure the downloaded data is in a workable format such as <code>json</code>, <code>csv</code>, or <code>txt</code>. If you want to work with your own data, Google how to download it from the respective service.</p> </li> </ol>"},{"location":"learning_paths/all_steps/#preparing-for-import","title":"Preparing for Import","text":"<p>Once you have your data:</p> <ul> <li>Ensure the dataset is saved locally in a known file path.</li> <li>Check the file format (e.g., <code>.csv</code>, <code>.json</code>, <code>.txt</code>) as it will guide how you load it into Python.</li> </ul>"},{"location":"learning_paths/all_steps/#using-ai-to-help-format-your-data","title":"Using AI to Help Format Your Data","text":"<p>Organizing raw data can be challenging, especially if the dataset has many columns or uses inconsistent formatting. AI tools like ChatGPT, Claude, and Microsoft Copilot can help you write Python code to clean and organize your data.</p>"},{"location":"learning_paths/all_steps/#best-practices-when-using-ai-tools","title":"Best Practices When Using AI Tools","text":"<ol> <li>Feed Your Datafile: Many AI tools allow you to upload your dataset directly for analysis. Uploading your file can help the AI better understand your data structure.</li> <li>Provide Context: Clearly describe what you're trying to achieve, such as renaming columns, handling missing values, or filtering rows.</li> <li>Iterate: If the AI-generated code doesn\u2019t work perfectly, provide feedback and ask for adjustments.</li> </ol>"},{"location":"learning_paths/all_steps/#example-prompts-for-using-ai","title":"Example Prompts for Using AI","text":"<p>Here are some sample prompts to get you started:</p>"},{"location":"learning_paths/all_steps/#prompt-1-general-formatting","title":"Prompt 1: General Formatting","text":"<p>\"I have a dataset in CSV format with inconsistent column names. Here's a sample of the data: [paste or upload your dataset]. Could you help me write Python code using Pandas to clean the column names (e.g., make them lowercase and replace spaces with underscores) and handle missing values by filling them with 0?\"</p>"},{"location":"learning_paths/all_steps/#prompt-2-renaming-columns","title":"Prompt 2: Renaming Columns","text":"<p>\"Here\u2019s my dataset: [paste or upload]. I want to rename the column <code>Old Column Name</code> to <code>new_column_name</code>. Could you provide the Pandas code to do this?\"</p>"},{"location":"learning_paths/all_steps/#prompt-3-filtering-rows","title":"Prompt 3: Filtering Rows","text":"<p>\"My dataset has a column called <code>age</code>. Could you write Python code using Pandas to filter out rows where the age is less than 18? Here\u2019s the data: [paste or upload].\"</p>"},{"location":"learning_paths/all_steps/#prompt-4-creating-new-columns","title":"Prompt 4: Creating New Columns","text":"<p>\"I have this dataset: [paste or upload]. I\u2019d like to create a new column that calculates the ratio of <code>sales</code> to <code>profit</code>. Could you help me write the code for that in Pandas?\"</p>"},{"location":"learning_paths/all_steps/#prompt-5-data-structure-insights","title":"Prompt 5: Data Structure Insights","text":"<p>\"Here\u2019s my dataset: [paste or upload]. Could you provide a summary of the dataset, including column data types and a preview of the first few rows? Also, suggest any obvious cleaning steps that might be necessary.\"</p>"},{"location":"learning_paths/all_steps/#why-use-ai","title":"Why Use AI?","text":"<p>AI tools can speed up your workflow, reduce errors, and give you creative ideas for working with your data. However, it's essential to understand the basics of Pandas so you can verify and tweak the code generated by the AI.</p> <p>How do you get the basics of Pandas down? By practicing and looking things up! In previous learning steps, we've used Pandas to do a variety of tasks, such as filtering data, creating new columns, and summarizing data. Go back and look at what we did, look up function names in the Pandas documentation (linked here), and practice using Pandas on your own data.</p>"},{"location":"learning_paths/all_steps/#importing-data-into-pandas","title":"Importing Data into Pandas","text":"<p>Follow these steps to import and organize your data into a Pandas DataFrame:</p>"},{"location":"learning_paths/all_steps/#1-setting-up","title":"1. Setting Up","text":"<p>Start by importing the necessary libraries.</p> <pre><code>import pandas as pd\nimport json  # Only if your dataset is in JSON format\n\n# Add more libraries if needed (e.g., os for file management)\n</code></pre>"},{"location":"learning_paths/all_steps/#2-loading-data-based-on-file-type","title":"2. Loading Data Based on File Type","text":""},{"location":"learning_paths/all_steps/#for-csv-files","title":"For CSV Files:","text":"<pre><code># Replace 'your_dataset.csv' with your file's name\nfile_path = 'your_dataset.csv'\ndata = pd.read_csv(file_path)\n\n# Preview the first few rows\nprint(data.head())\n</code></pre>"},{"location":"learning_paths/all_steps/#for-json-files","title":"For JSON Files:","text":"<pre><code># Replace 'your_dataset.json' with your file's name\nfile_path = 'your_dataset.json'\nwith open(file_path, 'r') as file:\n    data = json.load(file)\n\n# Convert JSON data into a DataFrame\ndf = pd.DataFrame(data)\nprint(df.head())\n</code></pre>"},{"location":"learning_paths/all_steps/#for-txt-files-delimited","title":"For TXT Files (Delimited):","text":"<pre><code># Replace 'your_dataset.txt' with your file's name and delimiter (e.g., '\\t' for tab-delimited)\nfile_path = 'your_dataset.txt'\ndata = pd.read_csv(file_path, delimiter='\\t')\n\n# Preview the first few rows\nprint(data.head())\n</code></pre>"},{"location":"learning_paths/all_steps/#3-cleaning-and-organizing-the-dataframe","title":"3. Cleaning and Organizing the DataFrame","text":"<p>Once your data is loaded, ensure it's organized and meaningful:</p> <p>Keep looking at your DataFrame</p> <p>As you clean and organize your data, keep checking the DataFrame to ensure it's structured the way you want. Use <code>print(data.head())</code> to preview the first few rows and <code>print(data.info())</code> to get an overview of the columns and data types.</p> <ul> <li> <p>Inspect the structure:   <pre><code>print(data.info())  # Overview of columns and data types\n</code></pre></p> </li> <li> <p>Rename columns if needed:   <pre><code>data.rename(columns={'old_column_name': 'new_column_name'}, inplace=True)\n</code></pre></p> </li> <li> <p>Filter unnecessary rows/columns:   <pre><code># Dropping a column\ndata.drop(columns=['unnecessary_column'], inplace=True)\n\n# Keeping specific rows\ndata = data[data['column_name'] &gt; threshold_value]\n</code></pre></p> </li> <li> <p>Handle missing values:   <pre><code>data.fillna(value=default_value, inplace=True)  # Fill missing values\ndata.dropna(inplace=True)  # Optionally drop rows with missing values\n</code></pre></p> </li> </ul>"},{"location":"learning_paths/all_steps/#conclusion_1","title":"Conclusion","text":"<p>At this stage, you should have:</p> <ul> <li>Located and downloaded an interesting dataset.</li> <li>Used AI tools (optional but highly recommended!) to assist in formatting and organizing your data.</li> <li>Imported it into Python using Pandas.</li> <li>Organized the dataset to ensure meaningful rows and columns.</li> </ul> <p>Once you're comfortable with the structure of your data, you're ready to dive into visualizations in Step 24!</p>"},{"location":"learning_paths/all_steps/#step-24","title":"Step 24","text":"<p>In this step, we explore fine-tuning Matplotlib visualizations for enhanced customizability. We'll use the <code>all_data</code> dataset generated in Step 21 to create overlapping histograms with Probability Density Functions (PDFs) and legends. Along the way, we'll explain specific parts of the code you'll modify or customize in each section.</p>"},{"location":"learning_paths/all_steps/#1-setting-up-our-data","title":"1. Setting Up Our Data","text":"<p>We start by filtering the <code>all_data</code> dataframe to create two datasets based on <code>circle_color</code>. These will serve as the reaction time data for the two groups (orange and blue).</p> <p>Dataset Setup:</p> <ul> <li><code>orange_reactiontime_df</code>: Contains reaction times for trials where <code>circle_color</code> is <code>'orange'</code>.</li> <li><code>blue_reactiontime_df</code>: Contains reaction times for trials where <code>circle_color</code> is <code>'blue'</code>.</li> </ul> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Assuming all_data is already loaded\n# If you do not have it yet, go back to Step 21 and load it as instructed\nall_data = pd.read_csv('reaction_time_data.csv')  # Replace with actual file path\n# If you've already got `all_data` loaded, you can skip this step by commenting it out\n\n# Create datasets for the two groups\norange_reactiontime_df = all_data[all_data['circle_color'] == 'orange']['reaction_time']\nblue_reactiontime_df = all_data[all_data['circle_color'] == 'blue']['reaction_time']\n\n# Preview the datasets\nprint(\"Orange Reaction Times:\\n\", orange_reactiontime_df.head())\nprint(\"Blue Reaction Times:\\n\", blue_reactiontime_df.head())\n</code></pre> <p>Key Parts to Check:</p> <ul> <li>Ensure <code>all_data</code> is loaded correctly and contains the expected columns (<code>reaction_time</code>, <code>circle_color</code>).</li> <li>Replace <code>'reaction_time_data.csv'</code> with the actual file name/path if needed.</li> </ul>"},{"location":"learning_paths/all_steps/#2-creating-independent-histograms","title":"2. Creating Independent Histograms","text":"<p>Now that we have two different dataframes, lSet's create histograms for the orange and blue reaction times individually.</p> <pre><code># Orange Reaction Time Histogram\nplt.figure(figsize=(8, 6))\nplt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.6, label='Orange')\nplt.title('Histogram of Reaction Times: Orange')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Frequency')\nplt.show()\n\n# Blue Reaction Time Histogram\nplt.figure(figsize=(8, 6))\nplt.hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.6, label='Blue')\nplt.title('Histogram of Reaction Times: Blue')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Frequency')\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li><code>bins=20</code>: Adjust the number of bins (granularity) if needed.</li> <li><code>color='orange'</code> and <code>color='blue'</code>: Customize colors as desired.</li> <li><code>alpha=0.6</code>: Adjust transparency (range: 0 to 1).</li> </ul> <p>IpyWidget to Play with <code>alpha</code> value</p> <p>You can use an IpyWidget to interactively adjust the <code>alpha</code> value and see the visual effect it has on the histogram. </p> <p>This will be cooler to do when we overlap our histograms later, but for now here's an example:</p> <pre><code>from ipywidgets import interact\n\n@interact(alpha=(0, 1, 0.05))\ndef plot_histogram(alpha=0.6):\n    plt.figure(figsize=(8, 6))\n    plt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=alpha, label='Orange')\n    plt.title('Histogram of Reaction Times: Orange')\n    plt.xlabel('Reaction Time (ms)')\n    plt.ylabel('Frequency')\n    plt.show()\n</code></pre> <p>This code snippet creates an interactive slider for the <code>alpha</code> value, allowing you to see the histogram change in real-time.</p> <p>What other ways could you use an IpyWidgets to interact with your data?</p>"},{"location":"learning_paths/all_steps/#3-combining-into-a-two-paneled-plot","title":"3. Combining into a Two-Paneled Plot","text":"<p>Two histograms are cool, but it would be nice if they were attached/connected in some way. We can create a side-by-side comparison of the two histograms using subplots!</p> <p>To do this, we'll set up a <code>fig</code> figure object with a corresponding <code>axs</code> array to hold the two subplots and then plot the histograms for orange and blue reaction times in each panel.</p> <pre><code>fig, axs = plt.subplots(1, 2, figsize=(12, 6), constrained_layout=True)\n\n# Panel 1: Orange\naxs[0].hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.6, label='Orange')\naxs[0].set_title('Orange Reaction Times')\naxs[0].set_xlabel('Reaction Time (ms)')\naxs[0].set_ylabel('Frequency')\n\n# Panel 2: Blue\naxs[1].hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.6, label='Blue')\naxs[1].set_title('Blue Reaction Times')\naxs[1].set_xlabel('Reaction Time (ms)')\n\nplt.suptitle('Reaction Times by Circle Color')\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li><code>figsize=(12, 6)</code>: Change plot size if necessary.</li> <li>Customize subplot titles and labels as needed.</li> </ul> <p>figure fun</p> <p>You can also use the <code>fig</code> object to save your figure to a file. For example, <code>fig.savefig('reaction_time_histograms.png')</code> will save the figure as a PNG file in the current directory.</p> <p>You can also adjust the layout using <code>fig.tight_layout()</code>, or set a global title with <code>fig.suptitle('Overall Title')</code>.</p>"},{"location":"learning_paths/all_steps/#4-overlapping-histograms-with-pdfs","title":"4. Overlapping Histograms with PDFs","text":"<p>One of my favorite ways to display/compare histograms is to combine the two datasets into a single plot, overlaying histograms. We can then calculate and plot probability density function for each dataset to visualize the distribution more clearly.</p> <p>What's a Probability Density Function (PDF)?</p> <p>A Probability Density Function (PDF) is a statistical function that describes the likelihood of a continuous random variable falling within a particular range. In this case, we're using the normal distribution PDF to model the reaction time data.</p> <p>The <code>norm.pdf()</code> function from <code>scipy.stats</code> calculates the PDF of a normal distribution given a set of values, mean, and standard deviation.</p> <p>The normal curve helps us visualize how the data is distributed around the mean and how likely certain values are.</p> <pre><code>plt.figure(figsize=(10, 6))\n\n# Orange Histogram and Curve\nplt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.4, label='Orange', density=True)\nplt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    label='Orange PDF',\n)\n\n# Blue Histogram and Curve\nplt.hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.4, label='Blue', density=True)\nplt.plot(\n    np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n        np.mean(blue_reactiontime_df),\n        np.std(blue_reactiontime_df),\n    ),\n    color='blue',\n    linestyle='-',\n    linewidth=2,\n    label='Blue PDF',\n)\n\nplt.title('Overlapping Reaction Time Histograms with PDF Curves')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Density')\nplt.legend()\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li>Adjust the <code>np.linspace</code> range to fit the specific dataset more tightly.</li> <li>Modify <code>linestyle='--'</code> or <code>linewidth=2</code> for the curves as needed.</li> </ul>"},{"location":"learning_paths/all_steps/#breaking-down-the-pdf-calculation","title":"Breaking down the PDF Calculation:","text":"<p>The following code snippet is what calculates the PDF line for the orange histogram:</p> <pre><code>plt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    label='Orange PDF Curve',\n)\n</code></pre> <p>Let's break it down piece by piece:</p> <ul> <li><code>np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500)</code>: This creates 500 evenly spaced points between the minimum and maximum reaction times in the orange dataset. This range is used to calculate the PDF values.</li> <li><code>norm.pdf(...)</code>: This calculates the PDF values for the given range using the mean and standard deviation of the orange dataset.</li> <li><code>np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500)</code>: This is the range of x-values for the PDF curve, we repeat it here to ensure the x-values match the PDF values.</li> <li><code>np.mean(orange_reactiontime_df)</code>: The mean of the orange reaction times. This is used as the center of the normal distribution.</li> <li><code>np.std(orange_reactiontime_df)</code>: The standard deviation of the orange reaction times. This controls the spread of the normal distribution.</li> <li>color, linestyle, linewidth, label: These are used to customize the appearance of the PDF curve and how it appears in the legend (respectively).</li> </ul>"},{"location":"learning_paths/all_steps/#5-fine-tuning-and-customizing","title":"5. Fine-Tuning and Customizing","text":"<p>Add legends, gridlines, and vertical lines indicating mean reaction times.</p> <pre><code>plt.figure(figsize=(10, 6))\n\n# Histograms\nplt.hist(orange_reactiontime_df, bins=20, color='orange', alpha=0.5, label='Orange', density=True)\nplt.hist(blue_reactiontime_df, bins=20, color='blue', alpha=0.5, label='Blue', density=True)\n\n# PDFs\nplt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    label='Orange PDF Curve',\n)\nplt.plot(\n    np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n        np.mean(blue_reactiontime_df),\n        np.std(blue_reactiontime_df),\n    ),\n    color='blue',\n    linestyle='-',\n    linewidth=2,\n    label='Blue PDF Curve',\n)\n\n# Customizations\nplt.title('Customized Reaction Time Histograms')\nplt.xlabel('Reaction Time (ms)')\nplt.ylabel('Density')\nplt.grid(visible=True, which='both', linestyle='--', alpha=0.6)\nplt.axvline(np.mean(orange_reactiontime_df), color='orange', linestyle='-', label='Mean Orange')\nplt.axvline(np.mean(blue_reactiontime_df), color='blue', linestyle='-', label='Mean Blue')\nplt.legend(loc='upper right', frameon=True, fontsize=10)\n\nplt.show()\n</code></pre> <p>Key Parts to Modify:</p> <ul> <li>Adjust <code>plt.grid(...)</code> for appearance.</li> <li>Add or adjust vertical lines (<code>plt.axvline(...)</code>) for additional statistical markers.</li> </ul>"},{"location":"learning_paths/all_steps/#6-cleaning-up-your-figure","title":"6. Cleaning Up Your Figure","text":"<p>One thing you might notice is that at this point, our figure is pretty bloated. We really don't need all that information hanging out in the legend, for example.</p> <p>We can spend some time going back into our figure and cleaning up the code to make it appear a bit nicer, and more publication-ready. We can...</p> <ul> <li>Remove unnecessary labels from the legend.</li> <li>Adjust the font size of the legend so that they're all legible.</li> <li>Remove the gridlines if they're not necessary.</li> <li>Adjust the bin size of the histograms so that they're the same width for both groups.</li> <li>Remove tick marks on the y-axis to clean up the figure.</li> </ul>"},{"location":"learning_paths/all_steps/#first-were-going-to-calculate-bin-sizes-for-the-histograms-so-that-theyre-the-same-width-for-both-groups","title":"First, we're going to calculate bin sizes for the histograms so that they're the same width for both groups.","text":"<pre><code># Define bin size\nbin_size = 50  # for example, 50 ms\n\n# Calculate bin edges\norange_bins = np.arange(min(orange_reactiontime_df), max(orange_reactiontime_df) + bin_size, bin_size)\nblue_bins = np.arange(min(blue_reactiontime_df), max(blue_reactiontime_df) + bin_size, bin_size)\n</code></pre>"},{"location":"learning_paths/all_steps/#now-well-implement-these-bin-sizes-in-our-histograms","title":"Now, we'll implement these bin sizes in our histograms.","text":"<pre><code>plt.figure(figsize=(10, 6))\n\n# Histograms\nplt.hist(orange_reactiontime_df, bins=orange_bins, color='orange', alpha=0.5, label='Orange', density=True)\nplt.hist(blue_reactiontime_df, bins=blue_bins, color='blue', alpha=0.5, label='Blue', density=True)\n\n# PDFs\nplt.plot(\n    np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(orange_reactiontime_df.min(), orange_reactiontime_df.max(), 500),\n        np.mean(orange_reactiontime_df),\n        np.std(orange_reactiontime_df),\n    ),\n    color='orange',\n    linestyle='--',\n    linewidth=2,\n    # remove unnecessary legend label; orange = color orange, blue = blue.\n)\nplt.plot(\n    np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n    norm.pdf(\n        np.linspace(blue_reactiontime_df.min(), blue_reactiontime_df.max(), 500),\n        np.mean(blue_reactiontime_df),\n        np.std(blue_reactiontime_df),\n    ),\n    color='blue',\n    linestyle='-',\n    linewidth=2,\n)\n\n# Customizations\nplt.title('Customized Reaction Time Histograms', fontsize=20)\nplt.xlabel('Reaction Time (ms)', fontsize=16)\nplt.ylabel('Density', fontsize=16)\nplt.grid(visible=True, which='both', linestyle='-', alpha=0.6) # Change linestyle to '-'\nplt.axvline(np.mean(orange_reactiontime_df), color='orange', linestyle='-')\nplt.axvline(np.mean(blue_reactiontime_df), color='blue', linestyle='-')\n\n# Clean up the legend\nplt.legend(loc='upper right', frameon=True, fontsize=12) # Increase font size\nplt.tick_params(axis='both', which='both', length=0) # Hide tick marks on the edge\n\nplt.show()\n</code></pre>"},{"location":"learning_paths/all_steps/#other-things-to-consider","title":"Other things to consider","text":"<p>There are more ways you could customize this plot...</p> <ul> <li>You could add texture to the bars of the histogram to make them more visually distinct</li> <li>You could make sure your histograms start at the same value so that the bins are perfectly aligned</li> <li>... and more!</li> </ul>"},{"location":"learning_paths/all_steps/#summary_2","title":"Summary","text":"<p>In this final step of our learning path, we've explored fine-tuning Matplotlib visualizations to create publication-quality figures. By layering histograms, PDFs, and annotations, we've enhanced the clarity and visual appeal of our data representations. These techniques can be applied to a wide range of datasets and research questions, allowing you to create compelling visualizations that effectively communicate your findings.</p> <p>Now you should have everything you need to create a publication-quality figure in Python!</p>"},{"location":"learning_paths/all_steps/#step-25-what-next","title":"Step 25 - What Next?","text":"<p>By now, you should have completed your programming journey and the content of this course!</p> <p>Take a moment to congratulate yourself on your hard work and dedication. You have learned a lot and should be proud of your accomplishments!</p>"},{"location":"learning_paths/all_steps/#first-thank-you","title":"First, Thank you","text":"<p>Being able to build and share this course material with you means a lot to me - the journey of learning to enjoy programming is exciting for me! A special thanks to the students who signed up for my first 3010 class. Without you, this wouldn't exist.</p> <p>I don't expect all of you to fall in love with programming like I have, but I hope that at least you've learned about and have grown to appreciate the role that programming plays in your life.</p>"},{"location":"learning_paths/all_steps/#looking-for-more_1","title":"Looking for more?","text":"<p>There will be likely those among you who have experienced the \"spark\" of programming - that feeling of excitement when you build something that works. If you're one of those people, I want to encourage you to keep learning and growing as a programmer. This can be self-directed, and as fast or slow as you want it to be!</p> <p>The feeling like you can build anything is incredibly exciting. In the sections below, I'm sharing the resources for learning I've found over the years. I've only been able to use a small fraction of them, but all of these places are there for you to go, learn, and dream!</p>"},{"location":"learning_paths/all_steps/#javascript","title":"JavaScript","text":"<p>You might want to dig into JavaScript if you like the idea of building something awesome that lives on the web. JavaScript is the language of the web, and it's a great place to start if you want to build websites, web apps, or even mobile apps.</p> <p>To learn about JavaScript, I'd recommend you first go to Mozilla's Developer Network (MDN) and check out their JavaScript Guide. It's a fantastic place to start.</p> <p>If you get the hang of JavaScript, you might want to check out React, a JavaScript library for building user interfaces. It's a great way to build interactive web apps - and many of the apps you've used run on React.</p>"},{"location":"learning_paths/all_steps/#more-python","title":"More Python","text":"<p>If you want to keep learning Python, I'd recommend you check out the Python documentation. It's a great place to learn more about the language and its features.</p> <p>There are really great libraries you can dig into as well for diving into some interesting topics in Python - one of which is Django, a web framework for building web applications. You can check out the Django documentation to learn more. </p>"},{"location":"learning_paths/all_steps/#data-science","title":"Data Science","text":"<p>If you're interested in data science, you might want to check out Kaggle. It's a great place to learn about data science and machine learning, and they have a lot of great resources to help you get started.</p>"},{"location":"learning_paths/all_steps/#machine-learning","title":"Machine Learning","text":"<p>Related to Data Science, if you're interested in machine learning, you might want to check out TensorFlow. It's a great library for building machine learning models, and they have a lot of great resources to help you get started.</p> <p>For something a bit more \"wild west\", check out any of the following links:</p> <ul> <li>OpenAI's API</li> <li>Hugging Face</li> <li>Fast.ai</li> <li>OpenCV </li> </ul>"},{"location":"learning_paths/all_steps/#game-development","title":"Game Development","text":"<p>If you're interested in game development, you might want to check out Unity. It's a great platform for building games, and they have a lot of great resources to help you get started - I've used and coached students through their tutorials and they're fantastic, check those out here: Unity Learn.</p> <p>If you're interested in a slightly more difficult game development platform, you might want to check out Unreal Engine. It's a great platform for building games, and they have a lot of great resources to help you get started.</p>"},{"location":"learning_paths/all_steps/#mobile-apps-with-flutter","title":"Mobile Apps with Flutter","text":"<p>If you're interested in building mobile apps, you might want to check out Flutter. It's a great platform for building mobile apps, and they have a lot of great resources to help you get started.</p> <p>Flutter runs on the Dart programming language, a python-like language that's easy to learn, developed by Google. You can check out the Dart documentation to learn more.</p>"},{"location":"learning_paths/all_steps/#take-on-the-universe-with-rust","title":"Take on the Universe with Rust","text":"<p>If you're interested in a language that's a bit more challenging, you might want to check out Rust. It's a great language for building systems software, and it's designed to be safe, concurrent, and practical.</p> <p>Rust is absolutely one of the most important programming languages of the future, and if you're really excited about coding, I'd definitely recommend you check it out!</p> <p>If you want to dive into learning, check out the book. </p>"},{"location":"learning_paths/all_steps/#finally-free-and-open-source","title":"Finally: Free and Open Source","text":"<p>A final thought I want to leave you with is the power of free and open source software. The programming community - the world - is built on top of free and open source software. It's a powerful idea that anyone can use, modify, and distribute software for free.</p> <p>Check out the GNU Operating System's Philosophy page and the GNU GPL 3 license \"why\" page. These both provide detailed and practical explanations of why free and open source software is so important.</p> <p>The story of working in the open source space is fascinating to me, if it sounds interesting to you, I highly recommend checking out this book, Working in Public. </p> <p>If you want to contribute to the open source community, check out GitHub.</p>"},{"location":"licenses/","title":"Project Licenses","text":""},{"location":"licenses/#course-content","title":"Course Content","text":"<p>The course content for this project is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You can find the full text of the license here.</p> <p>This means that you are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format, as long as you give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.<ul> <li>Credit can be made to <code>PSYC 3010 - Programming for Behavioral Scientists by Trenton D Wirth</code></li> </ul> </li> <li>Adapt \u2014 remix, transform, and build upon the material, as long as you distribute your contributions under the same license as the original.</li> <li>NonCommercial \u2014 you may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 if you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> </ul> <p>Please refer to the full text of the license for more details on your rights and responsibilities.</p>"},{"location":"licenses/#software","title":"Software","text":"<p>The code for this project is licensed under GPLv3 (GNU General Public License version 3). You can find the full text of the license here.</p>"},{"location":"side_quests/","title":"Welcome to the Side Quests!","text":"<p>A \"Side Quests\" emphasize and reinforce the skills you've learned so far - and introduce some new ones. This is optional additional work for those who want to dive a little deeper. </p> <p>Python has so much to offer that our class can't cover everything. Side Quests are a way to explore more advanced topics, learn new libraries, and practice your skills in a fun and engaging way.</p> <p>Starting in Week 6, there will be a \"Side Quest\" every other week.</p> <p>Side quests are not graded, but an opportunity for you to learn and explore independently. </p> <p>Earlier in the semester, I created a \"bonus step\" where you could experiment with f-strings. I've now added that to the Side Quests section of the website!</p>"},{"location":"side_quests/bonus_printing/","title":"Side Quest: Effective Printing &amp; F-Strings","text":"<p>In this bonus section, we'll explore how to use print statements to check how code changes variables, understand what the code does, and how f-strings can be used to achieve this task. This is a crucial skill for debugging and learning how your code works.</p>"},{"location":"side_quests/bonus_printing/#using-print-statements-to-track-changes","title":"Using Print Statements to Track Changes","text":"<p>Print statements are a simple yet powerful tool to understand how your code is working. By printing the value of variables at different points in your code, you can see how they change over time.</p>"},{"location":"side_quests/bonus_printing/#example-tracking-a-number","title":"Example: Tracking a Number","text":"<p>Let's start with a simple example where we print a number, perform an operation on it, and then print it again to see the output.</p>"},{"location":"side_quests/bonus_printing/#example-code","title":"Example Code","text":"<pre><code>number = 10\nprint(\"Initial number:\", number)\n\n# Perform an operation\nnumber += 5\nprint(\"After adding 5:\", number)\n\n# Perform another operation\nnumber *= 2\nprint(\"After multiplying by 2:\", number)\n</code></pre>"},{"location":"side_quests/bonus_printing/#reflection","title":"Reflection","text":"<ul> <li>What did the output look like?</li> <li>Did you see how the number changed after each operation?</li> </ul>"},{"location":"side_quests/bonus_printing/#using-f-strings-for-effective-printing","title":"Using F-Strings for Effective Printing","text":"<p>F-strings (formatted string literals) are a more readable and concise way to include variable values in your print statements. They were introduced in Python 3.6 and have become a popular way to format strings.</p>"},{"location":"side_quests/bonus_printing/#example-using-f-strings","title":"Example: Using F-Strings","text":"<p>Let's rewrite the previous example using f-strings.</p>"},{"location":"side_quests/bonus_printing/#example-code_1","title":"Example Code","text":"<pre><code>number = 10\nprint(f\"Initial number: {number}\")\n\n# Perform an operation\nnumber += 5\nprint(f\"After adding 5: {number}\")\n\n# Perform another operation\nnumber *= 2\nprint(f\"After multiplying by 2: {number}\")\n</code></pre>"},{"location":"side_quests/bonus_printing/#reflection_1","title":"Reflection","text":"<ul> <li>How does the use of f-strings improve the readability of the code?</li> <li>Did you find it easier to understand the output with f-strings?</li> </ul>"},{"location":"side_quests/bonus_printing/#using-print-statements-in-conditional-statements-and-loops","title":"Using Print Statements in Conditional Statements and Loops","text":"<p>Print statements can also be used within conditional statements and loops to track how your code is changing your data.</p>"},{"location":"side_quests/bonus_printing/#example-print-statements-in-an-if-statement","title":"Example: Print Statements in an If Statement","text":"<p>Let's see how we can use print statements to understand the flow of an if statement.</p>"},{"location":"side_quests/bonus_printing/#example-code_2","title":"Example Code","text":"<pre><code>number = 10\n\nif number &gt; 5:\n    print(f\"{number} is greater than 5\")\n    number -= 3\n    print(f\"After subtracting 3: {number}\")\n\nif number &lt; 10:\n    print(f\"{number} is less than 10\")\n</code></pre>"},{"location":"side_quests/bonus_printing/#reflection_2","title":"Reflection","text":"<ul> <li>What did the output look like?</li> <li>Did you see how the value of <code>number</code> changed within the if statements?</li> </ul>"},{"location":"side_quests/bonus_printing/#example-print-statements-in-a-loop","title":"Example: Print Statements in a Loop","text":"<p>Now, let's use print statements within a loop to track changes.</p>"},{"location":"side_quests/bonus_printing/#example-code_3","title":"Example Code","text":"<pre><code>for i in range(5):\n    print(f\"Loop iteration {i}\")\n    i_squared = i ** 2\n    print(f\"{i} squared is {i_squared}\")\n</code></pre>"},{"location":"side_quests/bonus_printing/#reflection_3","title":"Reflection","text":"<ul> <li>What did the output look like?</li> <li>Did you see the pattern in the loop iterations and the squared values?</li> </ul> <p>By using print statements and f-strings, you can gain a deeper understanding of how your code works and how variables change over time. This is an essential skill for debugging and learning to code effectively.</p>"},{"location":"side_quests/design_patterns/","title":"Side Quest: Intro to Design Patterns","text":""},{"location":"side_quests/design_patterns/#introduction-to-design-patterns","title":"Introduction to Design Patterns","text":"<p>In this Side Quest, we\u2019re introducing Design Patterns. These are proven solutions to common problems you\u2019ll encounter in programming. Think of them like templates or blueprints for solving recurring issues in software design.</p> <p>Design patterns can help make your code more reusable, scalable, and understandable. In scientific programming, we often work with complex data and need our code to be both reliable and flexible. Learning to use design patterns can be a huge advantage.</p>"},{"location":"side_quests/design_patterns/#what-are-design-patterns","title":"What Are Design Patterns?","text":"<p>A design pattern is a general, reusable solution to a commonly occurring problem within a given context. Patterns are not complete code but rather templates that guide how we structure and organize code. They fall into three main categories:</p> <ol> <li>Creational Patterns: These deal with object creation mechanisms.</li> <li>Structural Patterns: These focus on organizing objects and classes.</li> <li>Behavioral Patterns: These manage communication between objects.</li> </ol> <p>In this step, we'll introduce a few foundational patterns:</p> <ul> <li>Singleton: Ensures only one instance of a class exists.</li> <li>Factory: Creates instances of different classes based on given conditions.</li> <li>Observer: Helps objects communicate without being directly linked, useful for experiment settings.</li> </ul>"},{"location":"side_quests/design_patterns/#1-singleton-pattern","title":"1. Singleton Pattern","text":""},{"location":"side_quests/design_patterns/#what-it-does","title":"What It Does","text":"<p>The Singleton Pattern ensures that a class has only one instance and provides a global point of access to it. This pattern is useful when you need exactly one object to coordinate actions across a system.</p>"},{"location":"side_quests/design_patterns/#example-use-case-experiment-settings","title":"Example Use Case: Experiment Settings","text":"<p>Imagine you have a set of parameters for an experiment (e.g., sample size, trial count) that should be consistent across various modules. Singleton can ensure only one settings object exists, avoiding conflicting settings.</p>"},{"location":"side_quests/design_patterns/#singleton-implementation","title":"Singleton Implementation","text":"<p>Here\u2019s how we can implement the Singleton pattern in Python:</p> <pre><code>class ExperimentSettings:\n    _instance = None  # To store the unique instance\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(ExperimentSettings, cls).__new__(cls)\n            # Set default experiment parameters\n            cls._instance.sample_size = 30\n            cls._instance.trial_count = 5\n        return cls._instance\n\n# Test Singleton behavior\nsettings1 = ExperimentSettings()\nsettings2 = ExperimentSettings()\n\nprint(settings1 == settings2)  # Should output: True, as both variables point to the same instance\n</code></pre> <p>This code ensures that <code>settings1</code> and <code>settings2</code> point to the same instance.</p>"},{"location":"side_quests/design_patterns/#2-factory-pattern","title":"2. Factory Pattern","text":""},{"location":"side_quests/design_patterns/#what-it-does_1","title":"What It Does","text":"<p>The Factory Pattern provides an interface for creating objects but lets subclasses decide which class to instantiate. This pattern is helpful when we want to create different types of objects based on input data without specifying the exact class of object that will be created.</p>"},{"location":"side_quests/design_patterns/#example-use-case-creating-participants-with-different-roles","title":"Example Use Case: Creating Participants with Different Roles","text":"<p>Imagine we\u2019re running a study with participants who have different roles\u2014some are control subjects, others are experimental. The Factory pattern can help us generate different types of participant objects without hardcoding the types.</p>"},{"location":"side_quests/design_patterns/#factory-implementation","title":"Factory Implementation","text":"<pre><code>class Participant:\n    def role(self):\n        raise NotImplementedError(\"Subclasses should implement this!\")\n\nclass ControlParticipant(Participant):\n    def role(self):\n        return \"Control Group\"\n\nclass ExperimentalParticipant(Participant):\n    def role(self):\n        return \"Experimental Group\"\n\nclass ParticipantFactory:\n    @staticmethod\n    def create_participant(participant_type):\n        if participant_type == \"control\":\n            return ControlParticipant()\n        elif participant_type == \"experimental\":\n            return ExperimentalParticipant()\n        else:\n            raise ValueError(\"Unknown participant type\")\n\n# Test Factory\ncontrol = ParticipantFactory.create_participant(\"control\")\nexperimental = ParticipantFactory.create_participant(\"experimental\")\n\nprint(control.role())       # Outputs: Control Group\nprint(experimental.role())  # Outputs: Experimental Group\n</code></pre> <p>This code allows us to create different participant types by simply specifying the type, without needing to know the specific class.</p>"},{"location":"side_quests/design_patterns/#3-observer-pattern","title":"3. Observer Pattern","text":""},{"location":"side_quests/design_patterns/#what-it-does_2","title":"What It Does","text":"<p>The Observer Pattern allows an object (the subject) to notify other objects (observers) when its state changes, without being tightly coupled to them. This is especially useful when several objects need to know about a change in another object\u2019s state, such as notifying modules of a change in experiment status.</p>"},{"location":"side_quests/design_patterns/#example-use-case-real-time-updates-in-experiments","title":"Example Use Case: Real-Time Updates in Experiments","text":"<p>If an experiment progresses in stages, you might want to notify multiple components (e.g., data collection, feedback display) whenever the experiment advances to a new stage.</p>"},{"location":"side_quests/design_patterns/#observer-implementation","title":"Observer Implementation","text":"<pre><code>class Subject:\n    def __init__(self):\n        self._observers = []\n\n    def attach(self, observer):\n        self._observers.append(observer)\n\n    def detach(self, observer):\n        self._observers.remove(observer)\n\n    def notify(self, message):\n        for observer in self._observers:\n            observer.update(message)\n\nclass Observer:\n    def update(self, message):\n        raise NotImplementedError(\"Subclass must implement this method\")\n\nclass ExperimentDisplay(Observer):\n    def update(self, message):\n        print(f\"Display received update: {message}\")\n\nclass DataLogger(Observer):\n    def update(self, message):\n        print(f\"DataLogger received update: {message}\")\n\n# Test Observer\nexperiment = Subject()\ndisplay = ExperimentDisplay()\nlogger = DataLogger()\n\nexperiment.attach(display)\nexperiment.attach(logger)\n\nexperiment.notify(\"Experiment started\")\nexperiment.notify(\"Experiment stage 1 completed\")\n</code></pre> <p>In this example, the <code>Subject</code> class maintains a list of observers and notifies them when there\u2019s an update. Each observer (like <code>ExperimentDisplay</code> and <code>DataLogger</code>) receives the update.</p>"},{"location":"side_quests/design_patterns/#reflect","title":"Reflect","text":"<ol> <li>Why might these patterns be useful in a psychology-focused programming environment?</li> <li>What are some cases in your own research where these patterns might help?</li> </ol>"},{"location":"side_quests/design_patterns/#review","title":"Review","text":"<p>In this step, we introduced three foundational design patterns:</p> <ul> <li>Singleton: Ensures only one instance of a class.</li> <li>Factory: Creates objects based on specific requirements.</li> <li>Observer: Manages dependencies and notifies multiple objects of changes.</li> </ul> <p>Understanding these patterns is a powerful way to improve the structure and scalability of your code.</p>"},{"location":"side_quests/oop/","title":"Side Quest: OOP Challenge","text":""},{"location":"side_quests/oop/#introduction","title":"Introduction","text":"<p>Welcome to the Week 6 Side Quest! This exercise will help you explore and apply inheritance in Python's Object-Oriented Programming (OOP) by developing a hierarchy of plant classes that exhibit unique behaviors.</p>"},{"location":"side_quests/oop/#understanding-inheritance-in-oop","title":"Understanding Inheritance in OOP","text":""},{"location":"side_quests/oop/#what-is-inheritance","title":"What is Inheritance?","text":"<p>Inheritance is a key OOP feature that allows one class (a subclass) to inherit the attributes and methods from another class (known as a superclass or base class). This facilitates code reusability, reduces redundancy, and enhances the maintainability of code.</p>"},{"location":"side_quests/oop/#why-use-inheritance","title":"Why Use Inheritance?","text":"<p>Inheritance allows you to write a general class with common functionality and have more specific classes extend this class, adding or modifying behaviors. This structure makes your code more modular and intuitive.</p>"},{"location":"side_quests/oop/#task-description","title":"Task Description","text":"<p>You will create a basic <code>Plant</code> class and then extend it with specific plant types, each inheriting the general characteristics of the base class but also introducing their own unique behaviors.</p>"},{"location":"side_quests/oop/#part-1-create-the-plant-base-class","title":"Part 1: Create the Plant Base Class","text":"<p>Start by defining a <code>Plant</code> class that will act as the base class for all specific plant types.</p> <ul> <li>Attributes: <code>name</code>, <code>height</code></li> <li>Method: <code>grow()</code>, simulates the growth of the plant.</li> </ul> <pre><code>class Plant:\n    def __init__(self, name, height):\n        self.name = name\n        self.height = height\n\n    def grow(self):\n        self.height += 1\n        print(f\"{self.name} grows to {self.height}cm tall.\")\n</code></pre>"},{"location":"side_quests/oop/#part-2-define-specific-plant-subclasses","title":"Part 2: Define Specific Plant Subclasses","text":"<p>Next, create specific subclasses for <code>Flower</code> and <code>Tree</code>. These subclasses will inherit the base <code>Plant</code> class by creating them and feeding in <code>Plant</code> as an argument to the class definition, and then calling a <code>super()</code> method in the <code>__init__</code> method.</p> <p><code>super()</code> is used to call the superclass's (the class from which a method is inherited) methods.</p> <pre><code>class Flower(Plant):\n    def grow(self):\n        super().grow()  # Calls the base class grow method\n        print(f\"The {self.name} prepares to bloom.\")\n\nclass Tree(Plant):\n    def grow(self):\n        super().grow()  # Calls the base class grow method\n        print(f\"The {self.name} stretches towards the sky.\")\n</code></pre>"},{"location":"side_quests/oop/#part-3-adding-unique-behaviors-to-subclasses","title":"Part 3: Adding Unique Behaviors to Subclasses","text":"<p>Now, add unique methods to these subclasses that reflect specific behaviors not shared by all plants.</p> <ul> <li>Add a <code>bloom()</code> method to the <code>Flower</code> class.</li> <li>Add a <code>shed_leaves()</code> method to the <code>Tree</code> class.</li> </ul> <pre><code>class Flower(Plant):\n    def bloom(self):\n        print(f\"The {self.name} blooms with vibrant colors!\")\n\nclass Tree(Plant):\n    def shed_leaves(self):\n        print(f\"The {self.name} sheds its leaves for the winter.\")\n</code></pre>"},{"location":"side_quests/oop/#part-4-integrating-new-behaviors-into-the-growth-cycle","title":"Part 4: Integrating New Behaviors into the Growth Cycle","text":"<p>Now, try to modify the <code>grow()</code> method in each subclass to include these new behaviors as part of the growth cycle.</p>"},{"location":"side_quests/oop/#advanced-challenge-optional","title":"Advanced Challenge (Optional)","text":"<p>Consider enhancing the <code>Flower</code> and <code>Tree</code> classes further by: - Implementing seasonal effects where flowers bloom only in spring and trees shed leaves only in autumn. - Adding additional attributes like <code>color</code> for flowers and <code>leaf_count</code> for trees to make the simulations more detailed.</p>"},{"location":"side_quests/pseudocode/","title":"Pseudocode","text":""},{"location":"side_quests/pseudocode/#what-is-pseudocode","title":"What is Pseudocode?","text":"<p>Pseudocode is a way to describe how a program works using plain, human-readable language. It doesn't follow the syntax of any specific programming language but is structured to reflect the logical flow and actions that a program will take. Think of it as a \"blueprint\" for your code.</p> <p>Pseudocode is useful because it allows you to focus on the logic and structure of a program without worrying about the syntax errors that can come from coding too soon. It's a great tool for planning how you'll solve a problem and is often used as a step between figuring out what a program needs to do and writing the actual code.</p>"},{"location":"side_quests/pseudocode/#why-pseudocode-is-useful","title":"Why Pseudocode is Useful","text":"<ul> <li>Clarifies Thinking: Writing pseudocode forces you to think through the logic of a problem before getting bogged down in syntax.</li> <li>Simplifies Collaboration: Since pseudocode is written in plain language, it\u2019s easier for non-programmers or teammates who aren't familiar with a specific programming language to understand and contribute to the plan.</li> <li>Reduces Errors: By organizing your thoughts first, you minimize the chance of errors when you eventually write the actual code.</li> <li>Serves as a Guide: Pseudocode can act like a \"to-do list\" when you're coding. You can gradually convert each step into actual code, making the programming process smoother.</li> </ul>"},{"location":"side_quests/pseudocode/#how-to-write-pseudocode","title":"How to Write Pseudocode","text":"<p>When writing pseudocode:</p> <ol> <li>Use simple, plain language.</li> <li>Focus on the logical flow of the problem.</li> <li>Break tasks into small, manageable steps.</li> <li>Avoid worrying about the syntax of any programming language\u2014just focus on the steps you need to take.</li> </ol>"},{"location":"side_quests/pseudocode/#basic-structure-of-pseudocode","title":"Basic Structure of Pseudocode","text":"<ul> <li>Start with a goal: What do you want the program to accomplish?</li> <li>List the tasks: Break down the steps required to reach the goal.</li> <li>Use conditionals: If needed, use \"IF\", \"ELSE\", and \"WHILE\" to represent decision-making points in your logic.</li> </ul> <p>Write it all out</p> <p>Pseudocoding is an opportunity to externalize all the thoughts you have about approaching a problem. Think of it as a brainstorming tool - it is a low stakes environment where you can write out all your thoughts and ideas without worrying about the syntax of a programming language.</p> <p>Worried that something wont work? Who cares! When in doubt, just write it out. Then, when you're done, you can edit and refine your thoughts into a more coherent plan.</p>"},{"location":"side_quests/pseudocode/#a-situation-describing-neighborhood-pets","title":"A Situation: Describing Neighborhood Pets","text":"<p>Imagine you want to write code that would allow you to fluidly describe all the pets in your neighborhood. You want to collect information about each pet, such as their name, type, age, and - if they're a dog - whether they like pats.</p> <ol> <li>Collect the pet\u2019s name.</li> <li>Note the type of pet (e.g., dog, cat, turtle).</li> <li>Record the pet\u2019s age.</li> <li>If the pet is a dog, note if they like pats or not.</li> </ol> <p>Think about how you'd approach this problem. Try writing pseudocode to outline the steps you'd take to collect and describe the pets in your neighborhood!</p> <p>When you're done, look at the potential solution below. Note: there are many ways to approach this problem, and your pseudocode might look different from the example provided.</p>"},{"location":"side_quests/pseudocode/#practice-writing-pseudocode","title":"Practice Writing Pseudocode","text":"<p>Here\u2019s an example of how you might write pseudocode for the neighborhood pet description problem:</p> <pre><code>- Start\n- For each pet in the neighborhood:\n    - Get the pet's name\n    - Get the type of pet\n    - Get the pet's age\n    - IF the pet is a dog:\n        - Ask if the dog likes pats (being pet)\n        - Record whether the dog likes pats\n    - Record all the information for this pet\n- Repeat for all pets\n- End\n</code></pre>"},{"location":"side_quests/pseudocode/#refining-pseudocode","title":"Refining Pseudocode","text":"<p>We can use Pseudocode as an opportunity to think out the structure of classes and methods we would use to solve the problem.</p> <p>If we were to approach this problem using classes and object-oriented thinking, here\u2019s how you could outline it in pseudocode:</p> <pre><code>- Define a class called Pet:\n    - The class has the following attributes:\n        - pet's name\n        - type of pet (e.g., dog, cat)\n        - pet's age\n        - IF the pet is a dog:\n            - an attribute to store whether the dog likes pats\n    - Define a method called `display_info()` in the Pet class:\n        - The method prints out all the pet's details, including whether a dog likes pats if applicable\n\n- Create an empty list to store all the pets\n- For each pet in the neighborhood:\n    - Ask for the pet's name\n    - Ask for the type of pet\n    - Ask for the pet's age\n    - IF the type of pet is a dog:\n        - Ask if the dog likes pats\n        - Store whether the dog likes pats\n    - Create an instance of the Pet class with the collected information\n    - Add the new pet to the list of pets\n- After all pets have been recorded:\n    - Loop through the list of pets and call `display_info()` on each pet to show their details\n- End\n</code></pre> <p>Buzz words to help you</p> <p>Object oriented programming is filled with little terms that can help you structure your pseudocode. Here are a few to get you started:</p> <ul> <li>Class: A blueprint for creating objects. Classes define the attributes and methods that objects will have.</li> <li>Instance: An object created from a class. Each instance has its own unique data.</li> <li>Method: A function defined inside a class that operates on the object's data.</li> <li>Attribute: A variable that belongs to an object. Attributes store the object's state.</li> </ul>"},{"location":"side_quests/pseudocode/#implementing-psuedocode","title":"Implementing Psuedocode","text":"<p>If you're feeling up to it, take the outline written above and use it to construct properly functioning Python code.</p> <p>If you're struggling or finished trying, check out the implemented solution below:</p> Implementation<pre><code># Define the Pet class\nclass Pet:\n    def __init__(self, name, pet_type, age, friendly=None):\n        self.name = name\n        self.pet_type = pet_type\n        self.age = age\n        self.friendly = friendly  # Only relevant for dogs\n\n    def display_info(self):\n        info = f\"Name: {self.name}, Type: {self.pet_type}, Age: {self.age}\"\n        if self.pet_type == \"dog\":\n            info += f\", Friendly: {self.friendly}\"\n        print(info)\n\n# Create an empty list to store pets\npets_list = []\n\n# Loop to collect information for each pet\nwhile True:\n    name = input(\"Enter the pet's name (or 'stop' to finish): \")\n    if name == 'stop':\n        break\n    pet_type = input(\"Enter the type of pet (e.g., dog, cat): \")\n    age = input(\"Enter the pet's age: \")\n\n    # If the pet is a dog, ask if it is friendly\n    friendly = None\n    if pet_type == \"dog\":\n        friendly = input(\"Is the dog friendly? (yes/no): \")\n\n    # Create a new Pet object\n    pet = Pet(name, pet_type, age, friendly)\n    pets_list.append(pet)\n\n# Display information about each pet\nfor pet in pets_list:\n    pet.display_info()\n</code></pre> <p>This code example shows how pseudocode can be converted into working Python code using classes and loops. The <code>Pet</code> class models the pets, while the main loop collects and stores data in an organized way. Once all the data is collected, we display the information for each pet.</p>"}]}